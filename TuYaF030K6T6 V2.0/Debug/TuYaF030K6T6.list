
TuYaF030K6T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058c4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000854  08005984  08005984  00015984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061d8  080061d8  00020370  2**0
                  CONTENTS
  4 .ARM          00000000  080061d8  080061d8  00020370  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061d8  080061d8  00020370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061d8  080061d8  000161d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061dc  080061dc  000161dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000370  20000000  080061e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000063c  20000370  08006550  00020370  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009ac  08006550  000209ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020370  2**0
                  CONTENTS, READONLY
 12 .debug_info   000229cd  00000000  00000000  00020398  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004a68  00000000  00000000  00042d65  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000adc1  00000000  00000000  000477cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000dd8  00000000  00000000  00052590  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001090  00000000  00000000  00053368  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00017745  00000000  00000000  000543f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00018580  00000000  00000000  0006bb3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0006ea1c  00000000  00000000  000840bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000f2ad9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002958  00000000  00000000  000f2b54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000370 	.word	0x20000370
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800596c 	.word	0x0800596c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000374 	.word	0x20000374
 8000104:	0800596c 	.word	0x0800596c

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f8f0 	bl	8000418 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__divsi3>:
 8000244:	4603      	mov	r3, r0
 8000246:	430b      	orrs	r3, r1
 8000248:	d47f      	bmi.n	800034a <__divsi3+0x106>
 800024a:	2200      	movs	r2, #0
 800024c:	0843      	lsrs	r3, r0, #1
 800024e:	428b      	cmp	r3, r1
 8000250:	d374      	bcc.n	800033c <__divsi3+0xf8>
 8000252:	0903      	lsrs	r3, r0, #4
 8000254:	428b      	cmp	r3, r1
 8000256:	d35f      	bcc.n	8000318 <__divsi3+0xd4>
 8000258:	0a03      	lsrs	r3, r0, #8
 800025a:	428b      	cmp	r3, r1
 800025c:	d344      	bcc.n	80002e8 <__divsi3+0xa4>
 800025e:	0b03      	lsrs	r3, r0, #12
 8000260:	428b      	cmp	r3, r1
 8000262:	d328      	bcc.n	80002b6 <__divsi3+0x72>
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d30d      	bcc.n	8000286 <__divsi3+0x42>
 800026a:	22ff      	movs	r2, #255	; 0xff
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	ba12      	rev	r2, r2
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__divsi3+0x38>
 8000276:	1212      	asrs	r2, r2, #8
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	d065      	beq.n	8000348 <__divsi3+0x104>
 800027c:	0b03      	lsrs	r3, r0, #12
 800027e:	428b      	cmp	r3, r1
 8000280:	d319      	bcc.n	80002b6 <__divsi3+0x72>
 8000282:	e000      	b.n	8000286 <__divsi3+0x42>
 8000284:	0a09      	lsrs	r1, r1, #8
 8000286:	0bc3      	lsrs	r3, r0, #15
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x4c>
 800028c:	03cb      	lsls	r3, r1, #15
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b83      	lsrs	r3, r0, #14
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x58>
 8000298:	038b      	lsls	r3, r1, #14
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b43      	lsrs	r3, r0, #13
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x64>
 80002a4:	034b      	lsls	r3, r1, #13
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b03      	lsrs	r3, r0, #12
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x70>
 80002b0:	030b      	lsls	r3, r1, #12
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0ac3      	lsrs	r3, r0, #11
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x7c>
 80002bc:	02cb      	lsls	r3, r1, #11
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a83      	lsrs	r3, r0, #10
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x88>
 80002c8:	028b      	lsls	r3, r1, #10
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a43      	lsrs	r3, r0, #9
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x94>
 80002d4:	024b      	lsls	r3, r1, #9
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a03      	lsrs	r3, r0, #8
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0xa0>
 80002e0:	020b      	lsls	r3, r1, #8
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	d2cd      	bcs.n	8000284 <__divsi3+0x40>
 80002e8:	09c3      	lsrs	r3, r0, #7
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xae>
 80002ee:	01cb      	lsls	r3, r1, #7
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0983      	lsrs	r3, r0, #6
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xba>
 80002fa:	018b      	lsls	r3, r1, #6
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0943      	lsrs	r3, r0, #5
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xc6>
 8000306:	014b      	lsls	r3, r1, #5
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0903      	lsrs	r3, r0, #4
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xd2>
 8000312:	010b      	lsls	r3, r1, #4
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	08c3      	lsrs	r3, r0, #3
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xde>
 800031e:	00cb      	lsls	r3, r1, #3
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0883      	lsrs	r3, r0, #2
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xea>
 800032a:	008b      	lsls	r3, r1, #2
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0843      	lsrs	r3, r0, #1
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xf6>
 8000336:	004b      	lsls	r3, r1, #1
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	1a41      	subs	r1, r0, r1
 800033e:	d200      	bcs.n	8000342 <__divsi3+0xfe>
 8000340:	4601      	mov	r1, r0
 8000342:	4152      	adcs	r2, r2
 8000344:	4610      	mov	r0, r2
 8000346:	4770      	bx	lr
 8000348:	e05d      	b.n	8000406 <__divsi3+0x1c2>
 800034a:	0fca      	lsrs	r2, r1, #31
 800034c:	d000      	beq.n	8000350 <__divsi3+0x10c>
 800034e:	4249      	negs	r1, r1
 8000350:	1003      	asrs	r3, r0, #32
 8000352:	d300      	bcc.n	8000356 <__divsi3+0x112>
 8000354:	4240      	negs	r0, r0
 8000356:	4053      	eors	r3, r2
 8000358:	2200      	movs	r2, #0
 800035a:	469c      	mov	ip, r3
 800035c:	0903      	lsrs	r3, r0, #4
 800035e:	428b      	cmp	r3, r1
 8000360:	d32d      	bcc.n	80003be <__divsi3+0x17a>
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d312      	bcc.n	800038e <__divsi3+0x14a>
 8000368:	22fc      	movs	r2, #252	; 0xfc
 800036a:	0189      	lsls	r1, r1, #6
 800036c:	ba12      	rev	r2, r2
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d30c      	bcc.n	800038e <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d308      	bcc.n	800038e <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d304      	bcc.n	800038e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	d03a      	beq.n	80003fe <__divsi3+0x1ba>
 8000388:	1192      	asrs	r2, r2, #6
 800038a:	e000      	b.n	800038e <__divsi3+0x14a>
 800038c:	0989      	lsrs	r1, r1, #6
 800038e:	09c3      	lsrs	r3, r0, #7
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x154>
 8000394:	01cb      	lsls	r3, r1, #7
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0983      	lsrs	r3, r0, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x160>
 80003a0:	018b      	lsls	r3, r1, #6
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0943      	lsrs	r3, r0, #5
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x16c>
 80003ac:	014b      	lsls	r3, r1, #5
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0903      	lsrs	r3, r0, #4
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x178>
 80003b8:	010b      	lsls	r3, r1, #4
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	08c3      	lsrs	r3, r0, #3
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x184>
 80003c4:	00cb      	lsls	r3, r1, #3
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0883      	lsrs	r3, r0, #2
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x190>
 80003d0:	008b      	lsls	r3, r1, #2
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	d2d9      	bcs.n	800038c <__divsi3+0x148>
 80003d8:	0843      	lsrs	r3, r0, #1
 80003da:	428b      	cmp	r3, r1
 80003dc:	d301      	bcc.n	80003e2 <__divsi3+0x19e>
 80003de:	004b      	lsls	r3, r1, #1
 80003e0:	1ac0      	subs	r0, r0, r3
 80003e2:	4152      	adcs	r2, r2
 80003e4:	1a41      	subs	r1, r0, r1
 80003e6:	d200      	bcs.n	80003ea <__divsi3+0x1a6>
 80003e8:	4601      	mov	r1, r0
 80003ea:	4663      	mov	r3, ip
 80003ec:	4152      	adcs	r2, r2
 80003ee:	105b      	asrs	r3, r3, #1
 80003f0:	4610      	mov	r0, r2
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x1b4>
 80003f4:	4240      	negs	r0, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d500      	bpl.n	80003fc <__divsi3+0x1b8>
 80003fa:	4249      	negs	r1, r1
 80003fc:	4770      	bx	lr
 80003fe:	4663      	mov	r3, ip
 8000400:	105b      	asrs	r3, r3, #1
 8000402:	d300      	bcc.n	8000406 <__divsi3+0x1c2>
 8000404:	4240      	negs	r0, r0
 8000406:	b501      	push	{r0, lr}
 8000408:	2000      	movs	r0, #0
 800040a:	f000 f805 	bl	8000418 <__aeabi_idiv0>
 800040e:	bd02      	pop	{r1, pc}

08000410 <__aeabi_idivmod>:
 8000410:	2900      	cmp	r1, #0
 8000412:	d0f8      	beq.n	8000406 <__divsi3+0x1c2>
 8000414:	e716      	b.n	8000244 <__divsi3>
 8000416:	4770      	bx	lr

08000418 <__aeabi_idiv0>:
 8000418:	4770      	bx	lr
 800041a:	46c0      	nop			; (mov r8, r8)

0800041c <__aeabi_f2uiz>:
 800041c:	219e      	movs	r1, #158	; 0x9e
 800041e:	b510      	push	{r4, lr}
 8000420:	05c9      	lsls	r1, r1, #23
 8000422:	1c04      	adds	r4, r0, #0
 8000424:	f001 fe32 	bl	800208c <__aeabi_fcmpge>
 8000428:	2800      	cmp	r0, #0
 800042a:	d103      	bne.n	8000434 <__aeabi_f2uiz+0x18>
 800042c:	1c20      	adds	r0, r4, #0
 800042e:	f000 fc33 	bl	8000c98 <__aeabi_f2iz>
 8000432:	bd10      	pop	{r4, pc}
 8000434:	219e      	movs	r1, #158	; 0x9e
 8000436:	1c20      	adds	r0, r4, #0
 8000438:	05c9      	lsls	r1, r1, #23
 800043a:	f000 fa69 	bl	8000910 <__aeabi_fsub>
 800043e:	f000 fc2b 	bl	8000c98 <__aeabi_f2iz>
 8000442:	2380      	movs	r3, #128	; 0x80
 8000444:	061b      	lsls	r3, r3, #24
 8000446:	469c      	mov	ip, r3
 8000448:	4460      	add	r0, ip
 800044a:	e7f2      	b.n	8000432 <__aeabi_f2uiz+0x16>

0800044c <__aeabi_d2uiz>:
 800044c:	b570      	push	{r4, r5, r6, lr}
 800044e:	2200      	movs	r2, #0
 8000450:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <__aeabi_d2uiz+0x38>)
 8000452:	0004      	movs	r4, r0
 8000454:	000d      	movs	r5, r1
 8000456:	f001 fddf 	bl	8002018 <__aeabi_dcmpge>
 800045a:	2800      	cmp	r0, #0
 800045c:	d104      	bne.n	8000468 <__aeabi_d2uiz+0x1c>
 800045e:	0020      	movs	r0, r4
 8000460:	0029      	movs	r1, r5
 8000462:	f001 fd35 	bl	8001ed0 <__aeabi_d2iz>
 8000466:	bd70      	pop	{r4, r5, r6, pc}
 8000468:	4b06      	ldr	r3, [pc, #24]	; (8000484 <__aeabi_d2uiz+0x38>)
 800046a:	2200      	movs	r2, #0
 800046c:	0020      	movs	r0, r4
 800046e:	0029      	movs	r1, r5
 8000470:	f001 f9e6 	bl	8001840 <__aeabi_dsub>
 8000474:	f001 fd2c 	bl	8001ed0 <__aeabi_d2iz>
 8000478:	2380      	movs	r3, #128	; 0x80
 800047a:	061b      	lsls	r3, r3, #24
 800047c:	469c      	mov	ip, r3
 800047e:	4460      	add	r0, ip
 8000480:	e7f1      	b.n	8000466 <__aeabi_d2uiz+0x1a>
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	41e00000 	.word	0x41e00000

08000488 <__aeabi_fdiv>:
 8000488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048a:	4657      	mov	r7, sl
 800048c:	464e      	mov	r6, r9
 800048e:	4645      	mov	r5, r8
 8000490:	46de      	mov	lr, fp
 8000492:	0244      	lsls	r4, r0, #9
 8000494:	b5e0      	push	{r5, r6, r7, lr}
 8000496:	0046      	lsls	r6, r0, #1
 8000498:	4688      	mov	r8, r1
 800049a:	0a64      	lsrs	r4, r4, #9
 800049c:	0e36      	lsrs	r6, r6, #24
 800049e:	0fc7      	lsrs	r7, r0, #31
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d063      	beq.n	800056c <__aeabi_fdiv+0xe4>
 80004a4:	2eff      	cmp	r6, #255	; 0xff
 80004a6:	d024      	beq.n	80004f2 <__aeabi_fdiv+0x6a>
 80004a8:	2380      	movs	r3, #128	; 0x80
 80004aa:	00e4      	lsls	r4, r4, #3
 80004ac:	04db      	lsls	r3, r3, #19
 80004ae:	431c      	orrs	r4, r3
 80004b0:	2300      	movs	r3, #0
 80004b2:	4699      	mov	r9, r3
 80004b4:	469b      	mov	fp, r3
 80004b6:	3e7f      	subs	r6, #127	; 0x7f
 80004b8:	4643      	mov	r3, r8
 80004ba:	4642      	mov	r2, r8
 80004bc:	025d      	lsls	r5, r3, #9
 80004be:	0fd2      	lsrs	r2, r2, #31
 80004c0:	005b      	lsls	r3, r3, #1
 80004c2:	0a6d      	lsrs	r5, r5, #9
 80004c4:	0e1b      	lsrs	r3, r3, #24
 80004c6:	4690      	mov	r8, r2
 80004c8:	4692      	mov	sl, r2
 80004ca:	d065      	beq.n	8000598 <__aeabi_fdiv+0x110>
 80004cc:	2bff      	cmp	r3, #255	; 0xff
 80004ce:	d055      	beq.n	800057c <__aeabi_fdiv+0xf4>
 80004d0:	2280      	movs	r2, #128	; 0x80
 80004d2:	2100      	movs	r1, #0
 80004d4:	00ed      	lsls	r5, r5, #3
 80004d6:	04d2      	lsls	r2, r2, #19
 80004d8:	3b7f      	subs	r3, #127	; 0x7f
 80004da:	4315      	orrs	r5, r2
 80004dc:	1af6      	subs	r6, r6, r3
 80004de:	4643      	mov	r3, r8
 80004e0:	464a      	mov	r2, r9
 80004e2:	407b      	eors	r3, r7
 80004e4:	2a0f      	cmp	r2, #15
 80004e6:	d900      	bls.n	80004ea <__aeabi_fdiv+0x62>
 80004e8:	e08d      	b.n	8000606 <__aeabi_fdiv+0x17e>
 80004ea:	486d      	ldr	r0, [pc, #436]	; (80006a0 <__aeabi_fdiv+0x218>)
 80004ec:	0092      	lsls	r2, r2, #2
 80004ee:	5882      	ldr	r2, [r0, r2]
 80004f0:	4697      	mov	pc, r2
 80004f2:	2c00      	cmp	r4, #0
 80004f4:	d154      	bne.n	80005a0 <__aeabi_fdiv+0x118>
 80004f6:	2308      	movs	r3, #8
 80004f8:	4699      	mov	r9, r3
 80004fa:	3b06      	subs	r3, #6
 80004fc:	26ff      	movs	r6, #255	; 0xff
 80004fe:	469b      	mov	fp, r3
 8000500:	e7da      	b.n	80004b8 <__aeabi_fdiv+0x30>
 8000502:	2500      	movs	r5, #0
 8000504:	4653      	mov	r3, sl
 8000506:	2902      	cmp	r1, #2
 8000508:	d01b      	beq.n	8000542 <__aeabi_fdiv+0xba>
 800050a:	2903      	cmp	r1, #3
 800050c:	d100      	bne.n	8000510 <__aeabi_fdiv+0x88>
 800050e:	e0bf      	b.n	8000690 <__aeabi_fdiv+0x208>
 8000510:	2901      	cmp	r1, #1
 8000512:	d028      	beq.n	8000566 <__aeabi_fdiv+0xde>
 8000514:	0030      	movs	r0, r6
 8000516:	307f      	adds	r0, #127	; 0x7f
 8000518:	2800      	cmp	r0, #0
 800051a:	dd20      	ble.n	800055e <__aeabi_fdiv+0xd6>
 800051c:	076a      	lsls	r2, r5, #29
 800051e:	d004      	beq.n	800052a <__aeabi_fdiv+0xa2>
 8000520:	220f      	movs	r2, #15
 8000522:	402a      	ands	r2, r5
 8000524:	2a04      	cmp	r2, #4
 8000526:	d000      	beq.n	800052a <__aeabi_fdiv+0xa2>
 8000528:	3504      	adds	r5, #4
 800052a:	012a      	lsls	r2, r5, #4
 800052c:	d503      	bpl.n	8000536 <__aeabi_fdiv+0xae>
 800052e:	0030      	movs	r0, r6
 8000530:	4a5c      	ldr	r2, [pc, #368]	; (80006a4 <__aeabi_fdiv+0x21c>)
 8000532:	3080      	adds	r0, #128	; 0x80
 8000534:	4015      	ands	r5, r2
 8000536:	28fe      	cmp	r0, #254	; 0xfe
 8000538:	dc03      	bgt.n	8000542 <__aeabi_fdiv+0xba>
 800053a:	01ac      	lsls	r4, r5, #6
 800053c:	0a64      	lsrs	r4, r4, #9
 800053e:	b2c2      	uxtb	r2, r0
 8000540:	e001      	b.n	8000546 <__aeabi_fdiv+0xbe>
 8000542:	22ff      	movs	r2, #255	; 0xff
 8000544:	2400      	movs	r4, #0
 8000546:	0264      	lsls	r4, r4, #9
 8000548:	05d2      	lsls	r2, r2, #23
 800054a:	0a60      	lsrs	r0, r4, #9
 800054c:	07db      	lsls	r3, r3, #31
 800054e:	4310      	orrs	r0, r2
 8000550:	4318      	orrs	r0, r3
 8000552:	bc3c      	pop	{r2, r3, r4, r5}
 8000554:	4690      	mov	r8, r2
 8000556:	4699      	mov	r9, r3
 8000558:	46a2      	mov	sl, r4
 800055a:	46ab      	mov	fp, r5
 800055c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800055e:	2201      	movs	r2, #1
 8000560:	1a10      	subs	r0, r2, r0
 8000562:	281b      	cmp	r0, #27
 8000564:	dd7c      	ble.n	8000660 <__aeabi_fdiv+0x1d8>
 8000566:	2200      	movs	r2, #0
 8000568:	2400      	movs	r4, #0
 800056a:	e7ec      	b.n	8000546 <__aeabi_fdiv+0xbe>
 800056c:	2c00      	cmp	r4, #0
 800056e:	d11d      	bne.n	80005ac <__aeabi_fdiv+0x124>
 8000570:	2304      	movs	r3, #4
 8000572:	4699      	mov	r9, r3
 8000574:	3b03      	subs	r3, #3
 8000576:	2600      	movs	r6, #0
 8000578:	469b      	mov	fp, r3
 800057a:	e79d      	b.n	80004b8 <__aeabi_fdiv+0x30>
 800057c:	3eff      	subs	r6, #255	; 0xff
 800057e:	2d00      	cmp	r5, #0
 8000580:	d120      	bne.n	80005c4 <__aeabi_fdiv+0x13c>
 8000582:	2102      	movs	r1, #2
 8000584:	4643      	mov	r3, r8
 8000586:	464a      	mov	r2, r9
 8000588:	407b      	eors	r3, r7
 800058a:	430a      	orrs	r2, r1
 800058c:	2a0f      	cmp	r2, #15
 800058e:	d8d8      	bhi.n	8000542 <__aeabi_fdiv+0xba>
 8000590:	4845      	ldr	r0, [pc, #276]	; (80006a8 <__aeabi_fdiv+0x220>)
 8000592:	0092      	lsls	r2, r2, #2
 8000594:	5882      	ldr	r2, [r0, r2]
 8000596:	4697      	mov	pc, r2
 8000598:	2d00      	cmp	r5, #0
 800059a:	d119      	bne.n	80005d0 <__aeabi_fdiv+0x148>
 800059c:	2101      	movs	r1, #1
 800059e:	e7f1      	b.n	8000584 <__aeabi_fdiv+0xfc>
 80005a0:	230c      	movs	r3, #12
 80005a2:	4699      	mov	r9, r3
 80005a4:	3b09      	subs	r3, #9
 80005a6:	26ff      	movs	r6, #255	; 0xff
 80005a8:	469b      	mov	fp, r3
 80005aa:	e785      	b.n	80004b8 <__aeabi_fdiv+0x30>
 80005ac:	0020      	movs	r0, r4
 80005ae:	f001 fd77 	bl	80020a0 <__clzsi2>
 80005b2:	2676      	movs	r6, #118	; 0x76
 80005b4:	1f43      	subs	r3, r0, #5
 80005b6:	409c      	lsls	r4, r3
 80005b8:	2300      	movs	r3, #0
 80005ba:	4276      	negs	r6, r6
 80005bc:	1a36      	subs	r6, r6, r0
 80005be:	4699      	mov	r9, r3
 80005c0:	469b      	mov	fp, r3
 80005c2:	e779      	b.n	80004b8 <__aeabi_fdiv+0x30>
 80005c4:	464a      	mov	r2, r9
 80005c6:	2303      	movs	r3, #3
 80005c8:	431a      	orrs	r2, r3
 80005ca:	4691      	mov	r9, r2
 80005cc:	2103      	movs	r1, #3
 80005ce:	e786      	b.n	80004de <__aeabi_fdiv+0x56>
 80005d0:	0028      	movs	r0, r5
 80005d2:	f001 fd65 	bl	80020a0 <__clzsi2>
 80005d6:	1f43      	subs	r3, r0, #5
 80005d8:	1836      	adds	r6, r6, r0
 80005da:	409d      	lsls	r5, r3
 80005dc:	3676      	adds	r6, #118	; 0x76
 80005de:	2100      	movs	r1, #0
 80005e0:	e77d      	b.n	80004de <__aeabi_fdiv+0x56>
 80005e2:	2480      	movs	r4, #128	; 0x80
 80005e4:	2300      	movs	r3, #0
 80005e6:	03e4      	lsls	r4, r4, #15
 80005e8:	22ff      	movs	r2, #255	; 0xff
 80005ea:	e7ac      	b.n	8000546 <__aeabi_fdiv+0xbe>
 80005ec:	2500      	movs	r5, #0
 80005ee:	2380      	movs	r3, #128	; 0x80
 80005f0:	03db      	lsls	r3, r3, #15
 80005f2:	421c      	tst	r4, r3
 80005f4:	d028      	beq.n	8000648 <__aeabi_fdiv+0x1c0>
 80005f6:	421d      	tst	r5, r3
 80005f8:	d126      	bne.n	8000648 <__aeabi_fdiv+0x1c0>
 80005fa:	432b      	orrs	r3, r5
 80005fc:	025c      	lsls	r4, r3, #9
 80005fe:	0a64      	lsrs	r4, r4, #9
 8000600:	4643      	mov	r3, r8
 8000602:	22ff      	movs	r2, #255	; 0xff
 8000604:	e79f      	b.n	8000546 <__aeabi_fdiv+0xbe>
 8000606:	0162      	lsls	r2, r4, #5
 8000608:	016c      	lsls	r4, r5, #5
 800060a:	42a2      	cmp	r2, r4
 800060c:	d224      	bcs.n	8000658 <__aeabi_fdiv+0x1d0>
 800060e:	211b      	movs	r1, #27
 8000610:	2500      	movs	r5, #0
 8000612:	3e01      	subs	r6, #1
 8000614:	2701      	movs	r7, #1
 8000616:	0010      	movs	r0, r2
 8000618:	006d      	lsls	r5, r5, #1
 800061a:	0052      	lsls	r2, r2, #1
 800061c:	2800      	cmp	r0, #0
 800061e:	db01      	blt.n	8000624 <__aeabi_fdiv+0x19c>
 8000620:	4294      	cmp	r4, r2
 8000622:	d801      	bhi.n	8000628 <__aeabi_fdiv+0x1a0>
 8000624:	1b12      	subs	r2, r2, r4
 8000626:	433d      	orrs	r5, r7
 8000628:	3901      	subs	r1, #1
 800062a:	2900      	cmp	r1, #0
 800062c:	d1f3      	bne.n	8000616 <__aeabi_fdiv+0x18e>
 800062e:	0014      	movs	r4, r2
 8000630:	1e62      	subs	r2, r4, #1
 8000632:	4194      	sbcs	r4, r2
 8000634:	4325      	orrs	r5, r4
 8000636:	e76d      	b.n	8000514 <__aeabi_fdiv+0x8c>
 8000638:	46ba      	mov	sl, r7
 800063a:	4659      	mov	r1, fp
 800063c:	0025      	movs	r5, r4
 800063e:	4653      	mov	r3, sl
 8000640:	2902      	cmp	r1, #2
 8000642:	d000      	beq.n	8000646 <__aeabi_fdiv+0x1be>
 8000644:	e761      	b.n	800050a <__aeabi_fdiv+0x82>
 8000646:	e77c      	b.n	8000542 <__aeabi_fdiv+0xba>
 8000648:	2380      	movs	r3, #128	; 0x80
 800064a:	03db      	lsls	r3, r3, #15
 800064c:	431c      	orrs	r4, r3
 800064e:	0264      	lsls	r4, r4, #9
 8000650:	0a64      	lsrs	r4, r4, #9
 8000652:	003b      	movs	r3, r7
 8000654:	22ff      	movs	r2, #255	; 0xff
 8000656:	e776      	b.n	8000546 <__aeabi_fdiv+0xbe>
 8000658:	1b12      	subs	r2, r2, r4
 800065a:	211a      	movs	r1, #26
 800065c:	2501      	movs	r5, #1
 800065e:	e7d9      	b.n	8000614 <__aeabi_fdiv+0x18c>
 8000660:	369e      	adds	r6, #158	; 0x9e
 8000662:	002a      	movs	r2, r5
 8000664:	40b5      	lsls	r5, r6
 8000666:	002c      	movs	r4, r5
 8000668:	40c2      	lsrs	r2, r0
 800066a:	1e65      	subs	r5, r4, #1
 800066c:	41ac      	sbcs	r4, r5
 800066e:	4314      	orrs	r4, r2
 8000670:	0762      	lsls	r2, r4, #29
 8000672:	d004      	beq.n	800067e <__aeabi_fdiv+0x1f6>
 8000674:	220f      	movs	r2, #15
 8000676:	4022      	ands	r2, r4
 8000678:	2a04      	cmp	r2, #4
 800067a:	d000      	beq.n	800067e <__aeabi_fdiv+0x1f6>
 800067c:	3404      	adds	r4, #4
 800067e:	0162      	lsls	r2, r4, #5
 8000680:	d403      	bmi.n	800068a <__aeabi_fdiv+0x202>
 8000682:	01a4      	lsls	r4, r4, #6
 8000684:	0a64      	lsrs	r4, r4, #9
 8000686:	2200      	movs	r2, #0
 8000688:	e75d      	b.n	8000546 <__aeabi_fdiv+0xbe>
 800068a:	2201      	movs	r2, #1
 800068c:	2400      	movs	r4, #0
 800068e:	e75a      	b.n	8000546 <__aeabi_fdiv+0xbe>
 8000690:	2480      	movs	r4, #128	; 0x80
 8000692:	03e4      	lsls	r4, r4, #15
 8000694:	432c      	orrs	r4, r5
 8000696:	0264      	lsls	r4, r4, #9
 8000698:	0a64      	lsrs	r4, r4, #9
 800069a:	22ff      	movs	r2, #255	; 0xff
 800069c:	e753      	b.n	8000546 <__aeabi_fdiv+0xbe>
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	080059a4 	.word	0x080059a4
 80006a4:	f7ffffff 	.word	0xf7ffffff
 80006a8:	080059e4 	.word	0x080059e4

080006ac <__aeabi_fmul>:
 80006ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ae:	464e      	mov	r6, r9
 80006b0:	4657      	mov	r7, sl
 80006b2:	4645      	mov	r5, r8
 80006b4:	46de      	mov	lr, fp
 80006b6:	b5e0      	push	{r5, r6, r7, lr}
 80006b8:	0243      	lsls	r3, r0, #9
 80006ba:	0a5b      	lsrs	r3, r3, #9
 80006bc:	0045      	lsls	r5, r0, #1
 80006be:	b083      	sub	sp, #12
 80006c0:	1c0f      	adds	r7, r1, #0
 80006c2:	4699      	mov	r9, r3
 80006c4:	0e2d      	lsrs	r5, r5, #24
 80006c6:	0fc6      	lsrs	r6, r0, #31
 80006c8:	2d00      	cmp	r5, #0
 80006ca:	d057      	beq.n	800077c <__aeabi_fmul+0xd0>
 80006cc:	2dff      	cmp	r5, #255	; 0xff
 80006ce:	d024      	beq.n	800071a <__aeabi_fmul+0x6e>
 80006d0:	2080      	movs	r0, #128	; 0x80
 80006d2:	00db      	lsls	r3, r3, #3
 80006d4:	04c0      	lsls	r0, r0, #19
 80006d6:	4318      	orrs	r0, r3
 80006d8:	2300      	movs	r3, #0
 80006da:	4681      	mov	r9, r0
 80006dc:	469a      	mov	sl, r3
 80006de:	469b      	mov	fp, r3
 80006e0:	3d7f      	subs	r5, #127	; 0x7f
 80006e2:	027c      	lsls	r4, r7, #9
 80006e4:	007a      	lsls	r2, r7, #1
 80006e6:	0ffb      	lsrs	r3, r7, #31
 80006e8:	0a64      	lsrs	r4, r4, #9
 80006ea:	0e12      	lsrs	r2, r2, #24
 80006ec:	4698      	mov	r8, r3
 80006ee:	d023      	beq.n	8000738 <__aeabi_fmul+0x8c>
 80006f0:	2aff      	cmp	r2, #255	; 0xff
 80006f2:	d04b      	beq.n	800078c <__aeabi_fmul+0xe0>
 80006f4:	00e3      	lsls	r3, r4, #3
 80006f6:	2480      	movs	r4, #128	; 0x80
 80006f8:	2000      	movs	r0, #0
 80006fa:	04e4      	lsls	r4, r4, #19
 80006fc:	3a7f      	subs	r2, #127	; 0x7f
 80006fe:	431c      	orrs	r4, r3
 8000700:	18ad      	adds	r5, r5, r2
 8000702:	1c6b      	adds	r3, r5, #1
 8000704:	4647      	mov	r7, r8
 8000706:	9301      	str	r3, [sp, #4]
 8000708:	4653      	mov	r3, sl
 800070a:	4077      	eors	r7, r6
 800070c:	003a      	movs	r2, r7
 800070e:	2b0f      	cmp	r3, #15
 8000710:	d848      	bhi.n	80007a4 <__aeabi_fmul+0xf8>
 8000712:	497d      	ldr	r1, [pc, #500]	; (8000908 <__aeabi_fmul+0x25c>)
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	58cb      	ldr	r3, [r1, r3]
 8000718:	469f      	mov	pc, r3
 800071a:	2b00      	cmp	r3, #0
 800071c:	d000      	beq.n	8000720 <__aeabi_fmul+0x74>
 800071e:	e085      	b.n	800082c <__aeabi_fmul+0x180>
 8000720:	3308      	adds	r3, #8
 8000722:	469a      	mov	sl, r3
 8000724:	3b06      	subs	r3, #6
 8000726:	469b      	mov	fp, r3
 8000728:	027c      	lsls	r4, r7, #9
 800072a:	007a      	lsls	r2, r7, #1
 800072c:	0ffb      	lsrs	r3, r7, #31
 800072e:	25ff      	movs	r5, #255	; 0xff
 8000730:	0a64      	lsrs	r4, r4, #9
 8000732:	0e12      	lsrs	r2, r2, #24
 8000734:	4698      	mov	r8, r3
 8000736:	d1db      	bne.n	80006f0 <__aeabi_fmul+0x44>
 8000738:	2c00      	cmp	r4, #0
 800073a:	d000      	beq.n	800073e <__aeabi_fmul+0x92>
 800073c:	e090      	b.n	8000860 <__aeabi_fmul+0x1b4>
 800073e:	4652      	mov	r2, sl
 8000740:	2301      	movs	r3, #1
 8000742:	431a      	orrs	r2, r3
 8000744:	4692      	mov	sl, r2
 8000746:	2001      	movs	r0, #1
 8000748:	e7db      	b.n	8000702 <__aeabi_fmul+0x56>
 800074a:	464c      	mov	r4, r9
 800074c:	4658      	mov	r0, fp
 800074e:	0017      	movs	r7, r2
 8000750:	2802      	cmp	r0, #2
 8000752:	d024      	beq.n	800079e <__aeabi_fmul+0xf2>
 8000754:	2803      	cmp	r0, #3
 8000756:	d100      	bne.n	800075a <__aeabi_fmul+0xae>
 8000758:	e0cf      	b.n	80008fa <__aeabi_fmul+0x24e>
 800075a:	2200      	movs	r2, #0
 800075c:	2300      	movs	r3, #0
 800075e:	2801      	cmp	r0, #1
 8000760:	d14d      	bne.n	80007fe <__aeabi_fmul+0x152>
 8000762:	0258      	lsls	r0, r3, #9
 8000764:	05d2      	lsls	r2, r2, #23
 8000766:	0a40      	lsrs	r0, r0, #9
 8000768:	07ff      	lsls	r7, r7, #31
 800076a:	4310      	orrs	r0, r2
 800076c:	4338      	orrs	r0, r7
 800076e:	b003      	add	sp, #12
 8000770:	bc3c      	pop	{r2, r3, r4, r5}
 8000772:	4690      	mov	r8, r2
 8000774:	4699      	mov	r9, r3
 8000776:	46a2      	mov	sl, r4
 8000778:	46ab      	mov	fp, r5
 800077a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800077c:	2b00      	cmp	r3, #0
 800077e:	d15b      	bne.n	8000838 <__aeabi_fmul+0x18c>
 8000780:	2304      	movs	r3, #4
 8000782:	469a      	mov	sl, r3
 8000784:	3b03      	subs	r3, #3
 8000786:	2500      	movs	r5, #0
 8000788:	469b      	mov	fp, r3
 800078a:	e7aa      	b.n	80006e2 <__aeabi_fmul+0x36>
 800078c:	35ff      	adds	r5, #255	; 0xff
 800078e:	2c00      	cmp	r4, #0
 8000790:	d160      	bne.n	8000854 <__aeabi_fmul+0x1a8>
 8000792:	4652      	mov	r2, sl
 8000794:	2302      	movs	r3, #2
 8000796:	431a      	orrs	r2, r3
 8000798:	4692      	mov	sl, r2
 800079a:	2002      	movs	r0, #2
 800079c:	e7b1      	b.n	8000702 <__aeabi_fmul+0x56>
 800079e:	22ff      	movs	r2, #255	; 0xff
 80007a0:	2300      	movs	r3, #0
 80007a2:	e7de      	b.n	8000762 <__aeabi_fmul+0xb6>
 80007a4:	464b      	mov	r3, r9
 80007a6:	0c1b      	lsrs	r3, r3, #16
 80007a8:	469c      	mov	ip, r3
 80007aa:	464b      	mov	r3, r9
 80007ac:	0426      	lsls	r6, r4, #16
 80007ae:	0c36      	lsrs	r6, r6, #16
 80007b0:	0418      	lsls	r0, r3, #16
 80007b2:	4661      	mov	r1, ip
 80007b4:	0033      	movs	r3, r6
 80007b6:	0c22      	lsrs	r2, r4, #16
 80007b8:	4664      	mov	r4, ip
 80007ba:	0c00      	lsrs	r0, r0, #16
 80007bc:	4343      	muls	r3, r0
 80007be:	434e      	muls	r6, r1
 80007c0:	4350      	muls	r0, r2
 80007c2:	4354      	muls	r4, r2
 80007c4:	1980      	adds	r0, r0, r6
 80007c6:	0c1a      	lsrs	r2, r3, #16
 80007c8:	1812      	adds	r2, r2, r0
 80007ca:	4296      	cmp	r6, r2
 80007cc:	d903      	bls.n	80007d6 <__aeabi_fmul+0x12a>
 80007ce:	2180      	movs	r1, #128	; 0x80
 80007d0:	0249      	lsls	r1, r1, #9
 80007d2:	468c      	mov	ip, r1
 80007d4:	4464      	add	r4, ip
 80007d6:	041b      	lsls	r3, r3, #16
 80007d8:	0c1b      	lsrs	r3, r3, #16
 80007da:	0410      	lsls	r0, r2, #16
 80007dc:	18c0      	adds	r0, r0, r3
 80007de:	0183      	lsls	r3, r0, #6
 80007e0:	1e5e      	subs	r6, r3, #1
 80007e2:	41b3      	sbcs	r3, r6
 80007e4:	0e80      	lsrs	r0, r0, #26
 80007e6:	4318      	orrs	r0, r3
 80007e8:	0c13      	lsrs	r3, r2, #16
 80007ea:	191b      	adds	r3, r3, r4
 80007ec:	019b      	lsls	r3, r3, #6
 80007ee:	4303      	orrs	r3, r0
 80007f0:	001c      	movs	r4, r3
 80007f2:	0123      	lsls	r3, r4, #4
 80007f4:	d579      	bpl.n	80008ea <__aeabi_fmul+0x23e>
 80007f6:	2301      	movs	r3, #1
 80007f8:	0862      	lsrs	r2, r4, #1
 80007fa:	401c      	ands	r4, r3
 80007fc:	4314      	orrs	r4, r2
 80007fe:	9a01      	ldr	r2, [sp, #4]
 8000800:	327f      	adds	r2, #127	; 0x7f
 8000802:	2a00      	cmp	r2, #0
 8000804:	dd4d      	ble.n	80008a2 <__aeabi_fmul+0x1f6>
 8000806:	0763      	lsls	r3, r4, #29
 8000808:	d004      	beq.n	8000814 <__aeabi_fmul+0x168>
 800080a:	230f      	movs	r3, #15
 800080c:	4023      	ands	r3, r4
 800080e:	2b04      	cmp	r3, #4
 8000810:	d000      	beq.n	8000814 <__aeabi_fmul+0x168>
 8000812:	3404      	adds	r4, #4
 8000814:	0123      	lsls	r3, r4, #4
 8000816:	d503      	bpl.n	8000820 <__aeabi_fmul+0x174>
 8000818:	4b3c      	ldr	r3, [pc, #240]	; (800090c <__aeabi_fmul+0x260>)
 800081a:	9a01      	ldr	r2, [sp, #4]
 800081c:	401c      	ands	r4, r3
 800081e:	3280      	adds	r2, #128	; 0x80
 8000820:	2afe      	cmp	r2, #254	; 0xfe
 8000822:	dcbc      	bgt.n	800079e <__aeabi_fmul+0xf2>
 8000824:	01a3      	lsls	r3, r4, #6
 8000826:	0a5b      	lsrs	r3, r3, #9
 8000828:	b2d2      	uxtb	r2, r2
 800082a:	e79a      	b.n	8000762 <__aeabi_fmul+0xb6>
 800082c:	230c      	movs	r3, #12
 800082e:	469a      	mov	sl, r3
 8000830:	3b09      	subs	r3, #9
 8000832:	25ff      	movs	r5, #255	; 0xff
 8000834:	469b      	mov	fp, r3
 8000836:	e754      	b.n	80006e2 <__aeabi_fmul+0x36>
 8000838:	0018      	movs	r0, r3
 800083a:	f001 fc31 	bl	80020a0 <__clzsi2>
 800083e:	464a      	mov	r2, r9
 8000840:	1f43      	subs	r3, r0, #5
 8000842:	2576      	movs	r5, #118	; 0x76
 8000844:	409a      	lsls	r2, r3
 8000846:	2300      	movs	r3, #0
 8000848:	426d      	negs	r5, r5
 800084a:	4691      	mov	r9, r2
 800084c:	1a2d      	subs	r5, r5, r0
 800084e:	469a      	mov	sl, r3
 8000850:	469b      	mov	fp, r3
 8000852:	e746      	b.n	80006e2 <__aeabi_fmul+0x36>
 8000854:	4652      	mov	r2, sl
 8000856:	2303      	movs	r3, #3
 8000858:	431a      	orrs	r2, r3
 800085a:	4692      	mov	sl, r2
 800085c:	2003      	movs	r0, #3
 800085e:	e750      	b.n	8000702 <__aeabi_fmul+0x56>
 8000860:	0020      	movs	r0, r4
 8000862:	f001 fc1d 	bl	80020a0 <__clzsi2>
 8000866:	1f43      	subs	r3, r0, #5
 8000868:	1a2d      	subs	r5, r5, r0
 800086a:	409c      	lsls	r4, r3
 800086c:	3d76      	subs	r5, #118	; 0x76
 800086e:	2000      	movs	r0, #0
 8000870:	e747      	b.n	8000702 <__aeabi_fmul+0x56>
 8000872:	2380      	movs	r3, #128	; 0x80
 8000874:	2700      	movs	r7, #0
 8000876:	03db      	lsls	r3, r3, #15
 8000878:	22ff      	movs	r2, #255	; 0xff
 800087a:	e772      	b.n	8000762 <__aeabi_fmul+0xb6>
 800087c:	4642      	mov	r2, r8
 800087e:	e766      	b.n	800074e <__aeabi_fmul+0xa2>
 8000880:	464c      	mov	r4, r9
 8000882:	0032      	movs	r2, r6
 8000884:	4658      	mov	r0, fp
 8000886:	e762      	b.n	800074e <__aeabi_fmul+0xa2>
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	464a      	mov	r2, r9
 800088c:	03db      	lsls	r3, r3, #15
 800088e:	421a      	tst	r2, r3
 8000890:	d022      	beq.n	80008d8 <__aeabi_fmul+0x22c>
 8000892:	421c      	tst	r4, r3
 8000894:	d120      	bne.n	80008d8 <__aeabi_fmul+0x22c>
 8000896:	4323      	orrs	r3, r4
 8000898:	025b      	lsls	r3, r3, #9
 800089a:	0a5b      	lsrs	r3, r3, #9
 800089c:	4647      	mov	r7, r8
 800089e:	22ff      	movs	r2, #255	; 0xff
 80008a0:	e75f      	b.n	8000762 <__aeabi_fmul+0xb6>
 80008a2:	2301      	movs	r3, #1
 80008a4:	1a9a      	subs	r2, r3, r2
 80008a6:	2a1b      	cmp	r2, #27
 80008a8:	dc21      	bgt.n	80008ee <__aeabi_fmul+0x242>
 80008aa:	0023      	movs	r3, r4
 80008ac:	9901      	ldr	r1, [sp, #4]
 80008ae:	40d3      	lsrs	r3, r2
 80008b0:	319e      	adds	r1, #158	; 0x9e
 80008b2:	408c      	lsls	r4, r1
 80008b4:	001a      	movs	r2, r3
 80008b6:	0023      	movs	r3, r4
 80008b8:	1e5c      	subs	r4, r3, #1
 80008ba:	41a3      	sbcs	r3, r4
 80008bc:	4313      	orrs	r3, r2
 80008be:	075a      	lsls	r2, r3, #29
 80008c0:	d004      	beq.n	80008cc <__aeabi_fmul+0x220>
 80008c2:	220f      	movs	r2, #15
 80008c4:	401a      	ands	r2, r3
 80008c6:	2a04      	cmp	r2, #4
 80008c8:	d000      	beq.n	80008cc <__aeabi_fmul+0x220>
 80008ca:	3304      	adds	r3, #4
 80008cc:	015a      	lsls	r2, r3, #5
 80008ce:	d411      	bmi.n	80008f4 <__aeabi_fmul+0x248>
 80008d0:	019b      	lsls	r3, r3, #6
 80008d2:	0a5b      	lsrs	r3, r3, #9
 80008d4:	2200      	movs	r2, #0
 80008d6:	e744      	b.n	8000762 <__aeabi_fmul+0xb6>
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	464a      	mov	r2, r9
 80008dc:	03db      	lsls	r3, r3, #15
 80008de:	4313      	orrs	r3, r2
 80008e0:	025b      	lsls	r3, r3, #9
 80008e2:	0a5b      	lsrs	r3, r3, #9
 80008e4:	0037      	movs	r7, r6
 80008e6:	22ff      	movs	r2, #255	; 0xff
 80008e8:	e73b      	b.n	8000762 <__aeabi_fmul+0xb6>
 80008ea:	9501      	str	r5, [sp, #4]
 80008ec:	e787      	b.n	80007fe <__aeabi_fmul+0x152>
 80008ee:	2200      	movs	r2, #0
 80008f0:	2300      	movs	r3, #0
 80008f2:	e736      	b.n	8000762 <__aeabi_fmul+0xb6>
 80008f4:	2201      	movs	r2, #1
 80008f6:	2300      	movs	r3, #0
 80008f8:	e733      	b.n	8000762 <__aeabi_fmul+0xb6>
 80008fa:	2380      	movs	r3, #128	; 0x80
 80008fc:	03db      	lsls	r3, r3, #15
 80008fe:	4323      	orrs	r3, r4
 8000900:	025b      	lsls	r3, r3, #9
 8000902:	0a5b      	lsrs	r3, r3, #9
 8000904:	22ff      	movs	r2, #255	; 0xff
 8000906:	e72c      	b.n	8000762 <__aeabi_fmul+0xb6>
 8000908:	08005a24 	.word	0x08005a24
 800090c:	f7ffffff 	.word	0xf7ffffff

08000910 <__aeabi_fsub>:
 8000910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000912:	4647      	mov	r7, r8
 8000914:	46ce      	mov	lr, r9
 8000916:	0044      	lsls	r4, r0, #1
 8000918:	0fc2      	lsrs	r2, r0, #31
 800091a:	b580      	push	{r7, lr}
 800091c:	0247      	lsls	r7, r0, #9
 800091e:	0248      	lsls	r0, r1, #9
 8000920:	0a40      	lsrs	r0, r0, #9
 8000922:	4684      	mov	ip, r0
 8000924:	4666      	mov	r6, ip
 8000926:	0048      	lsls	r0, r1, #1
 8000928:	0a7f      	lsrs	r7, r7, #9
 800092a:	0e24      	lsrs	r4, r4, #24
 800092c:	00f6      	lsls	r6, r6, #3
 800092e:	0025      	movs	r5, r4
 8000930:	4690      	mov	r8, r2
 8000932:	00fb      	lsls	r3, r7, #3
 8000934:	0e00      	lsrs	r0, r0, #24
 8000936:	0fc9      	lsrs	r1, r1, #31
 8000938:	46b1      	mov	r9, r6
 800093a:	28ff      	cmp	r0, #255	; 0xff
 800093c:	d100      	bne.n	8000940 <__aeabi_fsub+0x30>
 800093e:	e085      	b.n	8000a4c <__aeabi_fsub+0x13c>
 8000940:	2601      	movs	r6, #1
 8000942:	4071      	eors	r1, r6
 8000944:	1a26      	subs	r6, r4, r0
 8000946:	4291      	cmp	r1, r2
 8000948:	d057      	beq.n	80009fa <__aeabi_fsub+0xea>
 800094a:	2e00      	cmp	r6, #0
 800094c:	dd43      	ble.n	80009d6 <__aeabi_fsub+0xc6>
 800094e:	2800      	cmp	r0, #0
 8000950:	d000      	beq.n	8000954 <__aeabi_fsub+0x44>
 8000952:	e07f      	b.n	8000a54 <__aeabi_fsub+0x144>
 8000954:	4649      	mov	r1, r9
 8000956:	2900      	cmp	r1, #0
 8000958:	d100      	bne.n	800095c <__aeabi_fsub+0x4c>
 800095a:	e0aa      	b.n	8000ab2 <__aeabi_fsub+0x1a2>
 800095c:	3e01      	subs	r6, #1
 800095e:	2e00      	cmp	r6, #0
 8000960:	d000      	beq.n	8000964 <__aeabi_fsub+0x54>
 8000962:	e0f7      	b.n	8000b54 <__aeabi_fsub+0x244>
 8000964:	1a5b      	subs	r3, r3, r1
 8000966:	015a      	lsls	r2, r3, #5
 8000968:	d400      	bmi.n	800096c <__aeabi_fsub+0x5c>
 800096a:	e08b      	b.n	8000a84 <__aeabi_fsub+0x174>
 800096c:	019b      	lsls	r3, r3, #6
 800096e:	099c      	lsrs	r4, r3, #6
 8000970:	0020      	movs	r0, r4
 8000972:	f001 fb95 	bl	80020a0 <__clzsi2>
 8000976:	3805      	subs	r0, #5
 8000978:	4084      	lsls	r4, r0
 800097a:	4285      	cmp	r5, r0
 800097c:	dd00      	ble.n	8000980 <__aeabi_fsub+0x70>
 800097e:	e0d3      	b.n	8000b28 <__aeabi_fsub+0x218>
 8000980:	1b45      	subs	r5, r0, r5
 8000982:	0023      	movs	r3, r4
 8000984:	2020      	movs	r0, #32
 8000986:	3501      	adds	r5, #1
 8000988:	40eb      	lsrs	r3, r5
 800098a:	1b45      	subs	r5, r0, r5
 800098c:	40ac      	lsls	r4, r5
 800098e:	1e62      	subs	r2, r4, #1
 8000990:	4194      	sbcs	r4, r2
 8000992:	4323      	orrs	r3, r4
 8000994:	2407      	movs	r4, #7
 8000996:	2500      	movs	r5, #0
 8000998:	401c      	ands	r4, r3
 800099a:	2201      	movs	r2, #1
 800099c:	4641      	mov	r1, r8
 800099e:	400a      	ands	r2, r1
 80009a0:	2c00      	cmp	r4, #0
 80009a2:	d004      	beq.n	80009ae <__aeabi_fsub+0x9e>
 80009a4:	210f      	movs	r1, #15
 80009a6:	4019      	ands	r1, r3
 80009a8:	2904      	cmp	r1, #4
 80009aa:	d000      	beq.n	80009ae <__aeabi_fsub+0x9e>
 80009ac:	3304      	adds	r3, #4
 80009ae:	0159      	lsls	r1, r3, #5
 80009b0:	d400      	bmi.n	80009b4 <__aeabi_fsub+0xa4>
 80009b2:	e080      	b.n	8000ab6 <__aeabi_fsub+0x1a6>
 80009b4:	3501      	adds	r5, #1
 80009b6:	b2ec      	uxtb	r4, r5
 80009b8:	2dff      	cmp	r5, #255	; 0xff
 80009ba:	d000      	beq.n	80009be <__aeabi_fsub+0xae>
 80009bc:	e0a3      	b.n	8000b06 <__aeabi_fsub+0x1f6>
 80009be:	24ff      	movs	r4, #255	; 0xff
 80009c0:	2300      	movs	r3, #0
 80009c2:	025b      	lsls	r3, r3, #9
 80009c4:	05e4      	lsls	r4, r4, #23
 80009c6:	0a58      	lsrs	r0, r3, #9
 80009c8:	07d2      	lsls	r2, r2, #31
 80009ca:	4320      	orrs	r0, r4
 80009cc:	4310      	orrs	r0, r2
 80009ce:	bc0c      	pop	{r2, r3}
 80009d0:	4690      	mov	r8, r2
 80009d2:	4699      	mov	r9, r3
 80009d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009d6:	2e00      	cmp	r6, #0
 80009d8:	d174      	bne.n	8000ac4 <__aeabi_fsub+0x1b4>
 80009da:	1c60      	adds	r0, r4, #1
 80009dc:	b2c0      	uxtb	r0, r0
 80009de:	2801      	cmp	r0, #1
 80009e0:	dc00      	bgt.n	80009e4 <__aeabi_fsub+0xd4>
 80009e2:	e0a7      	b.n	8000b34 <__aeabi_fsub+0x224>
 80009e4:	464a      	mov	r2, r9
 80009e6:	1a9c      	subs	r4, r3, r2
 80009e8:	0162      	lsls	r2, r4, #5
 80009ea:	d500      	bpl.n	80009ee <__aeabi_fsub+0xde>
 80009ec:	e0b6      	b.n	8000b5c <__aeabi_fsub+0x24c>
 80009ee:	2c00      	cmp	r4, #0
 80009f0:	d1be      	bne.n	8000970 <__aeabi_fsub+0x60>
 80009f2:	2200      	movs	r2, #0
 80009f4:	2400      	movs	r4, #0
 80009f6:	2300      	movs	r3, #0
 80009f8:	e7e3      	b.n	80009c2 <__aeabi_fsub+0xb2>
 80009fa:	2e00      	cmp	r6, #0
 80009fc:	dc00      	bgt.n	8000a00 <__aeabi_fsub+0xf0>
 80009fe:	e085      	b.n	8000b0c <__aeabi_fsub+0x1fc>
 8000a00:	2800      	cmp	r0, #0
 8000a02:	d046      	beq.n	8000a92 <__aeabi_fsub+0x182>
 8000a04:	2cff      	cmp	r4, #255	; 0xff
 8000a06:	d049      	beq.n	8000a9c <__aeabi_fsub+0x18c>
 8000a08:	2280      	movs	r2, #128	; 0x80
 8000a0a:	4648      	mov	r0, r9
 8000a0c:	04d2      	lsls	r2, r2, #19
 8000a0e:	4310      	orrs	r0, r2
 8000a10:	4681      	mov	r9, r0
 8000a12:	2201      	movs	r2, #1
 8000a14:	2e1b      	cmp	r6, #27
 8000a16:	dc09      	bgt.n	8000a2c <__aeabi_fsub+0x11c>
 8000a18:	2020      	movs	r0, #32
 8000a1a:	464c      	mov	r4, r9
 8000a1c:	1b80      	subs	r0, r0, r6
 8000a1e:	4084      	lsls	r4, r0
 8000a20:	464a      	mov	r2, r9
 8000a22:	0020      	movs	r0, r4
 8000a24:	40f2      	lsrs	r2, r6
 8000a26:	1e44      	subs	r4, r0, #1
 8000a28:	41a0      	sbcs	r0, r4
 8000a2a:	4302      	orrs	r2, r0
 8000a2c:	189b      	adds	r3, r3, r2
 8000a2e:	015a      	lsls	r2, r3, #5
 8000a30:	d528      	bpl.n	8000a84 <__aeabi_fsub+0x174>
 8000a32:	3501      	adds	r5, #1
 8000a34:	2dff      	cmp	r5, #255	; 0xff
 8000a36:	d100      	bne.n	8000a3a <__aeabi_fsub+0x12a>
 8000a38:	e0a8      	b.n	8000b8c <__aeabi_fsub+0x27c>
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	2407      	movs	r4, #7
 8000a3e:	4994      	ldr	r1, [pc, #592]	; (8000c90 <__aeabi_fsub+0x380>)
 8000a40:	401a      	ands	r2, r3
 8000a42:	085b      	lsrs	r3, r3, #1
 8000a44:	400b      	ands	r3, r1
 8000a46:	4313      	orrs	r3, r2
 8000a48:	401c      	ands	r4, r3
 8000a4a:	e7a6      	b.n	800099a <__aeabi_fsub+0x8a>
 8000a4c:	2e00      	cmp	r6, #0
 8000a4e:	d000      	beq.n	8000a52 <__aeabi_fsub+0x142>
 8000a50:	e778      	b.n	8000944 <__aeabi_fsub+0x34>
 8000a52:	e775      	b.n	8000940 <__aeabi_fsub+0x30>
 8000a54:	2cff      	cmp	r4, #255	; 0xff
 8000a56:	d054      	beq.n	8000b02 <__aeabi_fsub+0x1f2>
 8000a58:	2280      	movs	r2, #128	; 0x80
 8000a5a:	4649      	mov	r1, r9
 8000a5c:	04d2      	lsls	r2, r2, #19
 8000a5e:	4311      	orrs	r1, r2
 8000a60:	4689      	mov	r9, r1
 8000a62:	2201      	movs	r2, #1
 8000a64:	2e1b      	cmp	r6, #27
 8000a66:	dc09      	bgt.n	8000a7c <__aeabi_fsub+0x16c>
 8000a68:	2120      	movs	r1, #32
 8000a6a:	4648      	mov	r0, r9
 8000a6c:	1b89      	subs	r1, r1, r6
 8000a6e:	4088      	lsls	r0, r1
 8000a70:	464a      	mov	r2, r9
 8000a72:	0001      	movs	r1, r0
 8000a74:	40f2      	lsrs	r2, r6
 8000a76:	1e48      	subs	r0, r1, #1
 8000a78:	4181      	sbcs	r1, r0
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	1a9b      	subs	r3, r3, r2
 8000a7e:	015a      	lsls	r2, r3, #5
 8000a80:	d500      	bpl.n	8000a84 <__aeabi_fsub+0x174>
 8000a82:	e773      	b.n	800096c <__aeabi_fsub+0x5c>
 8000a84:	2201      	movs	r2, #1
 8000a86:	4641      	mov	r1, r8
 8000a88:	400a      	ands	r2, r1
 8000a8a:	0759      	lsls	r1, r3, #29
 8000a8c:	d000      	beq.n	8000a90 <__aeabi_fsub+0x180>
 8000a8e:	e789      	b.n	80009a4 <__aeabi_fsub+0x94>
 8000a90:	e011      	b.n	8000ab6 <__aeabi_fsub+0x1a6>
 8000a92:	4648      	mov	r0, r9
 8000a94:	2800      	cmp	r0, #0
 8000a96:	d158      	bne.n	8000b4a <__aeabi_fsub+0x23a>
 8000a98:	2cff      	cmp	r4, #255	; 0xff
 8000a9a:	d10c      	bne.n	8000ab6 <__aeabi_fsub+0x1a6>
 8000a9c:	08db      	lsrs	r3, r3, #3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d100      	bne.n	8000aa4 <__aeabi_fsub+0x194>
 8000aa2:	e78c      	b.n	80009be <__aeabi_fsub+0xae>
 8000aa4:	2080      	movs	r0, #128	; 0x80
 8000aa6:	03c0      	lsls	r0, r0, #15
 8000aa8:	4303      	orrs	r3, r0
 8000aaa:	025b      	lsls	r3, r3, #9
 8000aac:	0a5b      	lsrs	r3, r3, #9
 8000aae:	24ff      	movs	r4, #255	; 0xff
 8000ab0:	e787      	b.n	80009c2 <__aeabi_fsub+0xb2>
 8000ab2:	2cff      	cmp	r4, #255	; 0xff
 8000ab4:	d025      	beq.n	8000b02 <__aeabi_fsub+0x1f2>
 8000ab6:	08db      	lsrs	r3, r3, #3
 8000ab8:	2dff      	cmp	r5, #255	; 0xff
 8000aba:	d0f0      	beq.n	8000a9e <__aeabi_fsub+0x18e>
 8000abc:	025b      	lsls	r3, r3, #9
 8000abe:	0a5b      	lsrs	r3, r3, #9
 8000ac0:	b2ec      	uxtb	r4, r5
 8000ac2:	e77e      	b.n	80009c2 <__aeabi_fsub+0xb2>
 8000ac4:	2c00      	cmp	r4, #0
 8000ac6:	d04d      	beq.n	8000b64 <__aeabi_fsub+0x254>
 8000ac8:	28ff      	cmp	r0, #255	; 0xff
 8000aca:	d018      	beq.n	8000afe <__aeabi_fsub+0x1ee>
 8000acc:	2480      	movs	r4, #128	; 0x80
 8000ace:	04e4      	lsls	r4, r4, #19
 8000ad0:	4272      	negs	r2, r6
 8000ad2:	4323      	orrs	r3, r4
 8000ad4:	2a1b      	cmp	r2, #27
 8000ad6:	dd00      	ble.n	8000ada <__aeabi_fsub+0x1ca>
 8000ad8:	e0c4      	b.n	8000c64 <__aeabi_fsub+0x354>
 8000ada:	001c      	movs	r4, r3
 8000adc:	2520      	movs	r5, #32
 8000ade:	40d4      	lsrs	r4, r2
 8000ae0:	1aaa      	subs	r2, r5, r2
 8000ae2:	4093      	lsls	r3, r2
 8000ae4:	1e5a      	subs	r2, r3, #1
 8000ae6:	4193      	sbcs	r3, r2
 8000ae8:	4323      	orrs	r3, r4
 8000aea:	464a      	mov	r2, r9
 8000aec:	0005      	movs	r5, r0
 8000aee:	1ad3      	subs	r3, r2, r3
 8000af0:	4688      	mov	r8, r1
 8000af2:	e738      	b.n	8000966 <__aeabi_fsub+0x56>
 8000af4:	1c72      	adds	r2, r6, #1
 8000af6:	d0f8      	beq.n	8000aea <__aeabi_fsub+0x1da>
 8000af8:	43f2      	mvns	r2, r6
 8000afa:	28ff      	cmp	r0, #255	; 0xff
 8000afc:	d1ea      	bne.n	8000ad4 <__aeabi_fsub+0x1c4>
 8000afe:	000a      	movs	r2, r1
 8000b00:	464b      	mov	r3, r9
 8000b02:	25ff      	movs	r5, #255	; 0xff
 8000b04:	e7d7      	b.n	8000ab6 <__aeabi_fsub+0x1a6>
 8000b06:	019b      	lsls	r3, r3, #6
 8000b08:	0a5b      	lsrs	r3, r3, #9
 8000b0a:	e75a      	b.n	80009c2 <__aeabi_fsub+0xb2>
 8000b0c:	2e00      	cmp	r6, #0
 8000b0e:	d141      	bne.n	8000b94 <__aeabi_fsub+0x284>
 8000b10:	1c65      	adds	r5, r4, #1
 8000b12:	b2e9      	uxtb	r1, r5
 8000b14:	2901      	cmp	r1, #1
 8000b16:	dd45      	ble.n	8000ba4 <__aeabi_fsub+0x294>
 8000b18:	2dff      	cmp	r5, #255	; 0xff
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_fsub+0x20e>
 8000b1c:	e74f      	b.n	80009be <__aeabi_fsub+0xae>
 8000b1e:	2407      	movs	r4, #7
 8000b20:	444b      	add	r3, r9
 8000b22:	085b      	lsrs	r3, r3, #1
 8000b24:	401c      	ands	r4, r3
 8000b26:	e738      	b.n	800099a <__aeabi_fsub+0x8a>
 8000b28:	2207      	movs	r2, #7
 8000b2a:	4b5a      	ldr	r3, [pc, #360]	; (8000c94 <__aeabi_fsub+0x384>)
 8000b2c:	1a2d      	subs	r5, r5, r0
 8000b2e:	4023      	ands	r3, r4
 8000b30:	4014      	ands	r4, r2
 8000b32:	e732      	b.n	800099a <__aeabi_fsub+0x8a>
 8000b34:	2c00      	cmp	r4, #0
 8000b36:	d11d      	bne.n	8000b74 <__aeabi_fsub+0x264>
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d17a      	bne.n	8000c32 <__aeabi_fsub+0x322>
 8000b3c:	464b      	mov	r3, r9
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d100      	bne.n	8000b44 <__aeabi_fsub+0x234>
 8000b42:	e091      	b.n	8000c68 <__aeabi_fsub+0x358>
 8000b44:	000a      	movs	r2, r1
 8000b46:	2500      	movs	r5, #0
 8000b48:	e7b5      	b.n	8000ab6 <__aeabi_fsub+0x1a6>
 8000b4a:	3e01      	subs	r6, #1
 8000b4c:	2e00      	cmp	r6, #0
 8000b4e:	d119      	bne.n	8000b84 <__aeabi_fsub+0x274>
 8000b50:	444b      	add	r3, r9
 8000b52:	e76c      	b.n	8000a2e <__aeabi_fsub+0x11e>
 8000b54:	2cff      	cmp	r4, #255	; 0xff
 8000b56:	d184      	bne.n	8000a62 <__aeabi_fsub+0x152>
 8000b58:	25ff      	movs	r5, #255	; 0xff
 8000b5a:	e7ac      	b.n	8000ab6 <__aeabi_fsub+0x1a6>
 8000b5c:	464a      	mov	r2, r9
 8000b5e:	4688      	mov	r8, r1
 8000b60:	1ad4      	subs	r4, r2, r3
 8000b62:	e705      	b.n	8000970 <__aeabi_fsub+0x60>
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d1c5      	bne.n	8000af4 <__aeabi_fsub+0x1e4>
 8000b68:	000a      	movs	r2, r1
 8000b6a:	28ff      	cmp	r0, #255	; 0xff
 8000b6c:	d0c8      	beq.n	8000b00 <__aeabi_fsub+0x1f0>
 8000b6e:	0005      	movs	r5, r0
 8000b70:	464b      	mov	r3, r9
 8000b72:	e7a0      	b.n	8000ab6 <__aeabi_fsub+0x1a6>
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d149      	bne.n	8000c0c <__aeabi_fsub+0x2fc>
 8000b78:	464b      	mov	r3, r9
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d077      	beq.n	8000c6e <__aeabi_fsub+0x35e>
 8000b7e:	000a      	movs	r2, r1
 8000b80:	25ff      	movs	r5, #255	; 0xff
 8000b82:	e798      	b.n	8000ab6 <__aeabi_fsub+0x1a6>
 8000b84:	2cff      	cmp	r4, #255	; 0xff
 8000b86:	d000      	beq.n	8000b8a <__aeabi_fsub+0x27a>
 8000b88:	e743      	b.n	8000a12 <__aeabi_fsub+0x102>
 8000b8a:	e787      	b.n	8000a9c <__aeabi_fsub+0x18c>
 8000b8c:	000a      	movs	r2, r1
 8000b8e:	24ff      	movs	r4, #255	; 0xff
 8000b90:	2300      	movs	r3, #0
 8000b92:	e716      	b.n	80009c2 <__aeabi_fsub+0xb2>
 8000b94:	2c00      	cmp	r4, #0
 8000b96:	d115      	bne.n	8000bc4 <__aeabi_fsub+0x2b4>
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d157      	bne.n	8000c4c <__aeabi_fsub+0x33c>
 8000b9c:	28ff      	cmp	r0, #255	; 0xff
 8000b9e:	d1e6      	bne.n	8000b6e <__aeabi_fsub+0x25e>
 8000ba0:	464b      	mov	r3, r9
 8000ba2:	e77b      	b.n	8000a9c <__aeabi_fsub+0x18c>
 8000ba4:	2c00      	cmp	r4, #0
 8000ba6:	d120      	bne.n	8000bea <__aeabi_fsub+0x2da>
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d057      	beq.n	8000c5c <__aeabi_fsub+0x34c>
 8000bac:	4649      	mov	r1, r9
 8000bae:	2900      	cmp	r1, #0
 8000bb0:	d053      	beq.n	8000c5a <__aeabi_fsub+0x34a>
 8000bb2:	444b      	add	r3, r9
 8000bb4:	015a      	lsls	r2, r3, #5
 8000bb6:	d568      	bpl.n	8000c8a <__aeabi_fsub+0x37a>
 8000bb8:	2407      	movs	r4, #7
 8000bba:	4a36      	ldr	r2, [pc, #216]	; (8000c94 <__aeabi_fsub+0x384>)
 8000bbc:	401c      	ands	r4, r3
 8000bbe:	2501      	movs	r5, #1
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	e6ea      	b.n	800099a <__aeabi_fsub+0x8a>
 8000bc4:	28ff      	cmp	r0, #255	; 0xff
 8000bc6:	d0eb      	beq.n	8000ba0 <__aeabi_fsub+0x290>
 8000bc8:	2280      	movs	r2, #128	; 0x80
 8000bca:	04d2      	lsls	r2, r2, #19
 8000bcc:	4276      	negs	r6, r6
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	2e1b      	cmp	r6, #27
 8000bd2:	dc53      	bgt.n	8000c7c <__aeabi_fsub+0x36c>
 8000bd4:	2520      	movs	r5, #32
 8000bd6:	1bad      	subs	r5, r5, r6
 8000bd8:	001a      	movs	r2, r3
 8000bda:	40ab      	lsls	r3, r5
 8000bdc:	40f2      	lsrs	r2, r6
 8000bde:	1e5c      	subs	r4, r3, #1
 8000be0:	41a3      	sbcs	r3, r4
 8000be2:	4313      	orrs	r3, r2
 8000be4:	444b      	add	r3, r9
 8000be6:	0005      	movs	r5, r0
 8000be8:	e721      	b.n	8000a2e <__aeabi_fsub+0x11e>
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d0d8      	beq.n	8000ba0 <__aeabi_fsub+0x290>
 8000bee:	4649      	mov	r1, r9
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	d100      	bne.n	8000bf6 <__aeabi_fsub+0x2e6>
 8000bf4:	e752      	b.n	8000a9c <__aeabi_fsub+0x18c>
 8000bf6:	2180      	movs	r1, #128	; 0x80
 8000bf8:	03c9      	lsls	r1, r1, #15
 8000bfa:	420f      	tst	r7, r1
 8000bfc:	d100      	bne.n	8000c00 <__aeabi_fsub+0x2f0>
 8000bfe:	e74d      	b.n	8000a9c <__aeabi_fsub+0x18c>
 8000c00:	4660      	mov	r0, ip
 8000c02:	4208      	tst	r0, r1
 8000c04:	d000      	beq.n	8000c08 <__aeabi_fsub+0x2f8>
 8000c06:	e749      	b.n	8000a9c <__aeabi_fsub+0x18c>
 8000c08:	464b      	mov	r3, r9
 8000c0a:	e747      	b.n	8000a9c <__aeabi_fsub+0x18c>
 8000c0c:	4648      	mov	r0, r9
 8000c0e:	25ff      	movs	r5, #255	; 0xff
 8000c10:	2800      	cmp	r0, #0
 8000c12:	d100      	bne.n	8000c16 <__aeabi_fsub+0x306>
 8000c14:	e74f      	b.n	8000ab6 <__aeabi_fsub+0x1a6>
 8000c16:	2280      	movs	r2, #128	; 0x80
 8000c18:	03d2      	lsls	r2, r2, #15
 8000c1a:	4217      	tst	r7, r2
 8000c1c:	d004      	beq.n	8000c28 <__aeabi_fsub+0x318>
 8000c1e:	4660      	mov	r0, ip
 8000c20:	4210      	tst	r0, r2
 8000c22:	d101      	bne.n	8000c28 <__aeabi_fsub+0x318>
 8000c24:	464b      	mov	r3, r9
 8000c26:	4688      	mov	r8, r1
 8000c28:	2201      	movs	r2, #1
 8000c2a:	4641      	mov	r1, r8
 8000c2c:	25ff      	movs	r5, #255	; 0xff
 8000c2e:	400a      	ands	r2, r1
 8000c30:	e741      	b.n	8000ab6 <__aeabi_fsub+0x1a6>
 8000c32:	4648      	mov	r0, r9
 8000c34:	2800      	cmp	r0, #0
 8000c36:	d01f      	beq.n	8000c78 <__aeabi_fsub+0x368>
 8000c38:	1a1a      	subs	r2, r3, r0
 8000c3a:	0150      	lsls	r0, r2, #5
 8000c3c:	d520      	bpl.n	8000c80 <__aeabi_fsub+0x370>
 8000c3e:	464a      	mov	r2, r9
 8000c40:	2407      	movs	r4, #7
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	401c      	ands	r4, r3
 8000c46:	4688      	mov	r8, r1
 8000c48:	2500      	movs	r5, #0
 8000c4a:	e6a6      	b.n	800099a <__aeabi_fsub+0x8a>
 8000c4c:	1c74      	adds	r4, r6, #1
 8000c4e:	d0c9      	beq.n	8000be4 <__aeabi_fsub+0x2d4>
 8000c50:	43f6      	mvns	r6, r6
 8000c52:	28ff      	cmp	r0, #255	; 0xff
 8000c54:	d1bc      	bne.n	8000bd0 <__aeabi_fsub+0x2c0>
 8000c56:	464b      	mov	r3, r9
 8000c58:	e720      	b.n	8000a9c <__aeabi_fsub+0x18c>
 8000c5a:	4699      	mov	r9, r3
 8000c5c:	464b      	mov	r3, r9
 8000c5e:	2500      	movs	r5, #0
 8000c60:	08db      	lsrs	r3, r3, #3
 8000c62:	e72b      	b.n	8000abc <__aeabi_fsub+0x1ac>
 8000c64:	2301      	movs	r3, #1
 8000c66:	e740      	b.n	8000aea <__aeabi_fsub+0x1da>
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e6a9      	b.n	80009c2 <__aeabi_fsub+0xb2>
 8000c6e:	2380      	movs	r3, #128	; 0x80
 8000c70:	2200      	movs	r2, #0
 8000c72:	03db      	lsls	r3, r3, #15
 8000c74:	24ff      	movs	r4, #255	; 0xff
 8000c76:	e6a4      	b.n	80009c2 <__aeabi_fsub+0xb2>
 8000c78:	2500      	movs	r5, #0
 8000c7a:	e71c      	b.n	8000ab6 <__aeabi_fsub+0x1a6>
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e7b1      	b.n	8000be4 <__aeabi_fsub+0x2d4>
 8000c80:	2a00      	cmp	r2, #0
 8000c82:	d0f1      	beq.n	8000c68 <__aeabi_fsub+0x358>
 8000c84:	0013      	movs	r3, r2
 8000c86:	2500      	movs	r5, #0
 8000c88:	e6fc      	b.n	8000a84 <__aeabi_fsub+0x174>
 8000c8a:	2500      	movs	r5, #0
 8000c8c:	e6fa      	b.n	8000a84 <__aeabi_fsub+0x174>
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	7dffffff 	.word	0x7dffffff
 8000c94:	fbffffff 	.word	0xfbffffff

08000c98 <__aeabi_f2iz>:
 8000c98:	0241      	lsls	r1, r0, #9
 8000c9a:	0042      	lsls	r2, r0, #1
 8000c9c:	0fc3      	lsrs	r3, r0, #31
 8000c9e:	0a49      	lsrs	r1, r1, #9
 8000ca0:	0e12      	lsrs	r2, r2, #24
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	2a7e      	cmp	r2, #126	; 0x7e
 8000ca6:	d90d      	bls.n	8000cc4 <__aeabi_f2iz+0x2c>
 8000ca8:	2a9d      	cmp	r2, #157	; 0x9d
 8000caa:	d80c      	bhi.n	8000cc6 <__aeabi_f2iz+0x2e>
 8000cac:	2080      	movs	r0, #128	; 0x80
 8000cae:	0400      	lsls	r0, r0, #16
 8000cb0:	4301      	orrs	r1, r0
 8000cb2:	2a95      	cmp	r2, #149	; 0x95
 8000cb4:	dc0a      	bgt.n	8000ccc <__aeabi_f2iz+0x34>
 8000cb6:	2096      	movs	r0, #150	; 0x96
 8000cb8:	1a82      	subs	r2, r0, r2
 8000cba:	40d1      	lsrs	r1, r2
 8000cbc:	4248      	negs	r0, r1
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d100      	bne.n	8000cc4 <__aeabi_f2iz+0x2c>
 8000cc2:	0008      	movs	r0, r1
 8000cc4:	4770      	bx	lr
 8000cc6:	4a03      	ldr	r2, [pc, #12]	; (8000cd4 <__aeabi_f2iz+0x3c>)
 8000cc8:	1898      	adds	r0, r3, r2
 8000cca:	e7fb      	b.n	8000cc4 <__aeabi_f2iz+0x2c>
 8000ccc:	3a96      	subs	r2, #150	; 0x96
 8000cce:	4091      	lsls	r1, r2
 8000cd0:	e7f4      	b.n	8000cbc <__aeabi_f2iz+0x24>
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	7fffffff 	.word	0x7fffffff

08000cd8 <__aeabi_ui2f>:
 8000cd8:	b570      	push	{r4, r5, r6, lr}
 8000cda:	1e04      	subs	r4, r0, #0
 8000cdc:	d034      	beq.n	8000d48 <__aeabi_ui2f+0x70>
 8000cde:	f001 f9df 	bl	80020a0 <__clzsi2>
 8000ce2:	229e      	movs	r2, #158	; 0x9e
 8000ce4:	1a12      	subs	r2, r2, r0
 8000ce6:	2a96      	cmp	r2, #150	; 0x96
 8000ce8:	dc07      	bgt.n	8000cfa <__aeabi_ui2f+0x22>
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	2808      	cmp	r0, #8
 8000cee:	dd2e      	ble.n	8000d4e <__aeabi_ui2f+0x76>
 8000cf0:	3808      	subs	r0, #8
 8000cf2:	4084      	lsls	r4, r0
 8000cf4:	0260      	lsls	r0, r4, #9
 8000cf6:	0a40      	lsrs	r0, r0, #9
 8000cf8:	e021      	b.n	8000d3e <__aeabi_ui2f+0x66>
 8000cfa:	2a99      	cmp	r2, #153	; 0x99
 8000cfc:	dd09      	ble.n	8000d12 <__aeabi_ui2f+0x3a>
 8000cfe:	0003      	movs	r3, r0
 8000d00:	0021      	movs	r1, r4
 8000d02:	331b      	adds	r3, #27
 8000d04:	4099      	lsls	r1, r3
 8000d06:	1e4b      	subs	r3, r1, #1
 8000d08:	4199      	sbcs	r1, r3
 8000d0a:	2305      	movs	r3, #5
 8000d0c:	1a1b      	subs	r3, r3, r0
 8000d0e:	40dc      	lsrs	r4, r3
 8000d10:	430c      	orrs	r4, r1
 8000d12:	2805      	cmp	r0, #5
 8000d14:	dd01      	ble.n	8000d1a <__aeabi_ui2f+0x42>
 8000d16:	1f43      	subs	r3, r0, #5
 8000d18:	409c      	lsls	r4, r3
 8000d1a:	0023      	movs	r3, r4
 8000d1c:	490d      	ldr	r1, [pc, #52]	; (8000d54 <__aeabi_ui2f+0x7c>)
 8000d1e:	400b      	ands	r3, r1
 8000d20:	0765      	lsls	r5, r4, #29
 8000d22:	d009      	beq.n	8000d38 <__aeabi_ui2f+0x60>
 8000d24:	250f      	movs	r5, #15
 8000d26:	402c      	ands	r4, r5
 8000d28:	2c04      	cmp	r4, #4
 8000d2a:	d005      	beq.n	8000d38 <__aeabi_ui2f+0x60>
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	015c      	lsls	r4, r3, #5
 8000d30:	d502      	bpl.n	8000d38 <__aeabi_ui2f+0x60>
 8000d32:	229f      	movs	r2, #159	; 0x9f
 8000d34:	400b      	ands	r3, r1
 8000d36:	1a12      	subs	r2, r2, r0
 8000d38:	019b      	lsls	r3, r3, #6
 8000d3a:	0a58      	lsrs	r0, r3, #9
 8000d3c:	b2d2      	uxtb	r2, r2
 8000d3e:	0240      	lsls	r0, r0, #9
 8000d40:	05d2      	lsls	r2, r2, #23
 8000d42:	0a40      	lsrs	r0, r0, #9
 8000d44:	4310      	orrs	r0, r2
 8000d46:	bd70      	pop	{r4, r5, r6, pc}
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	e7f7      	b.n	8000d3e <__aeabi_ui2f+0x66>
 8000d4e:	0260      	lsls	r0, r4, #9
 8000d50:	0a40      	lsrs	r0, r0, #9
 8000d52:	e7f4      	b.n	8000d3e <__aeabi_ui2f+0x66>
 8000d54:	fbffffff 	.word	0xfbffffff

08000d58 <__aeabi_ddiv>:
 8000d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d5a:	4657      	mov	r7, sl
 8000d5c:	46de      	mov	lr, fp
 8000d5e:	464e      	mov	r6, r9
 8000d60:	4645      	mov	r5, r8
 8000d62:	b5e0      	push	{r5, r6, r7, lr}
 8000d64:	4683      	mov	fp, r0
 8000d66:	0007      	movs	r7, r0
 8000d68:	030e      	lsls	r6, r1, #12
 8000d6a:	0048      	lsls	r0, r1, #1
 8000d6c:	b085      	sub	sp, #20
 8000d6e:	4692      	mov	sl, r2
 8000d70:	001c      	movs	r4, r3
 8000d72:	0b36      	lsrs	r6, r6, #12
 8000d74:	0d40      	lsrs	r0, r0, #21
 8000d76:	0fcd      	lsrs	r5, r1, #31
 8000d78:	2800      	cmp	r0, #0
 8000d7a:	d100      	bne.n	8000d7e <__aeabi_ddiv+0x26>
 8000d7c:	e09d      	b.n	8000eba <__aeabi_ddiv+0x162>
 8000d7e:	4b95      	ldr	r3, [pc, #596]	; (8000fd4 <__aeabi_ddiv+0x27c>)
 8000d80:	4298      	cmp	r0, r3
 8000d82:	d039      	beq.n	8000df8 <__aeabi_ddiv+0xa0>
 8000d84:	2380      	movs	r3, #128	; 0x80
 8000d86:	00f6      	lsls	r6, r6, #3
 8000d88:	041b      	lsls	r3, r3, #16
 8000d8a:	431e      	orrs	r6, r3
 8000d8c:	4a92      	ldr	r2, [pc, #584]	; (8000fd8 <__aeabi_ddiv+0x280>)
 8000d8e:	0f7b      	lsrs	r3, r7, #29
 8000d90:	4333      	orrs	r3, r6
 8000d92:	4699      	mov	r9, r3
 8000d94:	4694      	mov	ip, r2
 8000d96:	0003      	movs	r3, r0
 8000d98:	4463      	add	r3, ip
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	2600      	movs	r6, #0
 8000da0:	00ff      	lsls	r7, r7, #3
 8000da2:	9302      	str	r3, [sp, #8]
 8000da4:	0323      	lsls	r3, r4, #12
 8000da6:	0b1b      	lsrs	r3, r3, #12
 8000da8:	4698      	mov	r8, r3
 8000daa:	0063      	lsls	r3, r4, #1
 8000dac:	0fe4      	lsrs	r4, r4, #31
 8000dae:	4652      	mov	r2, sl
 8000db0:	0d5b      	lsrs	r3, r3, #21
 8000db2:	9401      	str	r4, [sp, #4]
 8000db4:	d100      	bne.n	8000db8 <__aeabi_ddiv+0x60>
 8000db6:	e0b3      	b.n	8000f20 <__aeabi_ddiv+0x1c8>
 8000db8:	4986      	ldr	r1, [pc, #536]	; (8000fd4 <__aeabi_ddiv+0x27c>)
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_ddiv+0x68>
 8000dbe:	e09e      	b.n	8000efe <__aeabi_ddiv+0x1a6>
 8000dc0:	4642      	mov	r2, r8
 8000dc2:	00d1      	lsls	r1, r2, #3
 8000dc4:	2280      	movs	r2, #128	; 0x80
 8000dc6:	0412      	lsls	r2, r2, #16
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	4651      	mov	r1, sl
 8000dcc:	0f49      	lsrs	r1, r1, #29
 8000dce:	4311      	orrs	r1, r2
 8000dd0:	468b      	mov	fp, r1
 8000dd2:	4981      	ldr	r1, [pc, #516]	; (8000fd8 <__aeabi_ddiv+0x280>)
 8000dd4:	4652      	mov	r2, sl
 8000dd6:	468c      	mov	ip, r1
 8000dd8:	9900      	ldr	r1, [sp, #0]
 8000dda:	4463      	add	r3, ip
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	2100      	movs	r1, #0
 8000de0:	00d2      	lsls	r2, r2, #3
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	002b      	movs	r3, r5
 8000de6:	4063      	eors	r3, r4
 8000de8:	469a      	mov	sl, r3
 8000dea:	2e0f      	cmp	r6, #15
 8000dec:	d900      	bls.n	8000df0 <__aeabi_ddiv+0x98>
 8000dee:	e105      	b.n	8000ffc <__aeabi_ddiv+0x2a4>
 8000df0:	4b7a      	ldr	r3, [pc, #488]	; (8000fdc <__aeabi_ddiv+0x284>)
 8000df2:	00b6      	lsls	r6, r6, #2
 8000df4:	599b      	ldr	r3, [r3, r6]
 8000df6:	469f      	mov	pc, r3
 8000df8:	465b      	mov	r3, fp
 8000dfa:	4333      	orrs	r3, r6
 8000dfc:	4699      	mov	r9, r3
 8000dfe:	d000      	beq.n	8000e02 <__aeabi_ddiv+0xaa>
 8000e00:	e0b8      	b.n	8000f74 <__aeabi_ddiv+0x21c>
 8000e02:	2302      	movs	r3, #2
 8000e04:	2608      	movs	r6, #8
 8000e06:	2700      	movs	r7, #0
 8000e08:	9000      	str	r0, [sp, #0]
 8000e0a:	9302      	str	r3, [sp, #8]
 8000e0c:	e7ca      	b.n	8000da4 <__aeabi_ddiv+0x4c>
 8000e0e:	46cb      	mov	fp, r9
 8000e10:	003a      	movs	r2, r7
 8000e12:	9902      	ldr	r1, [sp, #8]
 8000e14:	9501      	str	r5, [sp, #4]
 8000e16:	9b01      	ldr	r3, [sp, #4]
 8000e18:	469a      	mov	sl, r3
 8000e1a:	2902      	cmp	r1, #2
 8000e1c:	d027      	beq.n	8000e6e <__aeabi_ddiv+0x116>
 8000e1e:	2903      	cmp	r1, #3
 8000e20:	d100      	bne.n	8000e24 <__aeabi_ddiv+0xcc>
 8000e22:	e280      	b.n	8001326 <__aeabi_ddiv+0x5ce>
 8000e24:	2901      	cmp	r1, #1
 8000e26:	d044      	beq.n	8000eb2 <__aeabi_ddiv+0x15a>
 8000e28:	496d      	ldr	r1, [pc, #436]	; (8000fe0 <__aeabi_ddiv+0x288>)
 8000e2a:	9b00      	ldr	r3, [sp, #0]
 8000e2c:	468c      	mov	ip, r1
 8000e2e:	4463      	add	r3, ip
 8000e30:	001c      	movs	r4, r3
 8000e32:	2c00      	cmp	r4, #0
 8000e34:	dd38      	ble.n	8000ea8 <__aeabi_ddiv+0x150>
 8000e36:	0753      	lsls	r3, r2, #29
 8000e38:	d000      	beq.n	8000e3c <__aeabi_ddiv+0xe4>
 8000e3a:	e213      	b.n	8001264 <__aeabi_ddiv+0x50c>
 8000e3c:	08d2      	lsrs	r2, r2, #3
 8000e3e:	465b      	mov	r3, fp
 8000e40:	01db      	lsls	r3, r3, #7
 8000e42:	d509      	bpl.n	8000e58 <__aeabi_ddiv+0x100>
 8000e44:	4659      	mov	r1, fp
 8000e46:	4b67      	ldr	r3, [pc, #412]	; (8000fe4 <__aeabi_ddiv+0x28c>)
 8000e48:	4019      	ands	r1, r3
 8000e4a:	468b      	mov	fp, r1
 8000e4c:	2180      	movs	r1, #128	; 0x80
 8000e4e:	00c9      	lsls	r1, r1, #3
 8000e50:	468c      	mov	ip, r1
 8000e52:	9b00      	ldr	r3, [sp, #0]
 8000e54:	4463      	add	r3, ip
 8000e56:	001c      	movs	r4, r3
 8000e58:	4b63      	ldr	r3, [pc, #396]	; (8000fe8 <__aeabi_ddiv+0x290>)
 8000e5a:	429c      	cmp	r4, r3
 8000e5c:	dc07      	bgt.n	8000e6e <__aeabi_ddiv+0x116>
 8000e5e:	465b      	mov	r3, fp
 8000e60:	0564      	lsls	r4, r4, #21
 8000e62:	075f      	lsls	r7, r3, #29
 8000e64:	025b      	lsls	r3, r3, #9
 8000e66:	4317      	orrs	r7, r2
 8000e68:	0b1b      	lsrs	r3, r3, #12
 8000e6a:	0d62      	lsrs	r2, r4, #21
 8000e6c:	e002      	b.n	8000e74 <__aeabi_ddiv+0x11c>
 8000e6e:	2300      	movs	r3, #0
 8000e70:	2700      	movs	r7, #0
 8000e72:	4a58      	ldr	r2, [pc, #352]	; (8000fd4 <__aeabi_ddiv+0x27c>)
 8000e74:	2100      	movs	r1, #0
 8000e76:	031b      	lsls	r3, r3, #12
 8000e78:	0b1c      	lsrs	r4, r3, #12
 8000e7a:	0d0b      	lsrs	r3, r1, #20
 8000e7c:	051b      	lsls	r3, r3, #20
 8000e7e:	4323      	orrs	r3, r4
 8000e80:	0514      	lsls	r4, r2, #20
 8000e82:	4a5a      	ldr	r2, [pc, #360]	; (8000fec <__aeabi_ddiv+0x294>)
 8000e84:	0038      	movs	r0, r7
 8000e86:	4013      	ands	r3, r2
 8000e88:	431c      	orrs	r4, r3
 8000e8a:	4653      	mov	r3, sl
 8000e8c:	0064      	lsls	r4, r4, #1
 8000e8e:	07db      	lsls	r3, r3, #31
 8000e90:	0864      	lsrs	r4, r4, #1
 8000e92:	431c      	orrs	r4, r3
 8000e94:	0021      	movs	r1, r4
 8000e96:	b005      	add	sp, #20
 8000e98:	bc3c      	pop	{r2, r3, r4, r5}
 8000e9a:	4690      	mov	r8, r2
 8000e9c:	4699      	mov	r9, r3
 8000e9e:	46a2      	mov	sl, r4
 8000ea0:	46ab      	mov	fp, r5
 8000ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	4252      	negs	r2, r2
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	1b1b      	subs	r3, r3, r4
 8000eac:	2b38      	cmp	r3, #56	; 0x38
 8000eae:	dc00      	bgt.n	8000eb2 <__aeabi_ddiv+0x15a>
 8000eb0:	e1ad      	b.n	800120e <__aeabi_ddiv+0x4b6>
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	2700      	movs	r7, #0
 8000eb8:	e7dc      	b.n	8000e74 <__aeabi_ddiv+0x11c>
 8000eba:	465b      	mov	r3, fp
 8000ebc:	4333      	orrs	r3, r6
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	d05e      	beq.n	8000f80 <__aeabi_ddiv+0x228>
 8000ec2:	2e00      	cmp	r6, #0
 8000ec4:	d100      	bne.n	8000ec8 <__aeabi_ddiv+0x170>
 8000ec6:	e18a      	b.n	80011de <__aeabi_ddiv+0x486>
 8000ec8:	0030      	movs	r0, r6
 8000eca:	f001 f8e9 	bl	80020a0 <__clzsi2>
 8000ece:	0003      	movs	r3, r0
 8000ed0:	3b0b      	subs	r3, #11
 8000ed2:	2b1c      	cmp	r3, #28
 8000ed4:	dd00      	ble.n	8000ed8 <__aeabi_ddiv+0x180>
 8000ed6:	e17b      	b.n	80011d0 <__aeabi_ddiv+0x478>
 8000ed8:	221d      	movs	r2, #29
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	465a      	mov	r2, fp
 8000ede:	0001      	movs	r1, r0
 8000ee0:	40da      	lsrs	r2, r3
 8000ee2:	3908      	subs	r1, #8
 8000ee4:	408e      	lsls	r6, r1
 8000ee6:	0013      	movs	r3, r2
 8000ee8:	465f      	mov	r7, fp
 8000eea:	4333      	orrs	r3, r6
 8000eec:	4699      	mov	r9, r3
 8000eee:	408f      	lsls	r7, r1
 8000ef0:	4b3f      	ldr	r3, [pc, #252]	; (8000ff0 <__aeabi_ddiv+0x298>)
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	1a1b      	subs	r3, r3, r0
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	2300      	movs	r3, #0
 8000efa:	9302      	str	r3, [sp, #8]
 8000efc:	e752      	b.n	8000da4 <__aeabi_ddiv+0x4c>
 8000efe:	4641      	mov	r1, r8
 8000f00:	4653      	mov	r3, sl
 8000f02:	430b      	orrs	r3, r1
 8000f04:	493b      	ldr	r1, [pc, #236]	; (8000ff4 <__aeabi_ddiv+0x29c>)
 8000f06:	469b      	mov	fp, r3
 8000f08:	468c      	mov	ip, r1
 8000f0a:	9b00      	ldr	r3, [sp, #0]
 8000f0c:	4463      	add	r3, ip
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	465b      	mov	r3, fp
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d13b      	bne.n	8000f8e <__aeabi_ddiv+0x236>
 8000f16:	2302      	movs	r3, #2
 8000f18:	2200      	movs	r2, #0
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	2102      	movs	r1, #2
 8000f1e:	e761      	b.n	8000de4 <__aeabi_ddiv+0x8c>
 8000f20:	4643      	mov	r3, r8
 8000f22:	4313      	orrs	r3, r2
 8000f24:	469b      	mov	fp, r3
 8000f26:	d037      	beq.n	8000f98 <__aeabi_ddiv+0x240>
 8000f28:	4643      	mov	r3, r8
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_ddiv+0x1d8>
 8000f2e:	e162      	b.n	80011f6 <__aeabi_ddiv+0x49e>
 8000f30:	4640      	mov	r0, r8
 8000f32:	f001 f8b5 	bl	80020a0 <__clzsi2>
 8000f36:	0003      	movs	r3, r0
 8000f38:	3b0b      	subs	r3, #11
 8000f3a:	2b1c      	cmp	r3, #28
 8000f3c:	dd00      	ble.n	8000f40 <__aeabi_ddiv+0x1e8>
 8000f3e:	e153      	b.n	80011e8 <__aeabi_ddiv+0x490>
 8000f40:	0002      	movs	r2, r0
 8000f42:	4641      	mov	r1, r8
 8000f44:	3a08      	subs	r2, #8
 8000f46:	4091      	lsls	r1, r2
 8000f48:	4688      	mov	r8, r1
 8000f4a:	211d      	movs	r1, #29
 8000f4c:	1acb      	subs	r3, r1, r3
 8000f4e:	4651      	mov	r1, sl
 8000f50:	40d9      	lsrs	r1, r3
 8000f52:	000b      	movs	r3, r1
 8000f54:	4641      	mov	r1, r8
 8000f56:	430b      	orrs	r3, r1
 8000f58:	469b      	mov	fp, r3
 8000f5a:	4653      	mov	r3, sl
 8000f5c:	4093      	lsls	r3, r2
 8000f5e:	001a      	movs	r2, r3
 8000f60:	9b00      	ldr	r3, [sp, #0]
 8000f62:	4925      	ldr	r1, [pc, #148]	; (8000ff8 <__aeabi_ddiv+0x2a0>)
 8000f64:	469c      	mov	ip, r3
 8000f66:	4460      	add	r0, ip
 8000f68:	0003      	movs	r3, r0
 8000f6a:	468c      	mov	ip, r1
 8000f6c:	4463      	add	r3, ip
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	2100      	movs	r1, #0
 8000f72:	e737      	b.n	8000de4 <__aeabi_ddiv+0x8c>
 8000f74:	2303      	movs	r3, #3
 8000f76:	46b1      	mov	r9, r6
 8000f78:	9000      	str	r0, [sp, #0]
 8000f7a:	260c      	movs	r6, #12
 8000f7c:	9302      	str	r3, [sp, #8]
 8000f7e:	e711      	b.n	8000da4 <__aeabi_ddiv+0x4c>
 8000f80:	2300      	movs	r3, #0
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	3301      	adds	r3, #1
 8000f86:	2604      	movs	r6, #4
 8000f88:	2700      	movs	r7, #0
 8000f8a:	9302      	str	r3, [sp, #8]
 8000f8c:	e70a      	b.n	8000da4 <__aeabi_ddiv+0x4c>
 8000f8e:	2303      	movs	r3, #3
 8000f90:	46c3      	mov	fp, r8
 8000f92:	431e      	orrs	r6, r3
 8000f94:	2103      	movs	r1, #3
 8000f96:	e725      	b.n	8000de4 <__aeabi_ddiv+0x8c>
 8000f98:	3301      	adds	r3, #1
 8000f9a:	431e      	orrs	r6, r3
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	e720      	b.n	8000de4 <__aeabi_ddiv+0x8c>
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	469a      	mov	sl, r3
 8000fa6:	2380      	movs	r3, #128	; 0x80
 8000fa8:	2700      	movs	r7, #0
 8000faa:	031b      	lsls	r3, r3, #12
 8000fac:	4a09      	ldr	r2, [pc, #36]	; (8000fd4 <__aeabi_ddiv+0x27c>)
 8000fae:	e761      	b.n	8000e74 <__aeabi_ddiv+0x11c>
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	4649      	mov	r1, r9
 8000fb4:	031b      	lsls	r3, r3, #12
 8000fb6:	4219      	tst	r1, r3
 8000fb8:	d100      	bne.n	8000fbc <__aeabi_ddiv+0x264>
 8000fba:	e0e2      	b.n	8001182 <__aeabi_ddiv+0x42a>
 8000fbc:	4659      	mov	r1, fp
 8000fbe:	4219      	tst	r1, r3
 8000fc0:	d000      	beq.n	8000fc4 <__aeabi_ddiv+0x26c>
 8000fc2:	e0de      	b.n	8001182 <__aeabi_ddiv+0x42a>
 8000fc4:	430b      	orrs	r3, r1
 8000fc6:	031b      	lsls	r3, r3, #12
 8000fc8:	0017      	movs	r7, r2
 8000fca:	0b1b      	lsrs	r3, r3, #12
 8000fcc:	46a2      	mov	sl, r4
 8000fce:	4a01      	ldr	r2, [pc, #4]	; (8000fd4 <__aeabi_ddiv+0x27c>)
 8000fd0:	e750      	b.n	8000e74 <__aeabi_ddiv+0x11c>
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	000007ff 	.word	0x000007ff
 8000fd8:	fffffc01 	.word	0xfffffc01
 8000fdc:	08005a64 	.word	0x08005a64
 8000fe0:	000003ff 	.word	0x000003ff
 8000fe4:	feffffff 	.word	0xfeffffff
 8000fe8:	000007fe 	.word	0x000007fe
 8000fec:	800fffff 	.word	0x800fffff
 8000ff0:	fffffc0d 	.word	0xfffffc0d
 8000ff4:	fffff801 	.word	0xfffff801
 8000ff8:	000003f3 	.word	0x000003f3
 8000ffc:	45d9      	cmp	r9, fp
 8000ffe:	d900      	bls.n	8001002 <__aeabi_ddiv+0x2aa>
 8001000:	e0cb      	b.n	800119a <__aeabi_ddiv+0x442>
 8001002:	d100      	bne.n	8001006 <__aeabi_ddiv+0x2ae>
 8001004:	e0c6      	b.n	8001194 <__aeabi_ddiv+0x43c>
 8001006:	003c      	movs	r4, r7
 8001008:	4648      	mov	r0, r9
 800100a:	2700      	movs	r7, #0
 800100c:	9b00      	ldr	r3, [sp, #0]
 800100e:	3b01      	subs	r3, #1
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	465b      	mov	r3, fp
 8001014:	0e16      	lsrs	r6, r2, #24
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	431e      	orrs	r6, r3
 800101a:	0213      	lsls	r3, r2, #8
 800101c:	4698      	mov	r8, r3
 800101e:	0433      	lsls	r3, r6, #16
 8001020:	0c1b      	lsrs	r3, r3, #16
 8001022:	4699      	mov	r9, r3
 8001024:	0c31      	lsrs	r1, r6, #16
 8001026:	9101      	str	r1, [sp, #4]
 8001028:	f7ff f908 	bl	800023c <__aeabi_uidivmod>
 800102c:	464a      	mov	r2, r9
 800102e:	4342      	muls	r2, r0
 8001030:	040b      	lsls	r3, r1, #16
 8001032:	0c21      	lsrs	r1, r4, #16
 8001034:	0005      	movs	r5, r0
 8001036:	4319      	orrs	r1, r3
 8001038:	428a      	cmp	r2, r1
 800103a:	d907      	bls.n	800104c <__aeabi_ddiv+0x2f4>
 800103c:	1989      	adds	r1, r1, r6
 800103e:	3d01      	subs	r5, #1
 8001040:	428e      	cmp	r6, r1
 8001042:	d803      	bhi.n	800104c <__aeabi_ddiv+0x2f4>
 8001044:	428a      	cmp	r2, r1
 8001046:	d901      	bls.n	800104c <__aeabi_ddiv+0x2f4>
 8001048:	1e85      	subs	r5, r0, #2
 800104a:	1989      	adds	r1, r1, r6
 800104c:	1a88      	subs	r0, r1, r2
 800104e:	9901      	ldr	r1, [sp, #4]
 8001050:	f7ff f8f4 	bl	800023c <__aeabi_uidivmod>
 8001054:	0409      	lsls	r1, r1, #16
 8001056:	468c      	mov	ip, r1
 8001058:	464a      	mov	r2, r9
 800105a:	0421      	lsls	r1, r4, #16
 800105c:	4664      	mov	r4, ip
 800105e:	4342      	muls	r2, r0
 8001060:	0c09      	lsrs	r1, r1, #16
 8001062:	0003      	movs	r3, r0
 8001064:	4321      	orrs	r1, r4
 8001066:	428a      	cmp	r2, r1
 8001068:	d904      	bls.n	8001074 <__aeabi_ddiv+0x31c>
 800106a:	1989      	adds	r1, r1, r6
 800106c:	3b01      	subs	r3, #1
 800106e:	428e      	cmp	r6, r1
 8001070:	d800      	bhi.n	8001074 <__aeabi_ddiv+0x31c>
 8001072:	e0f1      	b.n	8001258 <__aeabi_ddiv+0x500>
 8001074:	042d      	lsls	r5, r5, #16
 8001076:	431d      	orrs	r5, r3
 8001078:	46ab      	mov	fp, r5
 800107a:	4643      	mov	r3, r8
 800107c:	1a89      	subs	r1, r1, r2
 800107e:	4642      	mov	r2, r8
 8001080:	0c28      	lsrs	r0, r5, #16
 8001082:	0412      	lsls	r2, r2, #16
 8001084:	0c1d      	lsrs	r5, r3, #16
 8001086:	465b      	mov	r3, fp
 8001088:	0c14      	lsrs	r4, r2, #16
 800108a:	0022      	movs	r2, r4
 800108c:	041b      	lsls	r3, r3, #16
 800108e:	0c1b      	lsrs	r3, r3, #16
 8001090:	435a      	muls	r2, r3
 8001092:	9403      	str	r4, [sp, #12]
 8001094:	436b      	muls	r3, r5
 8001096:	4344      	muls	r4, r0
 8001098:	9502      	str	r5, [sp, #8]
 800109a:	4368      	muls	r0, r5
 800109c:	191b      	adds	r3, r3, r4
 800109e:	0c15      	lsrs	r5, r2, #16
 80010a0:	18eb      	adds	r3, r5, r3
 80010a2:	429c      	cmp	r4, r3
 80010a4:	d903      	bls.n	80010ae <__aeabi_ddiv+0x356>
 80010a6:	2480      	movs	r4, #128	; 0x80
 80010a8:	0264      	lsls	r4, r4, #9
 80010aa:	46a4      	mov	ip, r4
 80010ac:	4460      	add	r0, ip
 80010ae:	0c1c      	lsrs	r4, r3, #16
 80010b0:	0415      	lsls	r5, r2, #16
 80010b2:	041b      	lsls	r3, r3, #16
 80010b4:	0c2d      	lsrs	r5, r5, #16
 80010b6:	1820      	adds	r0, r4, r0
 80010b8:	195d      	adds	r5, r3, r5
 80010ba:	4281      	cmp	r1, r0
 80010bc:	d377      	bcc.n	80011ae <__aeabi_ddiv+0x456>
 80010be:	d073      	beq.n	80011a8 <__aeabi_ddiv+0x450>
 80010c0:	1a0c      	subs	r4, r1, r0
 80010c2:	4aa2      	ldr	r2, [pc, #648]	; (800134c <__aeabi_ddiv+0x5f4>)
 80010c4:	1b7d      	subs	r5, r7, r5
 80010c6:	42af      	cmp	r7, r5
 80010c8:	41bf      	sbcs	r7, r7
 80010ca:	4694      	mov	ip, r2
 80010cc:	9b00      	ldr	r3, [sp, #0]
 80010ce:	427f      	negs	r7, r7
 80010d0:	4463      	add	r3, ip
 80010d2:	1be0      	subs	r0, r4, r7
 80010d4:	001c      	movs	r4, r3
 80010d6:	4286      	cmp	r6, r0
 80010d8:	d100      	bne.n	80010dc <__aeabi_ddiv+0x384>
 80010da:	e0db      	b.n	8001294 <__aeabi_ddiv+0x53c>
 80010dc:	9901      	ldr	r1, [sp, #4]
 80010de:	f7ff f8ad 	bl	800023c <__aeabi_uidivmod>
 80010e2:	464a      	mov	r2, r9
 80010e4:	4342      	muls	r2, r0
 80010e6:	040b      	lsls	r3, r1, #16
 80010e8:	0c29      	lsrs	r1, r5, #16
 80010ea:	0007      	movs	r7, r0
 80010ec:	4319      	orrs	r1, r3
 80010ee:	428a      	cmp	r2, r1
 80010f0:	d907      	bls.n	8001102 <__aeabi_ddiv+0x3aa>
 80010f2:	1989      	adds	r1, r1, r6
 80010f4:	3f01      	subs	r7, #1
 80010f6:	428e      	cmp	r6, r1
 80010f8:	d803      	bhi.n	8001102 <__aeabi_ddiv+0x3aa>
 80010fa:	428a      	cmp	r2, r1
 80010fc:	d901      	bls.n	8001102 <__aeabi_ddiv+0x3aa>
 80010fe:	1e87      	subs	r7, r0, #2
 8001100:	1989      	adds	r1, r1, r6
 8001102:	1a88      	subs	r0, r1, r2
 8001104:	9901      	ldr	r1, [sp, #4]
 8001106:	f7ff f899 	bl	800023c <__aeabi_uidivmod>
 800110a:	0409      	lsls	r1, r1, #16
 800110c:	464a      	mov	r2, r9
 800110e:	4689      	mov	r9, r1
 8001110:	0429      	lsls	r1, r5, #16
 8001112:	464d      	mov	r5, r9
 8001114:	4342      	muls	r2, r0
 8001116:	0c09      	lsrs	r1, r1, #16
 8001118:	0003      	movs	r3, r0
 800111a:	4329      	orrs	r1, r5
 800111c:	428a      	cmp	r2, r1
 800111e:	d907      	bls.n	8001130 <__aeabi_ddiv+0x3d8>
 8001120:	1989      	adds	r1, r1, r6
 8001122:	3b01      	subs	r3, #1
 8001124:	428e      	cmp	r6, r1
 8001126:	d803      	bhi.n	8001130 <__aeabi_ddiv+0x3d8>
 8001128:	428a      	cmp	r2, r1
 800112a:	d901      	bls.n	8001130 <__aeabi_ddiv+0x3d8>
 800112c:	1e83      	subs	r3, r0, #2
 800112e:	1989      	adds	r1, r1, r6
 8001130:	043f      	lsls	r7, r7, #16
 8001132:	1a89      	subs	r1, r1, r2
 8001134:	003a      	movs	r2, r7
 8001136:	9f03      	ldr	r7, [sp, #12]
 8001138:	431a      	orrs	r2, r3
 800113a:	0038      	movs	r0, r7
 800113c:	0413      	lsls	r3, r2, #16
 800113e:	0c1b      	lsrs	r3, r3, #16
 8001140:	4358      	muls	r0, r3
 8001142:	4681      	mov	r9, r0
 8001144:	9802      	ldr	r0, [sp, #8]
 8001146:	0c15      	lsrs	r5, r2, #16
 8001148:	436f      	muls	r7, r5
 800114a:	4343      	muls	r3, r0
 800114c:	4345      	muls	r5, r0
 800114e:	4648      	mov	r0, r9
 8001150:	0c00      	lsrs	r0, r0, #16
 8001152:	4684      	mov	ip, r0
 8001154:	19db      	adds	r3, r3, r7
 8001156:	4463      	add	r3, ip
 8001158:	429f      	cmp	r7, r3
 800115a:	d903      	bls.n	8001164 <__aeabi_ddiv+0x40c>
 800115c:	2080      	movs	r0, #128	; 0x80
 800115e:	0240      	lsls	r0, r0, #9
 8001160:	4684      	mov	ip, r0
 8001162:	4465      	add	r5, ip
 8001164:	4648      	mov	r0, r9
 8001166:	0c1f      	lsrs	r7, r3, #16
 8001168:	0400      	lsls	r0, r0, #16
 800116a:	041b      	lsls	r3, r3, #16
 800116c:	0c00      	lsrs	r0, r0, #16
 800116e:	197d      	adds	r5, r7, r5
 8001170:	1818      	adds	r0, r3, r0
 8001172:	42a9      	cmp	r1, r5
 8001174:	d200      	bcs.n	8001178 <__aeabi_ddiv+0x420>
 8001176:	e084      	b.n	8001282 <__aeabi_ddiv+0x52a>
 8001178:	d100      	bne.n	800117c <__aeabi_ddiv+0x424>
 800117a:	e07f      	b.n	800127c <__aeabi_ddiv+0x524>
 800117c:	2301      	movs	r3, #1
 800117e:	431a      	orrs	r2, r3
 8001180:	e657      	b.n	8000e32 <__aeabi_ddiv+0xda>
 8001182:	2380      	movs	r3, #128	; 0x80
 8001184:	464a      	mov	r2, r9
 8001186:	031b      	lsls	r3, r3, #12
 8001188:	4313      	orrs	r3, r2
 800118a:	031b      	lsls	r3, r3, #12
 800118c:	0b1b      	lsrs	r3, r3, #12
 800118e:	46aa      	mov	sl, r5
 8001190:	4a6f      	ldr	r2, [pc, #444]	; (8001350 <__aeabi_ddiv+0x5f8>)
 8001192:	e66f      	b.n	8000e74 <__aeabi_ddiv+0x11c>
 8001194:	42ba      	cmp	r2, r7
 8001196:	d900      	bls.n	800119a <__aeabi_ddiv+0x442>
 8001198:	e735      	b.n	8001006 <__aeabi_ddiv+0x2ae>
 800119a:	464b      	mov	r3, r9
 800119c:	07dc      	lsls	r4, r3, #31
 800119e:	0858      	lsrs	r0, r3, #1
 80011a0:	087b      	lsrs	r3, r7, #1
 80011a2:	431c      	orrs	r4, r3
 80011a4:	07ff      	lsls	r7, r7, #31
 80011a6:	e734      	b.n	8001012 <__aeabi_ddiv+0x2ba>
 80011a8:	2400      	movs	r4, #0
 80011aa:	42af      	cmp	r7, r5
 80011ac:	d289      	bcs.n	80010c2 <__aeabi_ddiv+0x36a>
 80011ae:	4447      	add	r7, r8
 80011b0:	4547      	cmp	r7, r8
 80011b2:	41a4      	sbcs	r4, r4
 80011b4:	465b      	mov	r3, fp
 80011b6:	4264      	negs	r4, r4
 80011b8:	19a4      	adds	r4, r4, r6
 80011ba:	1864      	adds	r4, r4, r1
 80011bc:	3b01      	subs	r3, #1
 80011be:	42a6      	cmp	r6, r4
 80011c0:	d21e      	bcs.n	8001200 <__aeabi_ddiv+0x4a8>
 80011c2:	42a0      	cmp	r0, r4
 80011c4:	d86d      	bhi.n	80012a2 <__aeabi_ddiv+0x54a>
 80011c6:	d100      	bne.n	80011ca <__aeabi_ddiv+0x472>
 80011c8:	e0b6      	b.n	8001338 <__aeabi_ddiv+0x5e0>
 80011ca:	1a24      	subs	r4, r4, r0
 80011cc:	469b      	mov	fp, r3
 80011ce:	e778      	b.n	80010c2 <__aeabi_ddiv+0x36a>
 80011d0:	0003      	movs	r3, r0
 80011d2:	465a      	mov	r2, fp
 80011d4:	3b28      	subs	r3, #40	; 0x28
 80011d6:	409a      	lsls	r2, r3
 80011d8:	2700      	movs	r7, #0
 80011da:	4691      	mov	r9, r2
 80011dc:	e688      	b.n	8000ef0 <__aeabi_ddiv+0x198>
 80011de:	4658      	mov	r0, fp
 80011e0:	f000 ff5e 	bl	80020a0 <__clzsi2>
 80011e4:	3020      	adds	r0, #32
 80011e6:	e672      	b.n	8000ece <__aeabi_ddiv+0x176>
 80011e8:	0003      	movs	r3, r0
 80011ea:	4652      	mov	r2, sl
 80011ec:	3b28      	subs	r3, #40	; 0x28
 80011ee:	409a      	lsls	r2, r3
 80011f0:	4693      	mov	fp, r2
 80011f2:	2200      	movs	r2, #0
 80011f4:	e6b4      	b.n	8000f60 <__aeabi_ddiv+0x208>
 80011f6:	4650      	mov	r0, sl
 80011f8:	f000 ff52 	bl	80020a0 <__clzsi2>
 80011fc:	3020      	adds	r0, #32
 80011fe:	e69a      	b.n	8000f36 <__aeabi_ddiv+0x1de>
 8001200:	42a6      	cmp	r6, r4
 8001202:	d1e2      	bne.n	80011ca <__aeabi_ddiv+0x472>
 8001204:	45b8      	cmp	r8, r7
 8001206:	d9dc      	bls.n	80011c2 <__aeabi_ddiv+0x46a>
 8001208:	1a34      	subs	r4, r6, r0
 800120a:	469b      	mov	fp, r3
 800120c:	e759      	b.n	80010c2 <__aeabi_ddiv+0x36a>
 800120e:	2b1f      	cmp	r3, #31
 8001210:	dc65      	bgt.n	80012de <__aeabi_ddiv+0x586>
 8001212:	4c50      	ldr	r4, [pc, #320]	; (8001354 <__aeabi_ddiv+0x5fc>)
 8001214:	9900      	ldr	r1, [sp, #0]
 8001216:	46a4      	mov	ip, r4
 8001218:	465c      	mov	r4, fp
 800121a:	4461      	add	r1, ip
 800121c:	0008      	movs	r0, r1
 800121e:	408c      	lsls	r4, r1
 8001220:	0011      	movs	r1, r2
 8001222:	4082      	lsls	r2, r0
 8001224:	40d9      	lsrs	r1, r3
 8001226:	1e50      	subs	r0, r2, #1
 8001228:	4182      	sbcs	r2, r0
 800122a:	430c      	orrs	r4, r1
 800122c:	4314      	orrs	r4, r2
 800122e:	465a      	mov	r2, fp
 8001230:	40da      	lsrs	r2, r3
 8001232:	0013      	movs	r3, r2
 8001234:	0762      	lsls	r2, r4, #29
 8001236:	d009      	beq.n	800124c <__aeabi_ddiv+0x4f4>
 8001238:	220f      	movs	r2, #15
 800123a:	4022      	ands	r2, r4
 800123c:	2a04      	cmp	r2, #4
 800123e:	d005      	beq.n	800124c <__aeabi_ddiv+0x4f4>
 8001240:	0022      	movs	r2, r4
 8001242:	1d14      	adds	r4, r2, #4
 8001244:	4294      	cmp	r4, r2
 8001246:	4189      	sbcs	r1, r1
 8001248:	4249      	negs	r1, r1
 800124a:	185b      	adds	r3, r3, r1
 800124c:	021a      	lsls	r2, r3, #8
 800124e:	d562      	bpl.n	8001316 <__aeabi_ddiv+0x5be>
 8001250:	2201      	movs	r2, #1
 8001252:	2300      	movs	r3, #0
 8001254:	2700      	movs	r7, #0
 8001256:	e60d      	b.n	8000e74 <__aeabi_ddiv+0x11c>
 8001258:	428a      	cmp	r2, r1
 800125a:	d800      	bhi.n	800125e <__aeabi_ddiv+0x506>
 800125c:	e70a      	b.n	8001074 <__aeabi_ddiv+0x31c>
 800125e:	1e83      	subs	r3, r0, #2
 8001260:	1989      	adds	r1, r1, r6
 8001262:	e707      	b.n	8001074 <__aeabi_ddiv+0x31c>
 8001264:	230f      	movs	r3, #15
 8001266:	4013      	ands	r3, r2
 8001268:	2b04      	cmp	r3, #4
 800126a:	d100      	bne.n	800126e <__aeabi_ddiv+0x516>
 800126c:	e5e6      	b.n	8000e3c <__aeabi_ddiv+0xe4>
 800126e:	1d17      	adds	r7, r2, #4
 8001270:	4297      	cmp	r7, r2
 8001272:	4192      	sbcs	r2, r2
 8001274:	4253      	negs	r3, r2
 8001276:	449b      	add	fp, r3
 8001278:	08fa      	lsrs	r2, r7, #3
 800127a:	e5e0      	b.n	8000e3e <__aeabi_ddiv+0xe6>
 800127c:	2800      	cmp	r0, #0
 800127e:	d100      	bne.n	8001282 <__aeabi_ddiv+0x52a>
 8001280:	e5d7      	b.n	8000e32 <__aeabi_ddiv+0xda>
 8001282:	1871      	adds	r1, r6, r1
 8001284:	1e53      	subs	r3, r2, #1
 8001286:	42b1      	cmp	r1, r6
 8001288:	d327      	bcc.n	80012da <__aeabi_ddiv+0x582>
 800128a:	42a9      	cmp	r1, r5
 800128c:	d315      	bcc.n	80012ba <__aeabi_ddiv+0x562>
 800128e:	d058      	beq.n	8001342 <__aeabi_ddiv+0x5ea>
 8001290:	001a      	movs	r2, r3
 8001292:	e773      	b.n	800117c <__aeabi_ddiv+0x424>
 8001294:	2b00      	cmp	r3, #0
 8001296:	dc00      	bgt.n	800129a <__aeabi_ddiv+0x542>
 8001298:	e604      	b.n	8000ea4 <__aeabi_ddiv+0x14c>
 800129a:	2301      	movs	r3, #1
 800129c:	2200      	movs	r2, #0
 800129e:	449b      	add	fp, r3
 80012a0:	e5cd      	b.n	8000e3e <__aeabi_ddiv+0xe6>
 80012a2:	2302      	movs	r3, #2
 80012a4:	4447      	add	r7, r8
 80012a6:	4547      	cmp	r7, r8
 80012a8:	4189      	sbcs	r1, r1
 80012aa:	425b      	negs	r3, r3
 80012ac:	469c      	mov	ip, r3
 80012ae:	4249      	negs	r1, r1
 80012b0:	1989      	adds	r1, r1, r6
 80012b2:	190c      	adds	r4, r1, r4
 80012b4:	44e3      	add	fp, ip
 80012b6:	1a24      	subs	r4, r4, r0
 80012b8:	e703      	b.n	80010c2 <__aeabi_ddiv+0x36a>
 80012ba:	4643      	mov	r3, r8
 80012bc:	005f      	lsls	r7, r3, #1
 80012be:	4547      	cmp	r7, r8
 80012c0:	419b      	sbcs	r3, r3
 80012c2:	46b8      	mov	r8, r7
 80012c4:	425b      	negs	r3, r3
 80012c6:	199e      	adds	r6, r3, r6
 80012c8:	3a02      	subs	r2, #2
 80012ca:	1989      	adds	r1, r1, r6
 80012cc:	42a9      	cmp	r1, r5
 80012ce:	d000      	beq.n	80012d2 <__aeabi_ddiv+0x57a>
 80012d0:	e754      	b.n	800117c <__aeabi_ddiv+0x424>
 80012d2:	4540      	cmp	r0, r8
 80012d4:	d000      	beq.n	80012d8 <__aeabi_ddiv+0x580>
 80012d6:	e751      	b.n	800117c <__aeabi_ddiv+0x424>
 80012d8:	e5ab      	b.n	8000e32 <__aeabi_ddiv+0xda>
 80012da:	001a      	movs	r2, r3
 80012dc:	e7f6      	b.n	80012cc <__aeabi_ddiv+0x574>
 80012de:	211f      	movs	r1, #31
 80012e0:	465f      	mov	r7, fp
 80012e2:	4249      	negs	r1, r1
 80012e4:	1b0c      	subs	r4, r1, r4
 80012e6:	40e7      	lsrs	r7, r4
 80012e8:	2b20      	cmp	r3, #32
 80012ea:	d007      	beq.n	80012fc <__aeabi_ddiv+0x5a4>
 80012ec:	491a      	ldr	r1, [pc, #104]	; (8001358 <__aeabi_ddiv+0x600>)
 80012ee:	9b00      	ldr	r3, [sp, #0]
 80012f0:	468c      	mov	ip, r1
 80012f2:	4463      	add	r3, ip
 80012f4:	0018      	movs	r0, r3
 80012f6:	465b      	mov	r3, fp
 80012f8:	4083      	lsls	r3, r0
 80012fa:	431a      	orrs	r2, r3
 80012fc:	1e50      	subs	r0, r2, #1
 80012fe:	4182      	sbcs	r2, r0
 8001300:	433a      	orrs	r2, r7
 8001302:	2707      	movs	r7, #7
 8001304:	2300      	movs	r3, #0
 8001306:	4017      	ands	r7, r2
 8001308:	d009      	beq.n	800131e <__aeabi_ddiv+0x5c6>
 800130a:	210f      	movs	r1, #15
 800130c:	2300      	movs	r3, #0
 800130e:	4011      	ands	r1, r2
 8001310:	0014      	movs	r4, r2
 8001312:	2904      	cmp	r1, #4
 8001314:	d195      	bne.n	8001242 <__aeabi_ddiv+0x4ea>
 8001316:	0022      	movs	r2, r4
 8001318:	075f      	lsls	r7, r3, #29
 800131a:	025b      	lsls	r3, r3, #9
 800131c:	0b1b      	lsrs	r3, r3, #12
 800131e:	08d2      	lsrs	r2, r2, #3
 8001320:	4317      	orrs	r7, r2
 8001322:	2200      	movs	r2, #0
 8001324:	e5a6      	b.n	8000e74 <__aeabi_ddiv+0x11c>
 8001326:	2380      	movs	r3, #128	; 0x80
 8001328:	4659      	mov	r1, fp
 800132a:	031b      	lsls	r3, r3, #12
 800132c:	430b      	orrs	r3, r1
 800132e:	031b      	lsls	r3, r3, #12
 8001330:	0017      	movs	r7, r2
 8001332:	0b1b      	lsrs	r3, r3, #12
 8001334:	4a06      	ldr	r2, [pc, #24]	; (8001350 <__aeabi_ddiv+0x5f8>)
 8001336:	e59d      	b.n	8000e74 <__aeabi_ddiv+0x11c>
 8001338:	42bd      	cmp	r5, r7
 800133a:	d8b2      	bhi.n	80012a2 <__aeabi_ddiv+0x54a>
 800133c:	469b      	mov	fp, r3
 800133e:	2400      	movs	r4, #0
 8001340:	e6bf      	b.n	80010c2 <__aeabi_ddiv+0x36a>
 8001342:	4580      	cmp	r8, r0
 8001344:	d3b9      	bcc.n	80012ba <__aeabi_ddiv+0x562>
 8001346:	001a      	movs	r2, r3
 8001348:	e7c3      	b.n	80012d2 <__aeabi_ddiv+0x57a>
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	000003ff 	.word	0x000003ff
 8001350:	000007ff 	.word	0x000007ff
 8001354:	0000041e 	.word	0x0000041e
 8001358:	0000043e 	.word	0x0000043e

0800135c <__aeabi_dmul>:
 800135c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800135e:	4657      	mov	r7, sl
 8001360:	46de      	mov	lr, fp
 8001362:	464e      	mov	r6, r9
 8001364:	4645      	mov	r5, r8
 8001366:	b5e0      	push	{r5, r6, r7, lr}
 8001368:	4683      	mov	fp, r0
 800136a:	0006      	movs	r6, r0
 800136c:	030f      	lsls	r7, r1, #12
 800136e:	0048      	lsls	r0, r1, #1
 8001370:	b087      	sub	sp, #28
 8001372:	4692      	mov	sl, r2
 8001374:	001d      	movs	r5, r3
 8001376:	0b3f      	lsrs	r7, r7, #12
 8001378:	0d40      	lsrs	r0, r0, #21
 800137a:	0fcc      	lsrs	r4, r1, #31
 800137c:	2800      	cmp	r0, #0
 800137e:	d100      	bne.n	8001382 <__aeabi_dmul+0x26>
 8001380:	e06f      	b.n	8001462 <__aeabi_dmul+0x106>
 8001382:	4bde      	ldr	r3, [pc, #888]	; (80016fc <__aeabi_dmul+0x3a0>)
 8001384:	4298      	cmp	r0, r3
 8001386:	d038      	beq.n	80013fa <__aeabi_dmul+0x9e>
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	00ff      	lsls	r7, r7, #3
 800138c:	041b      	lsls	r3, r3, #16
 800138e:	431f      	orrs	r7, r3
 8001390:	0f73      	lsrs	r3, r6, #29
 8001392:	433b      	orrs	r3, r7
 8001394:	9301      	str	r3, [sp, #4]
 8001396:	4bda      	ldr	r3, [pc, #872]	; (8001700 <__aeabi_dmul+0x3a4>)
 8001398:	2700      	movs	r7, #0
 800139a:	4699      	mov	r9, r3
 800139c:	2300      	movs	r3, #0
 800139e:	469b      	mov	fp, r3
 80013a0:	00f6      	lsls	r6, r6, #3
 80013a2:	4481      	add	r9, r0
 80013a4:	032b      	lsls	r3, r5, #12
 80013a6:	0069      	lsls	r1, r5, #1
 80013a8:	0b1b      	lsrs	r3, r3, #12
 80013aa:	4652      	mov	r2, sl
 80013ac:	4698      	mov	r8, r3
 80013ae:	0d49      	lsrs	r1, r1, #21
 80013b0:	0fed      	lsrs	r5, r5, #31
 80013b2:	2900      	cmp	r1, #0
 80013b4:	d100      	bne.n	80013b8 <__aeabi_dmul+0x5c>
 80013b6:	e085      	b.n	80014c4 <__aeabi_dmul+0x168>
 80013b8:	4bd0      	ldr	r3, [pc, #832]	; (80016fc <__aeabi_dmul+0x3a0>)
 80013ba:	4299      	cmp	r1, r3
 80013bc:	d100      	bne.n	80013c0 <__aeabi_dmul+0x64>
 80013be:	e073      	b.n	80014a8 <__aeabi_dmul+0x14c>
 80013c0:	4643      	mov	r3, r8
 80013c2:	00da      	lsls	r2, r3, #3
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	041b      	lsls	r3, r3, #16
 80013c8:	4313      	orrs	r3, r2
 80013ca:	4652      	mov	r2, sl
 80013cc:	48cc      	ldr	r0, [pc, #816]	; (8001700 <__aeabi_dmul+0x3a4>)
 80013ce:	0f52      	lsrs	r2, r2, #29
 80013d0:	4684      	mov	ip, r0
 80013d2:	4313      	orrs	r3, r2
 80013d4:	4652      	mov	r2, sl
 80013d6:	2000      	movs	r0, #0
 80013d8:	4461      	add	r1, ip
 80013da:	00d2      	lsls	r2, r2, #3
 80013dc:	4489      	add	r9, r1
 80013de:	0021      	movs	r1, r4
 80013e0:	4069      	eors	r1, r5
 80013e2:	9100      	str	r1, [sp, #0]
 80013e4:	468c      	mov	ip, r1
 80013e6:	2101      	movs	r1, #1
 80013e8:	4449      	add	r1, r9
 80013ea:	468a      	mov	sl, r1
 80013ec:	2f0f      	cmp	r7, #15
 80013ee:	d900      	bls.n	80013f2 <__aeabi_dmul+0x96>
 80013f0:	e090      	b.n	8001514 <__aeabi_dmul+0x1b8>
 80013f2:	49c4      	ldr	r1, [pc, #784]	; (8001704 <__aeabi_dmul+0x3a8>)
 80013f4:	00bf      	lsls	r7, r7, #2
 80013f6:	59cf      	ldr	r7, [r1, r7]
 80013f8:	46bf      	mov	pc, r7
 80013fa:	465b      	mov	r3, fp
 80013fc:	433b      	orrs	r3, r7
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	d000      	beq.n	8001404 <__aeabi_dmul+0xa8>
 8001402:	e16a      	b.n	80016da <__aeabi_dmul+0x37e>
 8001404:	2302      	movs	r3, #2
 8001406:	2708      	movs	r7, #8
 8001408:	2600      	movs	r6, #0
 800140a:	4681      	mov	r9, r0
 800140c:	469b      	mov	fp, r3
 800140e:	e7c9      	b.n	80013a4 <__aeabi_dmul+0x48>
 8001410:	0032      	movs	r2, r6
 8001412:	4658      	mov	r0, fp
 8001414:	9b01      	ldr	r3, [sp, #4]
 8001416:	4661      	mov	r1, ip
 8001418:	9100      	str	r1, [sp, #0]
 800141a:	2802      	cmp	r0, #2
 800141c:	d100      	bne.n	8001420 <__aeabi_dmul+0xc4>
 800141e:	e075      	b.n	800150c <__aeabi_dmul+0x1b0>
 8001420:	2803      	cmp	r0, #3
 8001422:	d100      	bne.n	8001426 <__aeabi_dmul+0xca>
 8001424:	e1fe      	b.n	8001824 <__aeabi_dmul+0x4c8>
 8001426:	2801      	cmp	r0, #1
 8001428:	d000      	beq.n	800142c <__aeabi_dmul+0xd0>
 800142a:	e12c      	b.n	8001686 <__aeabi_dmul+0x32a>
 800142c:	2300      	movs	r3, #0
 800142e:	2700      	movs	r7, #0
 8001430:	2600      	movs	r6, #0
 8001432:	2500      	movs	r5, #0
 8001434:	033f      	lsls	r7, r7, #12
 8001436:	0d2a      	lsrs	r2, r5, #20
 8001438:	0b3f      	lsrs	r7, r7, #12
 800143a:	48b3      	ldr	r0, [pc, #716]	; (8001708 <__aeabi_dmul+0x3ac>)
 800143c:	0512      	lsls	r2, r2, #20
 800143e:	433a      	orrs	r2, r7
 8001440:	4002      	ands	r2, r0
 8001442:	051b      	lsls	r3, r3, #20
 8001444:	4313      	orrs	r3, r2
 8001446:	9a00      	ldr	r2, [sp, #0]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	07d1      	lsls	r1, r2, #31
 800144c:	085b      	lsrs	r3, r3, #1
 800144e:	430b      	orrs	r3, r1
 8001450:	0030      	movs	r0, r6
 8001452:	0019      	movs	r1, r3
 8001454:	b007      	add	sp, #28
 8001456:	bc3c      	pop	{r2, r3, r4, r5}
 8001458:	4690      	mov	r8, r2
 800145a:	4699      	mov	r9, r3
 800145c:	46a2      	mov	sl, r4
 800145e:	46ab      	mov	fp, r5
 8001460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001462:	465b      	mov	r3, fp
 8001464:	433b      	orrs	r3, r7
 8001466:	9301      	str	r3, [sp, #4]
 8001468:	d100      	bne.n	800146c <__aeabi_dmul+0x110>
 800146a:	e12f      	b.n	80016cc <__aeabi_dmul+0x370>
 800146c:	2f00      	cmp	r7, #0
 800146e:	d100      	bne.n	8001472 <__aeabi_dmul+0x116>
 8001470:	e1a5      	b.n	80017be <__aeabi_dmul+0x462>
 8001472:	0038      	movs	r0, r7
 8001474:	f000 fe14 	bl	80020a0 <__clzsi2>
 8001478:	0003      	movs	r3, r0
 800147a:	3b0b      	subs	r3, #11
 800147c:	2b1c      	cmp	r3, #28
 800147e:	dd00      	ble.n	8001482 <__aeabi_dmul+0x126>
 8001480:	e196      	b.n	80017b0 <__aeabi_dmul+0x454>
 8001482:	221d      	movs	r2, #29
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	465a      	mov	r2, fp
 8001488:	0001      	movs	r1, r0
 800148a:	40da      	lsrs	r2, r3
 800148c:	465e      	mov	r6, fp
 800148e:	3908      	subs	r1, #8
 8001490:	408f      	lsls	r7, r1
 8001492:	0013      	movs	r3, r2
 8001494:	408e      	lsls	r6, r1
 8001496:	433b      	orrs	r3, r7
 8001498:	9301      	str	r3, [sp, #4]
 800149a:	4b9c      	ldr	r3, [pc, #624]	; (800170c <__aeabi_dmul+0x3b0>)
 800149c:	2700      	movs	r7, #0
 800149e:	1a1b      	subs	r3, r3, r0
 80014a0:	4699      	mov	r9, r3
 80014a2:	2300      	movs	r3, #0
 80014a4:	469b      	mov	fp, r3
 80014a6:	e77d      	b.n	80013a4 <__aeabi_dmul+0x48>
 80014a8:	4641      	mov	r1, r8
 80014aa:	4653      	mov	r3, sl
 80014ac:	430b      	orrs	r3, r1
 80014ae:	4993      	ldr	r1, [pc, #588]	; (80016fc <__aeabi_dmul+0x3a0>)
 80014b0:	468c      	mov	ip, r1
 80014b2:	44e1      	add	r9, ip
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d000      	beq.n	80014ba <__aeabi_dmul+0x15e>
 80014b8:	e11a      	b.n	80016f0 <__aeabi_dmul+0x394>
 80014ba:	2202      	movs	r2, #2
 80014bc:	2002      	movs	r0, #2
 80014be:	4317      	orrs	r7, r2
 80014c0:	2200      	movs	r2, #0
 80014c2:	e78c      	b.n	80013de <__aeabi_dmul+0x82>
 80014c4:	4313      	orrs	r3, r2
 80014c6:	d100      	bne.n	80014ca <__aeabi_dmul+0x16e>
 80014c8:	e10d      	b.n	80016e6 <__aeabi_dmul+0x38a>
 80014ca:	4643      	mov	r3, r8
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d100      	bne.n	80014d2 <__aeabi_dmul+0x176>
 80014d0:	e181      	b.n	80017d6 <__aeabi_dmul+0x47a>
 80014d2:	4640      	mov	r0, r8
 80014d4:	f000 fde4 	bl	80020a0 <__clzsi2>
 80014d8:	0002      	movs	r2, r0
 80014da:	3a0b      	subs	r2, #11
 80014dc:	2a1c      	cmp	r2, #28
 80014de:	dd00      	ble.n	80014e2 <__aeabi_dmul+0x186>
 80014e0:	e172      	b.n	80017c8 <__aeabi_dmul+0x46c>
 80014e2:	0001      	movs	r1, r0
 80014e4:	4643      	mov	r3, r8
 80014e6:	3908      	subs	r1, #8
 80014e8:	408b      	lsls	r3, r1
 80014ea:	4698      	mov	r8, r3
 80014ec:	231d      	movs	r3, #29
 80014ee:	1a9a      	subs	r2, r3, r2
 80014f0:	4653      	mov	r3, sl
 80014f2:	40d3      	lsrs	r3, r2
 80014f4:	001a      	movs	r2, r3
 80014f6:	4643      	mov	r3, r8
 80014f8:	4313      	orrs	r3, r2
 80014fa:	4652      	mov	r2, sl
 80014fc:	408a      	lsls	r2, r1
 80014fe:	4649      	mov	r1, r9
 8001500:	1a08      	subs	r0, r1, r0
 8001502:	4982      	ldr	r1, [pc, #520]	; (800170c <__aeabi_dmul+0x3b0>)
 8001504:	4689      	mov	r9, r1
 8001506:	4481      	add	r9, r0
 8001508:	2000      	movs	r0, #0
 800150a:	e768      	b.n	80013de <__aeabi_dmul+0x82>
 800150c:	4b7b      	ldr	r3, [pc, #492]	; (80016fc <__aeabi_dmul+0x3a0>)
 800150e:	2700      	movs	r7, #0
 8001510:	2600      	movs	r6, #0
 8001512:	e78e      	b.n	8001432 <__aeabi_dmul+0xd6>
 8001514:	0c14      	lsrs	r4, r2, #16
 8001516:	0412      	lsls	r2, r2, #16
 8001518:	0c12      	lsrs	r2, r2, #16
 800151a:	0011      	movs	r1, r2
 800151c:	0c37      	lsrs	r7, r6, #16
 800151e:	0436      	lsls	r6, r6, #16
 8001520:	0c35      	lsrs	r5, r6, #16
 8001522:	4379      	muls	r1, r7
 8001524:	0028      	movs	r0, r5
 8001526:	468c      	mov	ip, r1
 8001528:	002e      	movs	r6, r5
 800152a:	4360      	muls	r0, r4
 800152c:	4460      	add	r0, ip
 800152e:	4683      	mov	fp, r0
 8001530:	4356      	muls	r6, r2
 8001532:	0021      	movs	r1, r4
 8001534:	0c30      	lsrs	r0, r6, #16
 8001536:	4680      	mov	r8, r0
 8001538:	4658      	mov	r0, fp
 800153a:	4379      	muls	r1, r7
 800153c:	4440      	add	r0, r8
 800153e:	9102      	str	r1, [sp, #8]
 8001540:	4584      	cmp	ip, r0
 8001542:	d906      	bls.n	8001552 <__aeabi_dmul+0x1f6>
 8001544:	4688      	mov	r8, r1
 8001546:	2180      	movs	r1, #128	; 0x80
 8001548:	0249      	lsls	r1, r1, #9
 800154a:	468c      	mov	ip, r1
 800154c:	44e0      	add	r8, ip
 800154e:	4641      	mov	r1, r8
 8001550:	9102      	str	r1, [sp, #8]
 8001552:	0436      	lsls	r6, r6, #16
 8001554:	0c01      	lsrs	r1, r0, #16
 8001556:	0c36      	lsrs	r6, r6, #16
 8001558:	0400      	lsls	r0, r0, #16
 800155a:	468b      	mov	fp, r1
 800155c:	1981      	adds	r1, r0, r6
 800155e:	0c1e      	lsrs	r6, r3, #16
 8001560:	041b      	lsls	r3, r3, #16
 8001562:	0c1b      	lsrs	r3, r3, #16
 8001564:	9103      	str	r1, [sp, #12]
 8001566:	0019      	movs	r1, r3
 8001568:	4379      	muls	r1, r7
 800156a:	468c      	mov	ip, r1
 800156c:	0028      	movs	r0, r5
 800156e:	4375      	muls	r5, r6
 8001570:	4465      	add	r5, ip
 8001572:	46a8      	mov	r8, r5
 8001574:	4358      	muls	r0, r3
 8001576:	0c05      	lsrs	r5, r0, #16
 8001578:	4445      	add	r5, r8
 800157a:	4377      	muls	r7, r6
 800157c:	42a9      	cmp	r1, r5
 800157e:	d903      	bls.n	8001588 <__aeabi_dmul+0x22c>
 8001580:	2180      	movs	r1, #128	; 0x80
 8001582:	0249      	lsls	r1, r1, #9
 8001584:	468c      	mov	ip, r1
 8001586:	4467      	add	r7, ip
 8001588:	0c29      	lsrs	r1, r5, #16
 800158a:	468c      	mov	ip, r1
 800158c:	0039      	movs	r1, r7
 800158e:	0400      	lsls	r0, r0, #16
 8001590:	0c00      	lsrs	r0, r0, #16
 8001592:	042d      	lsls	r5, r5, #16
 8001594:	182d      	adds	r5, r5, r0
 8001596:	4461      	add	r1, ip
 8001598:	44ab      	add	fp, r5
 800159a:	9105      	str	r1, [sp, #20]
 800159c:	4659      	mov	r1, fp
 800159e:	9104      	str	r1, [sp, #16]
 80015a0:	9901      	ldr	r1, [sp, #4]
 80015a2:	040f      	lsls	r7, r1, #16
 80015a4:	0c3f      	lsrs	r7, r7, #16
 80015a6:	0c08      	lsrs	r0, r1, #16
 80015a8:	0039      	movs	r1, r7
 80015aa:	4351      	muls	r1, r2
 80015ac:	4342      	muls	r2, r0
 80015ae:	4690      	mov	r8, r2
 80015b0:	0002      	movs	r2, r0
 80015b2:	468c      	mov	ip, r1
 80015b4:	0c09      	lsrs	r1, r1, #16
 80015b6:	468b      	mov	fp, r1
 80015b8:	4362      	muls	r2, r4
 80015ba:	437c      	muls	r4, r7
 80015bc:	4444      	add	r4, r8
 80015be:	445c      	add	r4, fp
 80015c0:	45a0      	cmp	r8, r4
 80015c2:	d903      	bls.n	80015cc <__aeabi_dmul+0x270>
 80015c4:	2180      	movs	r1, #128	; 0x80
 80015c6:	0249      	lsls	r1, r1, #9
 80015c8:	4688      	mov	r8, r1
 80015ca:	4442      	add	r2, r8
 80015cc:	0c21      	lsrs	r1, r4, #16
 80015ce:	4688      	mov	r8, r1
 80015d0:	4661      	mov	r1, ip
 80015d2:	0409      	lsls	r1, r1, #16
 80015d4:	0c09      	lsrs	r1, r1, #16
 80015d6:	468c      	mov	ip, r1
 80015d8:	0039      	movs	r1, r7
 80015da:	4359      	muls	r1, r3
 80015dc:	4343      	muls	r3, r0
 80015de:	4370      	muls	r0, r6
 80015e0:	437e      	muls	r6, r7
 80015e2:	0c0f      	lsrs	r7, r1, #16
 80015e4:	18f6      	adds	r6, r6, r3
 80015e6:	0424      	lsls	r4, r4, #16
 80015e8:	19be      	adds	r6, r7, r6
 80015ea:	4464      	add	r4, ip
 80015ec:	4442      	add	r2, r8
 80015ee:	468c      	mov	ip, r1
 80015f0:	42b3      	cmp	r3, r6
 80015f2:	d903      	bls.n	80015fc <__aeabi_dmul+0x2a0>
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	025b      	lsls	r3, r3, #9
 80015f8:	4698      	mov	r8, r3
 80015fa:	4440      	add	r0, r8
 80015fc:	9b02      	ldr	r3, [sp, #8]
 80015fe:	4661      	mov	r1, ip
 8001600:	4698      	mov	r8, r3
 8001602:	9b04      	ldr	r3, [sp, #16]
 8001604:	0437      	lsls	r7, r6, #16
 8001606:	4443      	add	r3, r8
 8001608:	469b      	mov	fp, r3
 800160a:	45ab      	cmp	fp, r5
 800160c:	41ad      	sbcs	r5, r5
 800160e:	426b      	negs	r3, r5
 8001610:	040d      	lsls	r5, r1, #16
 8001612:	9905      	ldr	r1, [sp, #20]
 8001614:	0c2d      	lsrs	r5, r5, #16
 8001616:	468c      	mov	ip, r1
 8001618:	197f      	adds	r7, r7, r5
 800161a:	4467      	add	r7, ip
 800161c:	18fd      	adds	r5, r7, r3
 800161e:	46a8      	mov	r8, r5
 8001620:	465d      	mov	r5, fp
 8001622:	192d      	adds	r5, r5, r4
 8001624:	42a5      	cmp	r5, r4
 8001626:	41a4      	sbcs	r4, r4
 8001628:	4693      	mov	fp, r2
 800162a:	4264      	negs	r4, r4
 800162c:	46a4      	mov	ip, r4
 800162e:	44c3      	add	fp, r8
 8001630:	44dc      	add	ip, fp
 8001632:	428f      	cmp	r7, r1
 8001634:	41bf      	sbcs	r7, r7
 8001636:	4598      	cmp	r8, r3
 8001638:	419b      	sbcs	r3, r3
 800163a:	4593      	cmp	fp, r2
 800163c:	4192      	sbcs	r2, r2
 800163e:	45a4      	cmp	ip, r4
 8001640:	41a4      	sbcs	r4, r4
 8001642:	425b      	negs	r3, r3
 8001644:	427f      	negs	r7, r7
 8001646:	431f      	orrs	r7, r3
 8001648:	0c36      	lsrs	r6, r6, #16
 800164a:	4252      	negs	r2, r2
 800164c:	4264      	negs	r4, r4
 800164e:	19bf      	adds	r7, r7, r6
 8001650:	4322      	orrs	r2, r4
 8001652:	18bf      	adds	r7, r7, r2
 8001654:	4662      	mov	r2, ip
 8001656:	1838      	adds	r0, r7, r0
 8001658:	0243      	lsls	r3, r0, #9
 800165a:	0dd2      	lsrs	r2, r2, #23
 800165c:	9903      	ldr	r1, [sp, #12]
 800165e:	4313      	orrs	r3, r2
 8001660:	026a      	lsls	r2, r5, #9
 8001662:	430a      	orrs	r2, r1
 8001664:	1e50      	subs	r0, r2, #1
 8001666:	4182      	sbcs	r2, r0
 8001668:	4661      	mov	r1, ip
 800166a:	0ded      	lsrs	r5, r5, #23
 800166c:	432a      	orrs	r2, r5
 800166e:	024e      	lsls	r6, r1, #9
 8001670:	4332      	orrs	r2, r6
 8001672:	01d9      	lsls	r1, r3, #7
 8001674:	d400      	bmi.n	8001678 <__aeabi_dmul+0x31c>
 8001676:	e0b3      	b.n	80017e0 <__aeabi_dmul+0x484>
 8001678:	2601      	movs	r6, #1
 800167a:	0850      	lsrs	r0, r2, #1
 800167c:	4032      	ands	r2, r6
 800167e:	4302      	orrs	r2, r0
 8001680:	07de      	lsls	r6, r3, #31
 8001682:	4332      	orrs	r2, r6
 8001684:	085b      	lsrs	r3, r3, #1
 8001686:	4c22      	ldr	r4, [pc, #136]	; (8001710 <__aeabi_dmul+0x3b4>)
 8001688:	4454      	add	r4, sl
 800168a:	2c00      	cmp	r4, #0
 800168c:	dd62      	ble.n	8001754 <__aeabi_dmul+0x3f8>
 800168e:	0751      	lsls	r1, r2, #29
 8001690:	d009      	beq.n	80016a6 <__aeabi_dmul+0x34a>
 8001692:	200f      	movs	r0, #15
 8001694:	4010      	ands	r0, r2
 8001696:	2804      	cmp	r0, #4
 8001698:	d005      	beq.n	80016a6 <__aeabi_dmul+0x34a>
 800169a:	1d10      	adds	r0, r2, #4
 800169c:	4290      	cmp	r0, r2
 800169e:	4192      	sbcs	r2, r2
 80016a0:	4252      	negs	r2, r2
 80016a2:	189b      	adds	r3, r3, r2
 80016a4:	0002      	movs	r2, r0
 80016a6:	01d9      	lsls	r1, r3, #7
 80016a8:	d504      	bpl.n	80016b4 <__aeabi_dmul+0x358>
 80016aa:	2480      	movs	r4, #128	; 0x80
 80016ac:	4819      	ldr	r0, [pc, #100]	; (8001714 <__aeabi_dmul+0x3b8>)
 80016ae:	00e4      	lsls	r4, r4, #3
 80016b0:	4003      	ands	r3, r0
 80016b2:	4454      	add	r4, sl
 80016b4:	4818      	ldr	r0, [pc, #96]	; (8001718 <__aeabi_dmul+0x3bc>)
 80016b6:	4284      	cmp	r4, r0
 80016b8:	dd00      	ble.n	80016bc <__aeabi_dmul+0x360>
 80016ba:	e727      	b.n	800150c <__aeabi_dmul+0x1b0>
 80016bc:	075e      	lsls	r6, r3, #29
 80016be:	025b      	lsls	r3, r3, #9
 80016c0:	08d2      	lsrs	r2, r2, #3
 80016c2:	0b1f      	lsrs	r7, r3, #12
 80016c4:	0563      	lsls	r3, r4, #21
 80016c6:	4316      	orrs	r6, r2
 80016c8:	0d5b      	lsrs	r3, r3, #21
 80016ca:	e6b2      	b.n	8001432 <__aeabi_dmul+0xd6>
 80016cc:	2300      	movs	r3, #0
 80016ce:	4699      	mov	r9, r3
 80016d0:	3301      	adds	r3, #1
 80016d2:	2704      	movs	r7, #4
 80016d4:	2600      	movs	r6, #0
 80016d6:	469b      	mov	fp, r3
 80016d8:	e664      	b.n	80013a4 <__aeabi_dmul+0x48>
 80016da:	2303      	movs	r3, #3
 80016dc:	9701      	str	r7, [sp, #4]
 80016de:	4681      	mov	r9, r0
 80016e0:	270c      	movs	r7, #12
 80016e2:	469b      	mov	fp, r3
 80016e4:	e65e      	b.n	80013a4 <__aeabi_dmul+0x48>
 80016e6:	2201      	movs	r2, #1
 80016e8:	2001      	movs	r0, #1
 80016ea:	4317      	orrs	r7, r2
 80016ec:	2200      	movs	r2, #0
 80016ee:	e676      	b.n	80013de <__aeabi_dmul+0x82>
 80016f0:	2303      	movs	r3, #3
 80016f2:	2003      	movs	r0, #3
 80016f4:	431f      	orrs	r7, r3
 80016f6:	4643      	mov	r3, r8
 80016f8:	e671      	b.n	80013de <__aeabi_dmul+0x82>
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	000007ff 	.word	0x000007ff
 8001700:	fffffc01 	.word	0xfffffc01
 8001704:	08005aa4 	.word	0x08005aa4
 8001708:	800fffff 	.word	0x800fffff
 800170c:	fffffc0d 	.word	0xfffffc0d
 8001710:	000003ff 	.word	0x000003ff
 8001714:	feffffff 	.word	0xfeffffff
 8001718:	000007fe 	.word	0x000007fe
 800171c:	2300      	movs	r3, #0
 800171e:	2780      	movs	r7, #128	; 0x80
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	033f      	lsls	r7, r7, #12
 8001724:	2600      	movs	r6, #0
 8001726:	4b43      	ldr	r3, [pc, #268]	; (8001834 <__aeabi_dmul+0x4d8>)
 8001728:	e683      	b.n	8001432 <__aeabi_dmul+0xd6>
 800172a:	9b01      	ldr	r3, [sp, #4]
 800172c:	0032      	movs	r2, r6
 800172e:	46a4      	mov	ip, r4
 8001730:	4658      	mov	r0, fp
 8001732:	e670      	b.n	8001416 <__aeabi_dmul+0xba>
 8001734:	46ac      	mov	ip, r5
 8001736:	e66e      	b.n	8001416 <__aeabi_dmul+0xba>
 8001738:	2780      	movs	r7, #128	; 0x80
 800173a:	9901      	ldr	r1, [sp, #4]
 800173c:	033f      	lsls	r7, r7, #12
 800173e:	4239      	tst	r1, r7
 8001740:	d02d      	beq.n	800179e <__aeabi_dmul+0x442>
 8001742:	423b      	tst	r3, r7
 8001744:	d12b      	bne.n	800179e <__aeabi_dmul+0x442>
 8001746:	431f      	orrs	r7, r3
 8001748:	033f      	lsls	r7, r7, #12
 800174a:	0b3f      	lsrs	r7, r7, #12
 800174c:	9500      	str	r5, [sp, #0]
 800174e:	0016      	movs	r6, r2
 8001750:	4b38      	ldr	r3, [pc, #224]	; (8001834 <__aeabi_dmul+0x4d8>)
 8001752:	e66e      	b.n	8001432 <__aeabi_dmul+0xd6>
 8001754:	2501      	movs	r5, #1
 8001756:	1b2d      	subs	r5, r5, r4
 8001758:	2d38      	cmp	r5, #56	; 0x38
 800175a:	dd00      	ble.n	800175e <__aeabi_dmul+0x402>
 800175c:	e666      	b.n	800142c <__aeabi_dmul+0xd0>
 800175e:	2d1f      	cmp	r5, #31
 8001760:	dc40      	bgt.n	80017e4 <__aeabi_dmul+0x488>
 8001762:	4835      	ldr	r0, [pc, #212]	; (8001838 <__aeabi_dmul+0x4dc>)
 8001764:	001c      	movs	r4, r3
 8001766:	4450      	add	r0, sl
 8001768:	0016      	movs	r6, r2
 800176a:	4082      	lsls	r2, r0
 800176c:	4084      	lsls	r4, r0
 800176e:	40ee      	lsrs	r6, r5
 8001770:	1e50      	subs	r0, r2, #1
 8001772:	4182      	sbcs	r2, r0
 8001774:	4334      	orrs	r4, r6
 8001776:	4314      	orrs	r4, r2
 8001778:	40eb      	lsrs	r3, r5
 800177a:	0762      	lsls	r2, r4, #29
 800177c:	d009      	beq.n	8001792 <__aeabi_dmul+0x436>
 800177e:	220f      	movs	r2, #15
 8001780:	4022      	ands	r2, r4
 8001782:	2a04      	cmp	r2, #4
 8001784:	d005      	beq.n	8001792 <__aeabi_dmul+0x436>
 8001786:	0022      	movs	r2, r4
 8001788:	1d14      	adds	r4, r2, #4
 800178a:	4294      	cmp	r4, r2
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	181b      	adds	r3, r3, r0
 8001792:	021a      	lsls	r2, r3, #8
 8001794:	d53e      	bpl.n	8001814 <__aeabi_dmul+0x4b8>
 8001796:	2301      	movs	r3, #1
 8001798:	2700      	movs	r7, #0
 800179a:	2600      	movs	r6, #0
 800179c:	e649      	b.n	8001432 <__aeabi_dmul+0xd6>
 800179e:	2780      	movs	r7, #128	; 0x80
 80017a0:	9b01      	ldr	r3, [sp, #4]
 80017a2:	033f      	lsls	r7, r7, #12
 80017a4:	431f      	orrs	r7, r3
 80017a6:	033f      	lsls	r7, r7, #12
 80017a8:	0b3f      	lsrs	r7, r7, #12
 80017aa:	9400      	str	r4, [sp, #0]
 80017ac:	4b21      	ldr	r3, [pc, #132]	; (8001834 <__aeabi_dmul+0x4d8>)
 80017ae:	e640      	b.n	8001432 <__aeabi_dmul+0xd6>
 80017b0:	0003      	movs	r3, r0
 80017b2:	465a      	mov	r2, fp
 80017b4:	3b28      	subs	r3, #40	; 0x28
 80017b6:	409a      	lsls	r2, r3
 80017b8:	2600      	movs	r6, #0
 80017ba:	9201      	str	r2, [sp, #4]
 80017bc:	e66d      	b.n	800149a <__aeabi_dmul+0x13e>
 80017be:	4658      	mov	r0, fp
 80017c0:	f000 fc6e 	bl	80020a0 <__clzsi2>
 80017c4:	3020      	adds	r0, #32
 80017c6:	e657      	b.n	8001478 <__aeabi_dmul+0x11c>
 80017c8:	0003      	movs	r3, r0
 80017ca:	4652      	mov	r2, sl
 80017cc:	3b28      	subs	r3, #40	; 0x28
 80017ce:	409a      	lsls	r2, r3
 80017d0:	0013      	movs	r3, r2
 80017d2:	2200      	movs	r2, #0
 80017d4:	e693      	b.n	80014fe <__aeabi_dmul+0x1a2>
 80017d6:	4650      	mov	r0, sl
 80017d8:	f000 fc62 	bl	80020a0 <__clzsi2>
 80017dc:	3020      	adds	r0, #32
 80017de:	e67b      	b.n	80014d8 <__aeabi_dmul+0x17c>
 80017e0:	46ca      	mov	sl, r9
 80017e2:	e750      	b.n	8001686 <__aeabi_dmul+0x32a>
 80017e4:	201f      	movs	r0, #31
 80017e6:	001e      	movs	r6, r3
 80017e8:	4240      	negs	r0, r0
 80017ea:	1b04      	subs	r4, r0, r4
 80017ec:	40e6      	lsrs	r6, r4
 80017ee:	2d20      	cmp	r5, #32
 80017f0:	d003      	beq.n	80017fa <__aeabi_dmul+0x49e>
 80017f2:	4c12      	ldr	r4, [pc, #72]	; (800183c <__aeabi_dmul+0x4e0>)
 80017f4:	4454      	add	r4, sl
 80017f6:	40a3      	lsls	r3, r4
 80017f8:	431a      	orrs	r2, r3
 80017fa:	1e50      	subs	r0, r2, #1
 80017fc:	4182      	sbcs	r2, r0
 80017fe:	4332      	orrs	r2, r6
 8001800:	2607      	movs	r6, #7
 8001802:	2700      	movs	r7, #0
 8001804:	4016      	ands	r6, r2
 8001806:	d009      	beq.n	800181c <__aeabi_dmul+0x4c0>
 8001808:	200f      	movs	r0, #15
 800180a:	2300      	movs	r3, #0
 800180c:	4010      	ands	r0, r2
 800180e:	0014      	movs	r4, r2
 8001810:	2804      	cmp	r0, #4
 8001812:	d1b9      	bne.n	8001788 <__aeabi_dmul+0x42c>
 8001814:	0022      	movs	r2, r4
 8001816:	075e      	lsls	r6, r3, #29
 8001818:	025b      	lsls	r3, r3, #9
 800181a:	0b1f      	lsrs	r7, r3, #12
 800181c:	08d2      	lsrs	r2, r2, #3
 800181e:	4316      	orrs	r6, r2
 8001820:	2300      	movs	r3, #0
 8001822:	e606      	b.n	8001432 <__aeabi_dmul+0xd6>
 8001824:	2780      	movs	r7, #128	; 0x80
 8001826:	033f      	lsls	r7, r7, #12
 8001828:	431f      	orrs	r7, r3
 800182a:	033f      	lsls	r7, r7, #12
 800182c:	0b3f      	lsrs	r7, r7, #12
 800182e:	0016      	movs	r6, r2
 8001830:	4b00      	ldr	r3, [pc, #0]	; (8001834 <__aeabi_dmul+0x4d8>)
 8001832:	e5fe      	b.n	8001432 <__aeabi_dmul+0xd6>
 8001834:	000007ff 	.word	0x000007ff
 8001838:	0000041e 	.word	0x0000041e
 800183c:	0000043e 	.word	0x0000043e

08001840 <__aeabi_dsub>:
 8001840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001842:	4657      	mov	r7, sl
 8001844:	464e      	mov	r6, r9
 8001846:	4645      	mov	r5, r8
 8001848:	46de      	mov	lr, fp
 800184a:	000c      	movs	r4, r1
 800184c:	0309      	lsls	r1, r1, #12
 800184e:	b5e0      	push	{r5, r6, r7, lr}
 8001850:	0a49      	lsrs	r1, r1, #9
 8001852:	0f46      	lsrs	r6, r0, #29
 8001854:	005f      	lsls	r7, r3, #1
 8001856:	4331      	orrs	r1, r6
 8001858:	031e      	lsls	r6, r3, #12
 800185a:	0fdb      	lsrs	r3, r3, #31
 800185c:	0a76      	lsrs	r6, r6, #9
 800185e:	469b      	mov	fp, r3
 8001860:	0f53      	lsrs	r3, r2, #29
 8001862:	4333      	orrs	r3, r6
 8001864:	4ec8      	ldr	r6, [pc, #800]	; (8001b88 <__aeabi_dsub+0x348>)
 8001866:	0065      	lsls	r5, r4, #1
 8001868:	00c0      	lsls	r0, r0, #3
 800186a:	0fe4      	lsrs	r4, r4, #31
 800186c:	00d2      	lsls	r2, r2, #3
 800186e:	0d6d      	lsrs	r5, r5, #21
 8001870:	46a2      	mov	sl, r4
 8001872:	4681      	mov	r9, r0
 8001874:	0d7f      	lsrs	r7, r7, #21
 8001876:	469c      	mov	ip, r3
 8001878:	4690      	mov	r8, r2
 800187a:	42b7      	cmp	r7, r6
 800187c:	d100      	bne.n	8001880 <__aeabi_dsub+0x40>
 800187e:	e0b9      	b.n	80019f4 <__aeabi_dsub+0x1b4>
 8001880:	465b      	mov	r3, fp
 8001882:	2601      	movs	r6, #1
 8001884:	4073      	eors	r3, r6
 8001886:	469b      	mov	fp, r3
 8001888:	1bee      	subs	r6, r5, r7
 800188a:	45a3      	cmp	fp, r4
 800188c:	d100      	bne.n	8001890 <__aeabi_dsub+0x50>
 800188e:	e083      	b.n	8001998 <__aeabi_dsub+0x158>
 8001890:	2e00      	cmp	r6, #0
 8001892:	dd63      	ble.n	800195c <__aeabi_dsub+0x11c>
 8001894:	2f00      	cmp	r7, #0
 8001896:	d000      	beq.n	800189a <__aeabi_dsub+0x5a>
 8001898:	e0b1      	b.n	80019fe <__aeabi_dsub+0x1be>
 800189a:	4663      	mov	r3, ip
 800189c:	4313      	orrs	r3, r2
 800189e:	d100      	bne.n	80018a2 <__aeabi_dsub+0x62>
 80018a0:	e123      	b.n	8001aea <__aeabi_dsub+0x2aa>
 80018a2:	1e73      	subs	r3, r6, #1
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d000      	beq.n	80018aa <__aeabi_dsub+0x6a>
 80018a8:	e1ba      	b.n	8001c20 <__aeabi_dsub+0x3e0>
 80018aa:	1a86      	subs	r6, r0, r2
 80018ac:	4663      	mov	r3, ip
 80018ae:	42b0      	cmp	r0, r6
 80018b0:	4180      	sbcs	r0, r0
 80018b2:	2501      	movs	r5, #1
 80018b4:	1ac9      	subs	r1, r1, r3
 80018b6:	4240      	negs	r0, r0
 80018b8:	1a09      	subs	r1, r1, r0
 80018ba:	020b      	lsls	r3, r1, #8
 80018bc:	d400      	bmi.n	80018c0 <__aeabi_dsub+0x80>
 80018be:	e147      	b.n	8001b50 <__aeabi_dsub+0x310>
 80018c0:	0249      	lsls	r1, r1, #9
 80018c2:	0a4b      	lsrs	r3, r1, #9
 80018c4:	4698      	mov	r8, r3
 80018c6:	4643      	mov	r3, r8
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d100      	bne.n	80018ce <__aeabi_dsub+0x8e>
 80018cc:	e189      	b.n	8001be2 <__aeabi_dsub+0x3a2>
 80018ce:	4640      	mov	r0, r8
 80018d0:	f000 fbe6 	bl	80020a0 <__clzsi2>
 80018d4:	0003      	movs	r3, r0
 80018d6:	3b08      	subs	r3, #8
 80018d8:	2b1f      	cmp	r3, #31
 80018da:	dd00      	ble.n	80018de <__aeabi_dsub+0x9e>
 80018dc:	e17c      	b.n	8001bd8 <__aeabi_dsub+0x398>
 80018de:	2220      	movs	r2, #32
 80018e0:	0030      	movs	r0, r6
 80018e2:	1ad2      	subs	r2, r2, r3
 80018e4:	4641      	mov	r1, r8
 80018e6:	40d0      	lsrs	r0, r2
 80018e8:	4099      	lsls	r1, r3
 80018ea:	0002      	movs	r2, r0
 80018ec:	409e      	lsls	r6, r3
 80018ee:	430a      	orrs	r2, r1
 80018f0:	429d      	cmp	r5, r3
 80018f2:	dd00      	ble.n	80018f6 <__aeabi_dsub+0xb6>
 80018f4:	e16a      	b.n	8001bcc <__aeabi_dsub+0x38c>
 80018f6:	1b5d      	subs	r5, r3, r5
 80018f8:	1c6b      	adds	r3, r5, #1
 80018fa:	2b1f      	cmp	r3, #31
 80018fc:	dd00      	ble.n	8001900 <__aeabi_dsub+0xc0>
 80018fe:	e194      	b.n	8001c2a <__aeabi_dsub+0x3ea>
 8001900:	2120      	movs	r1, #32
 8001902:	0010      	movs	r0, r2
 8001904:	0035      	movs	r5, r6
 8001906:	1ac9      	subs	r1, r1, r3
 8001908:	408e      	lsls	r6, r1
 800190a:	40da      	lsrs	r2, r3
 800190c:	4088      	lsls	r0, r1
 800190e:	40dd      	lsrs	r5, r3
 8001910:	1e71      	subs	r1, r6, #1
 8001912:	418e      	sbcs	r6, r1
 8001914:	0011      	movs	r1, r2
 8001916:	2207      	movs	r2, #7
 8001918:	4328      	orrs	r0, r5
 800191a:	2500      	movs	r5, #0
 800191c:	4306      	orrs	r6, r0
 800191e:	4032      	ands	r2, r6
 8001920:	2a00      	cmp	r2, #0
 8001922:	d009      	beq.n	8001938 <__aeabi_dsub+0xf8>
 8001924:	230f      	movs	r3, #15
 8001926:	4033      	ands	r3, r6
 8001928:	2b04      	cmp	r3, #4
 800192a:	d005      	beq.n	8001938 <__aeabi_dsub+0xf8>
 800192c:	1d33      	adds	r3, r6, #4
 800192e:	42b3      	cmp	r3, r6
 8001930:	41b6      	sbcs	r6, r6
 8001932:	4276      	negs	r6, r6
 8001934:	1989      	adds	r1, r1, r6
 8001936:	001e      	movs	r6, r3
 8001938:	020b      	lsls	r3, r1, #8
 800193a:	d400      	bmi.n	800193e <__aeabi_dsub+0xfe>
 800193c:	e23d      	b.n	8001dba <__aeabi_dsub+0x57a>
 800193e:	1c6a      	adds	r2, r5, #1
 8001940:	4b91      	ldr	r3, [pc, #580]	; (8001b88 <__aeabi_dsub+0x348>)
 8001942:	0555      	lsls	r5, r2, #21
 8001944:	0d6d      	lsrs	r5, r5, #21
 8001946:	429a      	cmp	r2, r3
 8001948:	d100      	bne.n	800194c <__aeabi_dsub+0x10c>
 800194a:	e119      	b.n	8001b80 <__aeabi_dsub+0x340>
 800194c:	4a8f      	ldr	r2, [pc, #572]	; (8001b8c <__aeabi_dsub+0x34c>)
 800194e:	08f6      	lsrs	r6, r6, #3
 8001950:	400a      	ands	r2, r1
 8001952:	0757      	lsls	r7, r2, #29
 8001954:	0252      	lsls	r2, r2, #9
 8001956:	4337      	orrs	r7, r6
 8001958:	0b12      	lsrs	r2, r2, #12
 800195a:	e09b      	b.n	8001a94 <__aeabi_dsub+0x254>
 800195c:	2e00      	cmp	r6, #0
 800195e:	d000      	beq.n	8001962 <__aeabi_dsub+0x122>
 8001960:	e0c5      	b.n	8001aee <__aeabi_dsub+0x2ae>
 8001962:	1c6e      	adds	r6, r5, #1
 8001964:	0576      	lsls	r6, r6, #21
 8001966:	0d76      	lsrs	r6, r6, #21
 8001968:	2e01      	cmp	r6, #1
 800196a:	dc00      	bgt.n	800196e <__aeabi_dsub+0x12e>
 800196c:	e148      	b.n	8001c00 <__aeabi_dsub+0x3c0>
 800196e:	4667      	mov	r7, ip
 8001970:	1a86      	subs	r6, r0, r2
 8001972:	1bcb      	subs	r3, r1, r7
 8001974:	42b0      	cmp	r0, r6
 8001976:	41bf      	sbcs	r7, r7
 8001978:	427f      	negs	r7, r7
 800197a:	46b8      	mov	r8, r7
 800197c:	001f      	movs	r7, r3
 800197e:	4643      	mov	r3, r8
 8001980:	1aff      	subs	r7, r7, r3
 8001982:	003b      	movs	r3, r7
 8001984:	46b8      	mov	r8, r7
 8001986:	021b      	lsls	r3, r3, #8
 8001988:	d500      	bpl.n	800198c <__aeabi_dsub+0x14c>
 800198a:	e15f      	b.n	8001c4c <__aeabi_dsub+0x40c>
 800198c:	4337      	orrs	r7, r6
 800198e:	d19a      	bne.n	80018c6 <__aeabi_dsub+0x86>
 8001990:	2200      	movs	r2, #0
 8001992:	2400      	movs	r4, #0
 8001994:	2500      	movs	r5, #0
 8001996:	e079      	b.n	8001a8c <__aeabi_dsub+0x24c>
 8001998:	2e00      	cmp	r6, #0
 800199a:	dc00      	bgt.n	800199e <__aeabi_dsub+0x15e>
 800199c:	e0fa      	b.n	8001b94 <__aeabi_dsub+0x354>
 800199e:	2f00      	cmp	r7, #0
 80019a0:	d100      	bne.n	80019a4 <__aeabi_dsub+0x164>
 80019a2:	e08d      	b.n	8001ac0 <__aeabi_dsub+0x280>
 80019a4:	4b78      	ldr	r3, [pc, #480]	; (8001b88 <__aeabi_dsub+0x348>)
 80019a6:	429d      	cmp	r5, r3
 80019a8:	d067      	beq.n	8001a7a <__aeabi_dsub+0x23a>
 80019aa:	2380      	movs	r3, #128	; 0x80
 80019ac:	4667      	mov	r7, ip
 80019ae:	041b      	lsls	r3, r3, #16
 80019b0:	431f      	orrs	r7, r3
 80019b2:	46bc      	mov	ip, r7
 80019b4:	2e38      	cmp	r6, #56	; 0x38
 80019b6:	dc00      	bgt.n	80019ba <__aeabi_dsub+0x17a>
 80019b8:	e152      	b.n	8001c60 <__aeabi_dsub+0x420>
 80019ba:	4663      	mov	r3, ip
 80019bc:	4313      	orrs	r3, r2
 80019be:	1e5a      	subs	r2, r3, #1
 80019c0:	4193      	sbcs	r3, r2
 80019c2:	181e      	adds	r6, r3, r0
 80019c4:	4286      	cmp	r6, r0
 80019c6:	4180      	sbcs	r0, r0
 80019c8:	4240      	negs	r0, r0
 80019ca:	1809      	adds	r1, r1, r0
 80019cc:	020b      	lsls	r3, r1, #8
 80019ce:	d400      	bmi.n	80019d2 <__aeabi_dsub+0x192>
 80019d0:	e0be      	b.n	8001b50 <__aeabi_dsub+0x310>
 80019d2:	4b6d      	ldr	r3, [pc, #436]	; (8001b88 <__aeabi_dsub+0x348>)
 80019d4:	3501      	adds	r5, #1
 80019d6:	429d      	cmp	r5, r3
 80019d8:	d100      	bne.n	80019dc <__aeabi_dsub+0x19c>
 80019da:	e0d2      	b.n	8001b82 <__aeabi_dsub+0x342>
 80019dc:	4a6b      	ldr	r2, [pc, #428]	; (8001b8c <__aeabi_dsub+0x34c>)
 80019de:	0873      	lsrs	r3, r6, #1
 80019e0:	400a      	ands	r2, r1
 80019e2:	2101      	movs	r1, #1
 80019e4:	400e      	ands	r6, r1
 80019e6:	431e      	orrs	r6, r3
 80019e8:	0851      	lsrs	r1, r2, #1
 80019ea:	07d3      	lsls	r3, r2, #31
 80019ec:	2207      	movs	r2, #7
 80019ee:	431e      	orrs	r6, r3
 80019f0:	4032      	ands	r2, r6
 80019f2:	e795      	b.n	8001920 <__aeabi_dsub+0xe0>
 80019f4:	001e      	movs	r6, r3
 80019f6:	4316      	orrs	r6, r2
 80019f8:	d000      	beq.n	80019fc <__aeabi_dsub+0x1bc>
 80019fa:	e745      	b.n	8001888 <__aeabi_dsub+0x48>
 80019fc:	e740      	b.n	8001880 <__aeabi_dsub+0x40>
 80019fe:	4b62      	ldr	r3, [pc, #392]	; (8001b88 <__aeabi_dsub+0x348>)
 8001a00:	429d      	cmp	r5, r3
 8001a02:	d03a      	beq.n	8001a7a <__aeabi_dsub+0x23a>
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	4667      	mov	r7, ip
 8001a08:	041b      	lsls	r3, r3, #16
 8001a0a:	431f      	orrs	r7, r3
 8001a0c:	46bc      	mov	ip, r7
 8001a0e:	2e38      	cmp	r6, #56	; 0x38
 8001a10:	dd00      	ble.n	8001a14 <__aeabi_dsub+0x1d4>
 8001a12:	e0eb      	b.n	8001bec <__aeabi_dsub+0x3ac>
 8001a14:	2e1f      	cmp	r6, #31
 8001a16:	dc00      	bgt.n	8001a1a <__aeabi_dsub+0x1da>
 8001a18:	e13a      	b.n	8001c90 <__aeabi_dsub+0x450>
 8001a1a:	0033      	movs	r3, r6
 8001a1c:	4667      	mov	r7, ip
 8001a1e:	3b20      	subs	r3, #32
 8001a20:	40df      	lsrs	r7, r3
 8001a22:	003b      	movs	r3, r7
 8001a24:	2e20      	cmp	r6, #32
 8001a26:	d005      	beq.n	8001a34 <__aeabi_dsub+0x1f4>
 8001a28:	2740      	movs	r7, #64	; 0x40
 8001a2a:	1bbf      	subs	r7, r7, r6
 8001a2c:	4666      	mov	r6, ip
 8001a2e:	40be      	lsls	r6, r7
 8001a30:	4332      	orrs	r2, r6
 8001a32:	4690      	mov	r8, r2
 8001a34:	4646      	mov	r6, r8
 8001a36:	1e72      	subs	r2, r6, #1
 8001a38:	4196      	sbcs	r6, r2
 8001a3a:	4333      	orrs	r3, r6
 8001a3c:	e0da      	b.n	8001bf4 <__aeabi_dsub+0x3b4>
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d100      	bne.n	8001a44 <__aeabi_dsub+0x204>
 8001a42:	e214      	b.n	8001e6e <__aeabi_dsub+0x62e>
 8001a44:	4663      	mov	r3, ip
 8001a46:	4313      	orrs	r3, r2
 8001a48:	d100      	bne.n	8001a4c <__aeabi_dsub+0x20c>
 8001a4a:	e168      	b.n	8001d1e <__aeabi_dsub+0x4de>
 8001a4c:	2380      	movs	r3, #128	; 0x80
 8001a4e:	074e      	lsls	r6, r1, #29
 8001a50:	08c0      	lsrs	r0, r0, #3
 8001a52:	08c9      	lsrs	r1, r1, #3
 8001a54:	031b      	lsls	r3, r3, #12
 8001a56:	4306      	orrs	r6, r0
 8001a58:	4219      	tst	r1, r3
 8001a5a:	d008      	beq.n	8001a6e <__aeabi_dsub+0x22e>
 8001a5c:	4660      	mov	r0, ip
 8001a5e:	08c0      	lsrs	r0, r0, #3
 8001a60:	4218      	tst	r0, r3
 8001a62:	d104      	bne.n	8001a6e <__aeabi_dsub+0x22e>
 8001a64:	4663      	mov	r3, ip
 8001a66:	0001      	movs	r1, r0
 8001a68:	08d2      	lsrs	r2, r2, #3
 8001a6a:	075e      	lsls	r6, r3, #29
 8001a6c:	4316      	orrs	r6, r2
 8001a6e:	00f3      	lsls	r3, r6, #3
 8001a70:	4699      	mov	r9, r3
 8001a72:	00c9      	lsls	r1, r1, #3
 8001a74:	0f72      	lsrs	r2, r6, #29
 8001a76:	4d44      	ldr	r5, [pc, #272]	; (8001b88 <__aeabi_dsub+0x348>)
 8001a78:	4311      	orrs	r1, r2
 8001a7a:	464b      	mov	r3, r9
 8001a7c:	08de      	lsrs	r6, r3, #3
 8001a7e:	4b42      	ldr	r3, [pc, #264]	; (8001b88 <__aeabi_dsub+0x348>)
 8001a80:	074f      	lsls	r7, r1, #29
 8001a82:	4337      	orrs	r7, r6
 8001a84:	08ca      	lsrs	r2, r1, #3
 8001a86:	429d      	cmp	r5, r3
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dsub+0x24c>
 8001a8a:	e06e      	b.n	8001b6a <__aeabi_dsub+0x32a>
 8001a8c:	0312      	lsls	r2, r2, #12
 8001a8e:	056d      	lsls	r5, r5, #21
 8001a90:	0b12      	lsrs	r2, r2, #12
 8001a92:	0d6d      	lsrs	r5, r5, #21
 8001a94:	2100      	movs	r1, #0
 8001a96:	0312      	lsls	r2, r2, #12
 8001a98:	0b13      	lsrs	r3, r2, #12
 8001a9a:	0d0a      	lsrs	r2, r1, #20
 8001a9c:	0512      	lsls	r2, r2, #20
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	4b3b      	ldr	r3, [pc, #236]	; (8001b90 <__aeabi_dsub+0x350>)
 8001aa2:	052d      	lsls	r5, r5, #20
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	432b      	orrs	r3, r5
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	07e4      	lsls	r4, r4, #31
 8001aac:	085b      	lsrs	r3, r3, #1
 8001aae:	4323      	orrs	r3, r4
 8001ab0:	0038      	movs	r0, r7
 8001ab2:	0019      	movs	r1, r3
 8001ab4:	bc3c      	pop	{r2, r3, r4, r5}
 8001ab6:	4690      	mov	r8, r2
 8001ab8:	4699      	mov	r9, r3
 8001aba:	46a2      	mov	sl, r4
 8001abc:	46ab      	mov	fp, r5
 8001abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ac0:	4663      	mov	r3, ip
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	d011      	beq.n	8001aea <__aeabi_dsub+0x2aa>
 8001ac6:	1e73      	subs	r3, r6, #1
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d000      	beq.n	8001ace <__aeabi_dsub+0x28e>
 8001acc:	e107      	b.n	8001cde <__aeabi_dsub+0x49e>
 8001ace:	1886      	adds	r6, r0, r2
 8001ad0:	4286      	cmp	r6, r0
 8001ad2:	4180      	sbcs	r0, r0
 8001ad4:	4461      	add	r1, ip
 8001ad6:	4240      	negs	r0, r0
 8001ad8:	1809      	adds	r1, r1, r0
 8001ada:	2501      	movs	r5, #1
 8001adc:	020b      	lsls	r3, r1, #8
 8001ade:	d537      	bpl.n	8001b50 <__aeabi_dsub+0x310>
 8001ae0:	2502      	movs	r5, #2
 8001ae2:	e77b      	b.n	80019dc <__aeabi_dsub+0x19c>
 8001ae4:	003e      	movs	r6, r7
 8001ae6:	4661      	mov	r1, ip
 8001ae8:	4691      	mov	r9, r2
 8001aea:	0035      	movs	r5, r6
 8001aec:	e7c5      	b.n	8001a7a <__aeabi_dsub+0x23a>
 8001aee:	465c      	mov	r4, fp
 8001af0:	2d00      	cmp	r5, #0
 8001af2:	d000      	beq.n	8001af6 <__aeabi_dsub+0x2b6>
 8001af4:	e0e1      	b.n	8001cba <__aeabi_dsub+0x47a>
 8001af6:	000b      	movs	r3, r1
 8001af8:	4303      	orrs	r3, r0
 8001afa:	d0f3      	beq.n	8001ae4 <__aeabi_dsub+0x2a4>
 8001afc:	1c73      	adds	r3, r6, #1
 8001afe:	d100      	bne.n	8001b02 <__aeabi_dsub+0x2c2>
 8001b00:	e1ac      	b.n	8001e5c <__aeabi_dsub+0x61c>
 8001b02:	4b21      	ldr	r3, [pc, #132]	; (8001b88 <__aeabi_dsub+0x348>)
 8001b04:	429f      	cmp	r7, r3
 8001b06:	d100      	bne.n	8001b0a <__aeabi_dsub+0x2ca>
 8001b08:	e13a      	b.n	8001d80 <__aeabi_dsub+0x540>
 8001b0a:	43f3      	mvns	r3, r6
 8001b0c:	2b38      	cmp	r3, #56	; 0x38
 8001b0e:	dd00      	ble.n	8001b12 <__aeabi_dsub+0x2d2>
 8001b10:	e16f      	b.n	8001df2 <__aeabi_dsub+0x5b2>
 8001b12:	2b1f      	cmp	r3, #31
 8001b14:	dd00      	ble.n	8001b18 <__aeabi_dsub+0x2d8>
 8001b16:	e18c      	b.n	8001e32 <__aeabi_dsub+0x5f2>
 8001b18:	2520      	movs	r5, #32
 8001b1a:	000e      	movs	r6, r1
 8001b1c:	1aed      	subs	r5, r5, r3
 8001b1e:	40ae      	lsls	r6, r5
 8001b20:	46b0      	mov	r8, r6
 8001b22:	0006      	movs	r6, r0
 8001b24:	46aa      	mov	sl, r5
 8001b26:	40de      	lsrs	r6, r3
 8001b28:	4645      	mov	r5, r8
 8001b2a:	4335      	orrs	r5, r6
 8001b2c:	002e      	movs	r6, r5
 8001b2e:	4655      	mov	r5, sl
 8001b30:	40d9      	lsrs	r1, r3
 8001b32:	40a8      	lsls	r0, r5
 8001b34:	4663      	mov	r3, ip
 8001b36:	1e45      	subs	r5, r0, #1
 8001b38:	41a8      	sbcs	r0, r5
 8001b3a:	1a5b      	subs	r3, r3, r1
 8001b3c:	469c      	mov	ip, r3
 8001b3e:	4330      	orrs	r0, r6
 8001b40:	1a16      	subs	r6, r2, r0
 8001b42:	42b2      	cmp	r2, r6
 8001b44:	4192      	sbcs	r2, r2
 8001b46:	4663      	mov	r3, ip
 8001b48:	4252      	negs	r2, r2
 8001b4a:	1a99      	subs	r1, r3, r2
 8001b4c:	003d      	movs	r5, r7
 8001b4e:	e6b4      	b.n	80018ba <__aeabi_dsub+0x7a>
 8001b50:	2207      	movs	r2, #7
 8001b52:	4032      	ands	r2, r6
 8001b54:	2a00      	cmp	r2, #0
 8001b56:	d000      	beq.n	8001b5a <__aeabi_dsub+0x31a>
 8001b58:	e6e4      	b.n	8001924 <__aeabi_dsub+0xe4>
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <__aeabi_dsub+0x348>)
 8001b5c:	08f6      	lsrs	r6, r6, #3
 8001b5e:	074f      	lsls	r7, r1, #29
 8001b60:	4337      	orrs	r7, r6
 8001b62:	08ca      	lsrs	r2, r1, #3
 8001b64:	429d      	cmp	r5, r3
 8001b66:	d000      	beq.n	8001b6a <__aeabi_dsub+0x32a>
 8001b68:	e790      	b.n	8001a8c <__aeabi_dsub+0x24c>
 8001b6a:	003b      	movs	r3, r7
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dsub+0x332>
 8001b70:	e1a6      	b.n	8001ec0 <__aeabi_dsub+0x680>
 8001b72:	2380      	movs	r3, #128	; 0x80
 8001b74:	031b      	lsls	r3, r3, #12
 8001b76:	431a      	orrs	r2, r3
 8001b78:	0312      	lsls	r2, r2, #12
 8001b7a:	0b12      	lsrs	r2, r2, #12
 8001b7c:	4d02      	ldr	r5, [pc, #8]	; (8001b88 <__aeabi_dsub+0x348>)
 8001b7e:	e789      	b.n	8001a94 <__aeabi_dsub+0x254>
 8001b80:	0015      	movs	r5, r2
 8001b82:	2200      	movs	r2, #0
 8001b84:	2700      	movs	r7, #0
 8001b86:	e785      	b.n	8001a94 <__aeabi_dsub+0x254>
 8001b88:	000007ff 	.word	0x000007ff
 8001b8c:	ff7fffff 	.word	0xff7fffff
 8001b90:	800fffff 	.word	0x800fffff
 8001b94:	2e00      	cmp	r6, #0
 8001b96:	d000      	beq.n	8001b9a <__aeabi_dsub+0x35a>
 8001b98:	e0c7      	b.n	8001d2a <__aeabi_dsub+0x4ea>
 8001b9a:	1c6b      	adds	r3, r5, #1
 8001b9c:	055e      	lsls	r6, r3, #21
 8001b9e:	0d76      	lsrs	r6, r6, #21
 8001ba0:	2e01      	cmp	r6, #1
 8001ba2:	dc00      	bgt.n	8001ba6 <__aeabi_dsub+0x366>
 8001ba4:	e0f0      	b.n	8001d88 <__aeabi_dsub+0x548>
 8001ba6:	4dc8      	ldr	r5, [pc, #800]	; (8001ec8 <__aeabi_dsub+0x688>)
 8001ba8:	42ab      	cmp	r3, r5
 8001baa:	d100      	bne.n	8001bae <__aeabi_dsub+0x36e>
 8001bac:	e0b9      	b.n	8001d22 <__aeabi_dsub+0x4e2>
 8001bae:	1885      	adds	r5, r0, r2
 8001bb0:	000a      	movs	r2, r1
 8001bb2:	4285      	cmp	r5, r0
 8001bb4:	4189      	sbcs	r1, r1
 8001bb6:	4462      	add	r2, ip
 8001bb8:	4249      	negs	r1, r1
 8001bba:	1851      	adds	r1, r2, r1
 8001bbc:	2207      	movs	r2, #7
 8001bbe:	07ce      	lsls	r6, r1, #31
 8001bc0:	086d      	lsrs	r5, r5, #1
 8001bc2:	432e      	orrs	r6, r5
 8001bc4:	0849      	lsrs	r1, r1, #1
 8001bc6:	4032      	ands	r2, r6
 8001bc8:	001d      	movs	r5, r3
 8001bca:	e6a9      	b.n	8001920 <__aeabi_dsub+0xe0>
 8001bcc:	49bf      	ldr	r1, [pc, #764]	; (8001ecc <__aeabi_dsub+0x68c>)
 8001bce:	1aed      	subs	r5, r5, r3
 8001bd0:	4011      	ands	r1, r2
 8001bd2:	2207      	movs	r2, #7
 8001bd4:	4032      	ands	r2, r6
 8001bd6:	e6a3      	b.n	8001920 <__aeabi_dsub+0xe0>
 8001bd8:	0032      	movs	r2, r6
 8001bda:	3828      	subs	r0, #40	; 0x28
 8001bdc:	4082      	lsls	r2, r0
 8001bde:	2600      	movs	r6, #0
 8001be0:	e686      	b.n	80018f0 <__aeabi_dsub+0xb0>
 8001be2:	0030      	movs	r0, r6
 8001be4:	f000 fa5c 	bl	80020a0 <__clzsi2>
 8001be8:	3020      	adds	r0, #32
 8001bea:	e673      	b.n	80018d4 <__aeabi_dsub+0x94>
 8001bec:	4663      	mov	r3, ip
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	1e5a      	subs	r2, r3, #1
 8001bf2:	4193      	sbcs	r3, r2
 8001bf4:	1ac6      	subs	r6, r0, r3
 8001bf6:	42b0      	cmp	r0, r6
 8001bf8:	4180      	sbcs	r0, r0
 8001bfa:	4240      	negs	r0, r0
 8001bfc:	1a09      	subs	r1, r1, r0
 8001bfe:	e65c      	b.n	80018ba <__aeabi_dsub+0x7a>
 8001c00:	000e      	movs	r6, r1
 8001c02:	4667      	mov	r7, ip
 8001c04:	4306      	orrs	r6, r0
 8001c06:	4317      	orrs	r7, r2
 8001c08:	2d00      	cmp	r5, #0
 8001c0a:	d15e      	bne.n	8001cca <__aeabi_dsub+0x48a>
 8001c0c:	2e00      	cmp	r6, #0
 8001c0e:	d000      	beq.n	8001c12 <__aeabi_dsub+0x3d2>
 8001c10:	e0f3      	b.n	8001dfa <__aeabi_dsub+0x5ba>
 8001c12:	2f00      	cmp	r7, #0
 8001c14:	d100      	bne.n	8001c18 <__aeabi_dsub+0x3d8>
 8001c16:	e11e      	b.n	8001e56 <__aeabi_dsub+0x616>
 8001c18:	465c      	mov	r4, fp
 8001c1a:	4661      	mov	r1, ip
 8001c1c:	4691      	mov	r9, r2
 8001c1e:	e72c      	b.n	8001a7a <__aeabi_dsub+0x23a>
 8001c20:	4fa9      	ldr	r7, [pc, #676]	; (8001ec8 <__aeabi_dsub+0x688>)
 8001c22:	42be      	cmp	r6, r7
 8001c24:	d07b      	beq.n	8001d1e <__aeabi_dsub+0x4de>
 8001c26:	001e      	movs	r6, r3
 8001c28:	e6f1      	b.n	8001a0e <__aeabi_dsub+0x1ce>
 8001c2a:	0010      	movs	r0, r2
 8001c2c:	3d1f      	subs	r5, #31
 8001c2e:	40e8      	lsrs	r0, r5
 8001c30:	2b20      	cmp	r3, #32
 8001c32:	d003      	beq.n	8001c3c <__aeabi_dsub+0x3fc>
 8001c34:	2140      	movs	r1, #64	; 0x40
 8001c36:	1acb      	subs	r3, r1, r3
 8001c38:	409a      	lsls	r2, r3
 8001c3a:	4316      	orrs	r6, r2
 8001c3c:	1e73      	subs	r3, r6, #1
 8001c3e:	419e      	sbcs	r6, r3
 8001c40:	2207      	movs	r2, #7
 8001c42:	4306      	orrs	r6, r0
 8001c44:	4032      	ands	r2, r6
 8001c46:	2100      	movs	r1, #0
 8001c48:	2500      	movs	r5, #0
 8001c4a:	e783      	b.n	8001b54 <__aeabi_dsub+0x314>
 8001c4c:	1a16      	subs	r6, r2, r0
 8001c4e:	4663      	mov	r3, ip
 8001c50:	42b2      	cmp	r2, r6
 8001c52:	4180      	sbcs	r0, r0
 8001c54:	1a59      	subs	r1, r3, r1
 8001c56:	4240      	negs	r0, r0
 8001c58:	1a0b      	subs	r3, r1, r0
 8001c5a:	4698      	mov	r8, r3
 8001c5c:	465c      	mov	r4, fp
 8001c5e:	e632      	b.n	80018c6 <__aeabi_dsub+0x86>
 8001c60:	2e1f      	cmp	r6, #31
 8001c62:	dd00      	ble.n	8001c66 <__aeabi_dsub+0x426>
 8001c64:	e0ab      	b.n	8001dbe <__aeabi_dsub+0x57e>
 8001c66:	2720      	movs	r7, #32
 8001c68:	1bbb      	subs	r3, r7, r6
 8001c6a:	469a      	mov	sl, r3
 8001c6c:	4663      	mov	r3, ip
 8001c6e:	4657      	mov	r7, sl
 8001c70:	40bb      	lsls	r3, r7
 8001c72:	4699      	mov	r9, r3
 8001c74:	0013      	movs	r3, r2
 8001c76:	464f      	mov	r7, r9
 8001c78:	40f3      	lsrs	r3, r6
 8001c7a:	431f      	orrs	r7, r3
 8001c7c:	003b      	movs	r3, r7
 8001c7e:	4657      	mov	r7, sl
 8001c80:	40ba      	lsls	r2, r7
 8001c82:	1e57      	subs	r7, r2, #1
 8001c84:	41ba      	sbcs	r2, r7
 8001c86:	4313      	orrs	r3, r2
 8001c88:	4662      	mov	r2, ip
 8001c8a:	40f2      	lsrs	r2, r6
 8001c8c:	1889      	adds	r1, r1, r2
 8001c8e:	e698      	b.n	80019c2 <__aeabi_dsub+0x182>
 8001c90:	2720      	movs	r7, #32
 8001c92:	1bbb      	subs	r3, r7, r6
 8001c94:	469a      	mov	sl, r3
 8001c96:	4663      	mov	r3, ip
 8001c98:	4657      	mov	r7, sl
 8001c9a:	40bb      	lsls	r3, r7
 8001c9c:	4699      	mov	r9, r3
 8001c9e:	0013      	movs	r3, r2
 8001ca0:	464f      	mov	r7, r9
 8001ca2:	40f3      	lsrs	r3, r6
 8001ca4:	431f      	orrs	r7, r3
 8001ca6:	003b      	movs	r3, r7
 8001ca8:	4657      	mov	r7, sl
 8001caa:	40ba      	lsls	r2, r7
 8001cac:	1e57      	subs	r7, r2, #1
 8001cae:	41ba      	sbcs	r2, r7
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	4662      	mov	r2, ip
 8001cb4:	40f2      	lsrs	r2, r6
 8001cb6:	1a89      	subs	r1, r1, r2
 8001cb8:	e79c      	b.n	8001bf4 <__aeabi_dsub+0x3b4>
 8001cba:	4b83      	ldr	r3, [pc, #524]	; (8001ec8 <__aeabi_dsub+0x688>)
 8001cbc:	429f      	cmp	r7, r3
 8001cbe:	d05f      	beq.n	8001d80 <__aeabi_dsub+0x540>
 8001cc0:	2580      	movs	r5, #128	; 0x80
 8001cc2:	042d      	lsls	r5, r5, #16
 8001cc4:	4273      	negs	r3, r6
 8001cc6:	4329      	orrs	r1, r5
 8001cc8:	e720      	b.n	8001b0c <__aeabi_dsub+0x2cc>
 8001cca:	2e00      	cmp	r6, #0
 8001ccc:	d10c      	bne.n	8001ce8 <__aeabi_dsub+0x4a8>
 8001cce:	2f00      	cmp	r7, #0
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dsub+0x494>
 8001cd2:	e0d0      	b.n	8001e76 <__aeabi_dsub+0x636>
 8001cd4:	465c      	mov	r4, fp
 8001cd6:	4661      	mov	r1, ip
 8001cd8:	4691      	mov	r9, r2
 8001cda:	4d7b      	ldr	r5, [pc, #492]	; (8001ec8 <__aeabi_dsub+0x688>)
 8001cdc:	e6cd      	b.n	8001a7a <__aeabi_dsub+0x23a>
 8001cde:	4f7a      	ldr	r7, [pc, #488]	; (8001ec8 <__aeabi_dsub+0x688>)
 8001ce0:	42be      	cmp	r6, r7
 8001ce2:	d01c      	beq.n	8001d1e <__aeabi_dsub+0x4de>
 8001ce4:	001e      	movs	r6, r3
 8001ce6:	e665      	b.n	80019b4 <__aeabi_dsub+0x174>
 8001ce8:	2f00      	cmp	r7, #0
 8001cea:	d018      	beq.n	8001d1e <__aeabi_dsub+0x4de>
 8001cec:	08c0      	lsrs	r0, r0, #3
 8001cee:	074e      	lsls	r6, r1, #29
 8001cf0:	4306      	orrs	r6, r0
 8001cf2:	2080      	movs	r0, #128	; 0x80
 8001cf4:	08c9      	lsrs	r1, r1, #3
 8001cf6:	0300      	lsls	r0, r0, #12
 8001cf8:	4201      	tst	r1, r0
 8001cfa:	d008      	beq.n	8001d0e <__aeabi_dsub+0x4ce>
 8001cfc:	4663      	mov	r3, ip
 8001cfe:	08dc      	lsrs	r4, r3, #3
 8001d00:	4204      	tst	r4, r0
 8001d02:	d104      	bne.n	8001d0e <__aeabi_dsub+0x4ce>
 8001d04:	0021      	movs	r1, r4
 8001d06:	46da      	mov	sl, fp
 8001d08:	08d2      	lsrs	r2, r2, #3
 8001d0a:	075e      	lsls	r6, r3, #29
 8001d0c:	4316      	orrs	r6, r2
 8001d0e:	00f3      	lsls	r3, r6, #3
 8001d10:	4699      	mov	r9, r3
 8001d12:	2401      	movs	r4, #1
 8001d14:	4653      	mov	r3, sl
 8001d16:	00c9      	lsls	r1, r1, #3
 8001d18:	0f72      	lsrs	r2, r6, #29
 8001d1a:	4311      	orrs	r1, r2
 8001d1c:	401c      	ands	r4, r3
 8001d1e:	4d6a      	ldr	r5, [pc, #424]	; (8001ec8 <__aeabi_dsub+0x688>)
 8001d20:	e6ab      	b.n	8001a7a <__aeabi_dsub+0x23a>
 8001d22:	001d      	movs	r5, r3
 8001d24:	2200      	movs	r2, #0
 8001d26:	2700      	movs	r7, #0
 8001d28:	e6b4      	b.n	8001a94 <__aeabi_dsub+0x254>
 8001d2a:	2d00      	cmp	r5, #0
 8001d2c:	d159      	bne.n	8001de2 <__aeabi_dsub+0x5a2>
 8001d2e:	000b      	movs	r3, r1
 8001d30:	4303      	orrs	r3, r0
 8001d32:	d100      	bne.n	8001d36 <__aeabi_dsub+0x4f6>
 8001d34:	e6d6      	b.n	8001ae4 <__aeabi_dsub+0x2a4>
 8001d36:	1c73      	adds	r3, r6, #1
 8001d38:	d100      	bne.n	8001d3c <__aeabi_dsub+0x4fc>
 8001d3a:	e0b2      	b.n	8001ea2 <__aeabi_dsub+0x662>
 8001d3c:	4b62      	ldr	r3, [pc, #392]	; (8001ec8 <__aeabi_dsub+0x688>)
 8001d3e:	429f      	cmp	r7, r3
 8001d40:	d01e      	beq.n	8001d80 <__aeabi_dsub+0x540>
 8001d42:	43f3      	mvns	r3, r6
 8001d44:	2b38      	cmp	r3, #56	; 0x38
 8001d46:	dc6f      	bgt.n	8001e28 <__aeabi_dsub+0x5e8>
 8001d48:	2b1f      	cmp	r3, #31
 8001d4a:	dd00      	ble.n	8001d4e <__aeabi_dsub+0x50e>
 8001d4c:	e097      	b.n	8001e7e <__aeabi_dsub+0x63e>
 8001d4e:	2520      	movs	r5, #32
 8001d50:	000e      	movs	r6, r1
 8001d52:	1aed      	subs	r5, r5, r3
 8001d54:	40ae      	lsls	r6, r5
 8001d56:	46b0      	mov	r8, r6
 8001d58:	0006      	movs	r6, r0
 8001d5a:	46aa      	mov	sl, r5
 8001d5c:	40de      	lsrs	r6, r3
 8001d5e:	4645      	mov	r5, r8
 8001d60:	4335      	orrs	r5, r6
 8001d62:	002e      	movs	r6, r5
 8001d64:	4655      	mov	r5, sl
 8001d66:	40a8      	lsls	r0, r5
 8001d68:	40d9      	lsrs	r1, r3
 8001d6a:	1e45      	subs	r5, r0, #1
 8001d6c:	41a8      	sbcs	r0, r5
 8001d6e:	448c      	add	ip, r1
 8001d70:	4306      	orrs	r6, r0
 8001d72:	18b6      	adds	r6, r6, r2
 8001d74:	4296      	cmp	r6, r2
 8001d76:	4192      	sbcs	r2, r2
 8001d78:	4251      	negs	r1, r2
 8001d7a:	4461      	add	r1, ip
 8001d7c:	003d      	movs	r5, r7
 8001d7e:	e625      	b.n	80019cc <__aeabi_dsub+0x18c>
 8001d80:	003d      	movs	r5, r7
 8001d82:	4661      	mov	r1, ip
 8001d84:	4691      	mov	r9, r2
 8001d86:	e678      	b.n	8001a7a <__aeabi_dsub+0x23a>
 8001d88:	000b      	movs	r3, r1
 8001d8a:	4303      	orrs	r3, r0
 8001d8c:	2d00      	cmp	r5, #0
 8001d8e:	d000      	beq.n	8001d92 <__aeabi_dsub+0x552>
 8001d90:	e655      	b.n	8001a3e <__aeabi_dsub+0x1fe>
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f5      	beq.n	8001d82 <__aeabi_dsub+0x542>
 8001d96:	4663      	mov	r3, ip
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	d100      	bne.n	8001d9e <__aeabi_dsub+0x55e>
 8001d9c:	e66d      	b.n	8001a7a <__aeabi_dsub+0x23a>
 8001d9e:	1886      	adds	r6, r0, r2
 8001da0:	4286      	cmp	r6, r0
 8001da2:	4180      	sbcs	r0, r0
 8001da4:	4461      	add	r1, ip
 8001da6:	4240      	negs	r0, r0
 8001da8:	1809      	adds	r1, r1, r0
 8001daa:	2200      	movs	r2, #0
 8001dac:	020b      	lsls	r3, r1, #8
 8001dae:	d400      	bmi.n	8001db2 <__aeabi_dsub+0x572>
 8001db0:	e6d0      	b.n	8001b54 <__aeabi_dsub+0x314>
 8001db2:	4b46      	ldr	r3, [pc, #280]	; (8001ecc <__aeabi_dsub+0x68c>)
 8001db4:	3501      	adds	r5, #1
 8001db6:	4019      	ands	r1, r3
 8001db8:	e5b2      	b.n	8001920 <__aeabi_dsub+0xe0>
 8001dba:	46b1      	mov	r9, r6
 8001dbc:	e65d      	b.n	8001a7a <__aeabi_dsub+0x23a>
 8001dbe:	0033      	movs	r3, r6
 8001dc0:	4667      	mov	r7, ip
 8001dc2:	3b20      	subs	r3, #32
 8001dc4:	40df      	lsrs	r7, r3
 8001dc6:	003b      	movs	r3, r7
 8001dc8:	2e20      	cmp	r6, #32
 8001dca:	d005      	beq.n	8001dd8 <__aeabi_dsub+0x598>
 8001dcc:	2740      	movs	r7, #64	; 0x40
 8001dce:	1bbf      	subs	r7, r7, r6
 8001dd0:	4666      	mov	r6, ip
 8001dd2:	40be      	lsls	r6, r7
 8001dd4:	4332      	orrs	r2, r6
 8001dd6:	4690      	mov	r8, r2
 8001dd8:	4646      	mov	r6, r8
 8001dda:	1e72      	subs	r2, r6, #1
 8001ddc:	4196      	sbcs	r6, r2
 8001dde:	4333      	orrs	r3, r6
 8001de0:	e5ef      	b.n	80019c2 <__aeabi_dsub+0x182>
 8001de2:	4b39      	ldr	r3, [pc, #228]	; (8001ec8 <__aeabi_dsub+0x688>)
 8001de4:	429f      	cmp	r7, r3
 8001de6:	d0cb      	beq.n	8001d80 <__aeabi_dsub+0x540>
 8001de8:	2580      	movs	r5, #128	; 0x80
 8001dea:	042d      	lsls	r5, r5, #16
 8001dec:	4273      	negs	r3, r6
 8001dee:	4329      	orrs	r1, r5
 8001df0:	e7a8      	b.n	8001d44 <__aeabi_dsub+0x504>
 8001df2:	4308      	orrs	r0, r1
 8001df4:	1e41      	subs	r1, r0, #1
 8001df6:	4188      	sbcs	r0, r1
 8001df8:	e6a2      	b.n	8001b40 <__aeabi_dsub+0x300>
 8001dfa:	2f00      	cmp	r7, #0
 8001dfc:	d100      	bne.n	8001e00 <__aeabi_dsub+0x5c0>
 8001dfe:	e63c      	b.n	8001a7a <__aeabi_dsub+0x23a>
 8001e00:	4663      	mov	r3, ip
 8001e02:	1a86      	subs	r6, r0, r2
 8001e04:	1acf      	subs	r7, r1, r3
 8001e06:	42b0      	cmp	r0, r6
 8001e08:	419b      	sbcs	r3, r3
 8001e0a:	425b      	negs	r3, r3
 8001e0c:	1afb      	subs	r3, r7, r3
 8001e0e:	4698      	mov	r8, r3
 8001e10:	021b      	lsls	r3, r3, #8
 8001e12:	d54e      	bpl.n	8001eb2 <__aeabi_dsub+0x672>
 8001e14:	1a16      	subs	r6, r2, r0
 8001e16:	4663      	mov	r3, ip
 8001e18:	42b2      	cmp	r2, r6
 8001e1a:	4192      	sbcs	r2, r2
 8001e1c:	1a59      	subs	r1, r3, r1
 8001e1e:	4252      	negs	r2, r2
 8001e20:	1a89      	subs	r1, r1, r2
 8001e22:	465c      	mov	r4, fp
 8001e24:	2200      	movs	r2, #0
 8001e26:	e57b      	b.n	8001920 <__aeabi_dsub+0xe0>
 8001e28:	4301      	orrs	r1, r0
 8001e2a:	000e      	movs	r6, r1
 8001e2c:	1e71      	subs	r1, r6, #1
 8001e2e:	418e      	sbcs	r6, r1
 8001e30:	e79f      	b.n	8001d72 <__aeabi_dsub+0x532>
 8001e32:	001d      	movs	r5, r3
 8001e34:	000e      	movs	r6, r1
 8001e36:	3d20      	subs	r5, #32
 8001e38:	40ee      	lsrs	r6, r5
 8001e3a:	46b0      	mov	r8, r6
 8001e3c:	2b20      	cmp	r3, #32
 8001e3e:	d004      	beq.n	8001e4a <__aeabi_dsub+0x60a>
 8001e40:	2540      	movs	r5, #64	; 0x40
 8001e42:	1aeb      	subs	r3, r5, r3
 8001e44:	4099      	lsls	r1, r3
 8001e46:	4308      	orrs	r0, r1
 8001e48:	4681      	mov	r9, r0
 8001e4a:	4648      	mov	r0, r9
 8001e4c:	4643      	mov	r3, r8
 8001e4e:	1e41      	subs	r1, r0, #1
 8001e50:	4188      	sbcs	r0, r1
 8001e52:	4318      	orrs	r0, r3
 8001e54:	e674      	b.n	8001b40 <__aeabi_dsub+0x300>
 8001e56:	2200      	movs	r2, #0
 8001e58:	2400      	movs	r4, #0
 8001e5a:	e617      	b.n	8001a8c <__aeabi_dsub+0x24c>
 8001e5c:	1a16      	subs	r6, r2, r0
 8001e5e:	4663      	mov	r3, ip
 8001e60:	42b2      	cmp	r2, r6
 8001e62:	4192      	sbcs	r2, r2
 8001e64:	1a59      	subs	r1, r3, r1
 8001e66:	4252      	negs	r2, r2
 8001e68:	1a89      	subs	r1, r1, r2
 8001e6a:	003d      	movs	r5, r7
 8001e6c:	e525      	b.n	80018ba <__aeabi_dsub+0x7a>
 8001e6e:	4661      	mov	r1, ip
 8001e70:	4691      	mov	r9, r2
 8001e72:	4d15      	ldr	r5, [pc, #84]	; (8001ec8 <__aeabi_dsub+0x688>)
 8001e74:	e601      	b.n	8001a7a <__aeabi_dsub+0x23a>
 8001e76:	2280      	movs	r2, #128	; 0x80
 8001e78:	2400      	movs	r4, #0
 8001e7a:	0312      	lsls	r2, r2, #12
 8001e7c:	e679      	b.n	8001b72 <__aeabi_dsub+0x332>
 8001e7e:	001d      	movs	r5, r3
 8001e80:	000e      	movs	r6, r1
 8001e82:	3d20      	subs	r5, #32
 8001e84:	40ee      	lsrs	r6, r5
 8001e86:	46b0      	mov	r8, r6
 8001e88:	2b20      	cmp	r3, #32
 8001e8a:	d004      	beq.n	8001e96 <__aeabi_dsub+0x656>
 8001e8c:	2540      	movs	r5, #64	; 0x40
 8001e8e:	1aeb      	subs	r3, r5, r3
 8001e90:	4099      	lsls	r1, r3
 8001e92:	4308      	orrs	r0, r1
 8001e94:	4681      	mov	r9, r0
 8001e96:	464e      	mov	r6, r9
 8001e98:	4643      	mov	r3, r8
 8001e9a:	1e71      	subs	r1, r6, #1
 8001e9c:	418e      	sbcs	r6, r1
 8001e9e:	431e      	orrs	r6, r3
 8001ea0:	e767      	b.n	8001d72 <__aeabi_dsub+0x532>
 8001ea2:	1886      	adds	r6, r0, r2
 8001ea4:	4296      	cmp	r6, r2
 8001ea6:	419b      	sbcs	r3, r3
 8001ea8:	4461      	add	r1, ip
 8001eaa:	425b      	negs	r3, r3
 8001eac:	18c9      	adds	r1, r1, r3
 8001eae:	003d      	movs	r5, r7
 8001eb0:	e58c      	b.n	80019cc <__aeabi_dsub+0x18c>
 8001eb2:	4647      	mov	r7, r8
 8001eb4:	4337      	orrs	r7, r6
 8001eb6:	d0ce      	beq.n	8001e56 <__aeabi_dsub+0x616>
 8001eb8:	2207      	movs	r2, #7
 8001eba:	4641      	mov	r1, r8
 8001ebc:	4032      	ands	r2, r6
 8001ebe:	e649      	b.n	8001b54 <__aeabi_dsub+0x314>
 8001ec0:	2700      	movs	r7, #0
 8001ec2:	003a      	movs	r2, r7
 8001ec4:	e5e6      	b.n	8001a94 <__aeabi_dsub+0x254>
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	000007ff 	.word	0x000007ff
 8001ecc:	ff7fffff 	.word	0xff7fffff

08001ed0 <__aeabi_d2iz>:
 8001ed0:	b530      	push	{r4, r5, lr}
 8001ed2:	4d14      	ldr	r5, [pc, #80]	; (8001f24 <__aeabi_d2iz+0x54>)
 8001ed4:	030a      	lsls	r2, r1, #12
 8001ed6:	004b      	lsls	r3, r1, #1
 8001ed8:	0b12      	lsrs	r2, r2, #12
 8001eda:	0d5b      	lsrs	r3, r3, #21
 8001edc:	0fc9      	lsrs	r1, r1, #31
 8001ede:	2400      	movs	r4, #0
 8001ee0:	42ab      	cmp	r3, r5
 8001ee2:	dd11      	ble.n	8001f08 <__aeabi_d2iz+0x38>
 8001ee4:	4c10      	ldr	r4, [pc, #64]	; (8001f28 <__aeabi_d2iz+0x58>)
 8001ee6:	42a3      	cmp	r3, r4
 8001ee8:	dc10      	bgt.n	8001f0c <__aeabi_d2iz+0x3c>
 8001eea:	2480      	movs	r4, #128	; 0x80
 8001eec:	0364      	lsls	r4, r4, #13
 8001eee:	4322      	orrs	r2, r4
 8001ef0:	4c0e      	ldr	r4, [pc, #56]	; (8001f2c <__aeabi_d2iz+0x5c>)
 8001ef2:	1ae4      	subs	r4, r4, r3
 8001ef4:	2c1f      	cmp	r4, #31
 8001ef6:	dd0c      	ble.n	8001f12 <__aeabi_d2iz+0x42>
 8001ef8:	480d      	ldr	r0, [pc, #52]	; (8001f30 <__aeabi_d2iz+0x60>)
 8001efa:	1ac3      	subs	r3, r0, r3
 8001efc:	40da      	lsrs	r2, r3
 8001efe:	0013      	movs	r3, r2
 8001f00:	425c      	negs	r4, r3
 8001f02:	2900      	cmp	r1, #0
 8001f04:	d100      	bne.n	8001f08 <__aeabi_d2iz+0x38>
 8001f06:	001c      	movs	r4, r3
 8001f08:	0020      	movs	r0, r4
 8001f0a:	bd30      	pop	{r4, r5, pc}
 8001f0c:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <__aeabi_d2iz+0x64>)
 8001f0e:	18cc      	adds	r4, r1, r3
 8001f10:	e7fa      	b.n	8001f08 <__aeabi_d2iz+0x38>
 8001f12:	4d09      	ldr	r5, [pc, #36]	; (8001f38 <__aeabi_d2iz+0x68>)
 8001f14:	40e0      	lsrs	r0, r4
 8001f16:	46ac      	mov	ip, r5
 8001f18:	4463      	add	r3, ip
 8001f1a:	409a      	lsls	r2, r3
 8001f1c:	0013      	movs	r3, r2
 8001f1e:	4303      	orrs	r3, r0
 8001f20:	e7ee      	b.n	8001f00 <__aeabi_d2iz+0x30>
 8001f22:	46c0      	nop			; (mov r8, r8)
 8001f24:	000003fe 	.word	0x000003fe
 8001f28:	0000041d 	.word	0x0000041d
 8001f2c:	00000433 	.word	0x00000433
 8001f30:	00000413 	.word	0x00000413
 8001f34:	7fffffff 	.word	0x7fffffff
 8001f38:	fffffbed 	.word	0xfffffbed

08001f3c <__aeabi_i2d>:
 8001f3c:	b570      	push	{r4, r5, r6, lr}
 8001f3e:	2800      	cmp	r0, #0
 8001f40:	d02d      	beq.n	8001f9e <__aeabi_i2d+0x62>
 8001f42:	17c3      	asrs	r3, r0, #31
 8001f44:	18c5      	adds	r5, r0, r3
 8001f46:	405d      	eors	r5, r3
 8001f48:	0fc4      	lsrs	r4, r0, #31
 8001f4a:	0028      	movs	r0, r5
 8001f4c:	f000 f8a8 	bl	80020a0 <__clzsi2>
 8001f50:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <__aeabi_i2d+0x6c>)
 8001f52:	1a1b      	subs	r3, r3, r0
 8001f54:	055b      	lsls	r3, r3, #21
 8001f56:	0d5b      	lsrs	r3, r3, #21
 8001f58:	280a      	cmp	r0, #10
 8001f5a:	dd15      	ble.n	8001f88 <__aeabi_i2d+0x4c>
 8001f5c:	380b      	subs	r0, #11
 8001f5e:	4085      	lsls	r5, r0
 8001f60:	2200      	movs	r2, #0
 8001f62:	032d      	lsls	r5, r5, #12
 8001f64:	0b2d      	lsrs	r5, r5, #12
 8001f66:	2100      	movs	r1, #0
 8001f68:	0010      	movs	r0, r2
 8001f6a:	032d      	lsls	r5, r5, #12
 8001f6c:	0d0a      	lsrs	r2, r1, #20
 8001f6e:	0b2d      	lsrs	r5, r5, #12
 8001f70:	0512      	lsls	r2, r2, #20
 8001f72:	432a      	orrs	r2, r5
 8001f74:	4d0d      	ldr	r5, [pc, #52]	; (8001fac <__aeabi_i2d+0x70>)
 8001f76:	051b      	lsls	r3, r3, #20
 8001f78:	402a      	ands	r2, r5
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	07e4      	lsls	r4, r4, #31
 8001f80:	085b      	lsrs	r3, r3, #1
 8001f82:	4323      	orrs	r3, r4
 8001f84:	0019      	movs	r1, r3
 8001f86:	bd70      	pop	{r4, r5, r6, pc}
 8001f88:	0002      	movs	r2, r0
 8001f8a:	0029      	movs	r1, r5
 8001f8c:	3215      	adds	r2, #21
 8001f8e:	4091      	lsls	r1, r2
 8001f90:	000a      	movs	r2, r1
 8001f92:	210b      	movs	r1, #11
 8001f94:	1a08      	subs	r0, r1, r0
 8001f96:	40c5      	lsrs	r5, r0
 8001f98:	032d      	lsls	r5, r5, #12
 8001f9a:	0b2d      	lsrs	r5, r5, #12
 8001f9c:	e7e3      	b.n	8001f66 <__aeabi_i2d+0x2a>
 8001f9e:	2400      	movs	r4, #0
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	2500      	movs	r5, #0
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	e7de      	b.n	8001f66 <__aeabi_i2d+0x2a>
 8001fa8:	0000041e 	.word	0x0000041e
 8001fac:	800fffff 	.word	0x800fffff

08001fb0 <__aeabi_cdrcmple>:
 8001fb0:	4684      	mov	ip, r0
 8001fb2:	1c10      	adds	r0, r2, #0
 8001fb4:	4662      	mov	r2, ip
 8001fb6:	468c      	mov	ip, r1
 8001fb8:	1c19      	adds	r1, r3, #0
 8001fba:	4663      	mov	r3, ip
 8001fbc:	e000      	b.n	8001fc0 <__aeabi_cdcmpeq>
 8001fbe:	46c0      	nop			; (mov r8, r8)

08001fc0 <__aeabi_cdcmpeq>:
 8001fc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001fc2:	f000 f9f1 	bl	80023a8 <__ledf2>
 8001fc6:	2800      	cmp	r0, #0
 8001fc8:	d401      	bmi.n	8001fce <__aeabi_cdcmpeq+0xe>
 8001fca:	2100      	movs	r1, #0
 8001fcc:	42c8      	cmn	r0, r1
 8001fce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001fd0 <__aeabi_dcmpeq>:
 8001fd0:	b510      	push	{r4, lr}
 8001fd2:	f000 f949 	bl	8002268 <__eqdf2>
 8001fd6:	4240      	negs	r0, r0
 8001fd8:	3001      	adds	r0, #1
 8001fda:	bd10      	pop	{r4, pc}

08001fdc <__aeabi_dcmplt>:
 8001fdc:	b510      	push	{r4, lr}
 8001fde:	f000 f9e3 	bl	80023a8 <__ledf2>
 8001fe2:	2800      	cmp	r0, #0
 8001fe4:	db01      	blt.n	8001fea <__aeabi_dcmplt+0xe>
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	bd10      	pop	{r4, pc}
 8001fea:	2001      	movs	r0, #1
 8001fec:	bd10      	pop	{r4, pc}
 8001fee:	46c0      	nop			; (mov r8, r8)

08001ff0 <__aeabi_dcmple>:
 8001ff0:	b510      	push	{r4, lr}
 8001ff2:	f000 f9d9 	bl	80023a8 <__ledf2>
 8001ff6:	2800      	cmp	r0, #0
 8001ff8:	dd01      	ble.n	8001ffe <__aeabi_dcmple+0xe>
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	bd10      	pop	{r4, pc}
 8001ffe:	2001      	movs	r0, #1
 8002000:	bd10      	pop	{r4, pc}
 8002002:	46c0      	nop			; (mov r8, r8)

08002004 <__aeabi_dcmpgt>:
 8002004:	b510      	push	{r4, lr}
 8002006:	f000 f96b 	bl	80022e0 <__gedf2>
 800200a:	2800      	cmp	r0, #0
 800200c:	dc01      	bgt.n	8002012 <__aeabi_dcmpgt+0xe>
 800200e:	2000      	movs	r0, #0
 8002010:	bd10      	pop	{r4, pc}
 8002012:	2001      	movs	r0, #1
 8002014:	bd10      	pop	{r4, pc}
 8002016:	46c0      	nop			; (mov r8, r8)

08002018 <__aeabi_dcmpge>:
 8002018:	b510      	push	{r4, lr}
 800201a:	f000 f961 	bl	80022e0 <__gedf2>
 800201e:	2800      	cmp	r0, #0
 8002020:	da01      	bge.n	8002026 <__aeabi_dcmpge+0xe>
 8002022:	2000      	movs	r0, #0
 8002024:	bd10      	pop	{r4, pc}
 8002026:	2001      	movs	r0, #1
 8002028:	bd10      	pop	{r4, pc}
 800202a:	46c0      	nop			; (mov r8, r8)

0800202c <__aeabi_cfrcmple>:
 800202c:	4684      	mov	ip, r0
 800202e:	1c08      	adds	r0, r1, #0
 8002030:	4661      	mov	r1, ip
 8002032:	e7ff      	b.n	8002034 <__aeabi_cfcmpeq>

08002034 <__aeabi_cfcmpeq>:
 8002034:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002036:	f000 f8c7 	bl	80021c8 <__lesf2>
 800203a:	2800      	cmp	r0, #0
 800203c:	d401      	bmi.n	8002042 <__aeabi_cfcmpeq+0xe>
 800203e:	2100      	movs	r1, #0
 8002040:	42c8      	cmn	r0, r1
 8002042:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002044 <__aeabi_fcmpeq>:
 8002044:	b510      	push	{r4, lr}
 8002046:	f000 f849 	bl	80020dc <__eqsf2>
 800204a:	4240      	negs	r0, r0
 800204c:	3001      	adds	r0, #1
 800204e:	bd10      	pop	{r4, pc}

08002050 <__aeabi_fcmplt>:
 8002050:	b510      	push	{r4, lr}
 8002052:	f000 f8b9 	bl	80021c8 <__lesf2>
 8002056:	2800      	cmp	r0, #0
 8002058:	db01      	blt.n	800205e <__aeabi_fcmplt+0xe>
 800205a:	2000      	movs	r0, #0
 800205c:	bd10      	pop	{r4, pc}
 800205e:	2001      	movs	r0, #1
 8002060:	bd10      	pop	{r4, pc}
 8002062:	46c0      	nop			; (mov r8, r8)

08002064 <__aeabi_fcmple>:
 8002064:	b510      	push	{r4, lr}
 8002066:	f000 f8af 	bl	80021c8 <__lesf2>
 800206a:	2800      	cmp	r0, #0
 800206c:	dd01      	ble.n	8002072 <__aeabi_fcmple+0xe>
 800206e:	2000      	movs	r0, #0
 8002070:	bd10      	pop	{r4, pc}
 8002072:	2001      	movs	r0, #1
 8002074:	bd10      	pop	{r4, pc}
 8002076:	46c0      	nop			; (mov r8, r8)

08002078 <__aeabi_fcmpgt>:
 8002078:	b510      	push	{r4, lr}
 800207a:	f000 f857 	bl	800212c <__gesf2>
 800207e:	2800      	cmp	r0, #0
 8002080:	dc01      	bgt.n	8002086 <__aeabi_fcmpgt+0xe>
 8002082:	2000      	movs	r0, #0
 8002084:	bd10      	pop	{r4, pc}
 8002086:	2001      	movs	r0, #1
 8002088:	bd10      	pop	{r4, pc}
 800208a:	46c0      	nop			; (mov r8, r8)

0800208c <__aeabi_fcmpge>:
 800208c:	b510      	push	{r4, lr}
 800208e:	f000 f84d 	bl	800212c <__gesf2>
 8002092:	2800      	cmp	r0, #0
 8002094:	da01      	bge.n	800209a <__aeabi_fcmpge+0xe>
 8002096:	2000      	movs	r0, #0
 8002098:	bd10      	pop	{r4, pc}
 800209a:	2001      	movs	r0, #1
 800209c:	bd10      	pop	{r4, pc}
 800209e:	46c0      	nop			; (mov r8, r8)

080020a0 <__clzsi2>:
 80020a0:	211c      	movs	r1, #28
 80020a2:	2301      	movs	r3, #1
 80020a4:	041b      	lsls	r3, r3, #16
 80020a6:	4298      	cmp	r0, r3
 80020a8:	d301      	bcc.n	80020ae <__clzsi2+0xe>
 80020aa:	0c00      	lsrs	r0, r0, #16
 80020ac:	3910      	subs	r1, #16
 80020ae:	0a1b      	lsrs	r3, r3, #8
 80020b0:	4298      	cmp	r0, r3
 80020b2:	d301      	bcc.n	80020b8 <__clzsi2+0x18>
 80020b4:	0a00      	lsrs	r0, r0, #8
 80020b6:	3908      	subs	r1, #8
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	4298      	cmp	r0, r3
 80020bc:	d301      	bcc.n	80020c2 <__clzsi2+0x22>
 80020be:	0900      	lsrs	r0, r0, #4
 80020c0:	3904      	subs	r1, #4
 80020c2:	a202      	add	r2, pc, #8	; (adr r2, 80020cc <__clzsi2+0x2c>)
 80020c4:	5c10      	ldrb	r0, [r2, r0]
 80020c6:	1840      	adds	r0, r0, r1
 80020c8:	4770      	bx	lr
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	02020304 	.word	0x02020304
 80020d0:	01010101 	.word	0x01010101
	...

080020dc <__eqsf2>:
 80020dc:	b570      	push	{r4, r5, r6, lr}
 80020de:	0042      	lsls	r2, r0, #1
 80020e0:	024e      	lsls	r6, r1, #9
 80020e2:	004c      	lsls	r4, r1, #1
 80020e4:	0245      	lsls	r5, r0, #9
 80020e6:	0a6d      	lsrs	r5, r5, #9
 80020e8:	0e12      	lsrs	r2, r2, #24
 80020ea:	0fc3      	lsrs	r3, r0, #31
 80020ec:	0a76      	lsrs	r6, r6, #9
 80020ee:	0e24      	lsrs	r4, r4, #24
 80020f0:	0fc9      	lsrs	r1, r1, #31
 80020f2:	2aff      	cmp	r2, #255	; 0xff
 80020f4:	d00f      	beq.n	8002116 <__eqsf2+0x3a>
 80020f6:	2cff      	cmp	r4, #255	; 0xff
 80020f8:	d011      	beq.n	800211e <__eqsf2+0x42>
 80020fa:	2001      	movs	r0, #1
 80020fc:	42a2      	cmp	r2, r4
 80020fe:	d000      	beq.n	8002102 <__eqsf2+0x26>
 8002100:	bd70      	pop	{r4, r5, r6, pc}
 8002102:	42b5      	cmp	r5, r6
 8002104:	d1fc      	bne.n	8002100 <__eqsf2+0x24>
 8002106:	428b      	cmp	r3, r1
 8002108:	d00d      	beq.n	8002126 <__eqsf2+0x4a>
 800210a:	2a00      	cmp	r2, #0
 800210c:	d1f8      	bne.n	8002100 <__eqsf2+0x24>
 800210e:	0028      	movs	r0, r5
 8002110:	1e45      	subs	r5, r0, #1
 8002112:	41a8      	sbcs	r0, r5
 8002114:	e7f4      	b.n	8002100 <__eqsf2+0x24>
 8002116:	2001      	movs	r0, #1
 8002118:	2d00      	cmp	r5, #0
 800211a:	d1f1      	bne.n	8002100 <__eqsf2+0x24>
 800211c:	e7eb      	b.n	80020f6 <__eqsf2+0x1a>
 800211e:	2001      	movs	r0, #1
 8002120:	2e00      	cmp	r6, #0
 8002122:	d1ed      	bne.n	8002100 <__eqsf2+0x24>
 8002124:	e7e9      	b.n	80020fa <__eqsf2+0x1e>
 8002126:	2000      	movs	r0, #0
 8002128:	e7ea      	b.n	8002100 <__eqsf2+0x24>
 800212a:	46c0      	nop			; (mov r8, r8)

0800212c <__gesf2>:
 800212c:	b570      	push	{r4, r5, r6, lr}
 800212e:	004a      	lsls	r2, r1, #1
 8002130:	024e      	lsls	r6, r1, #9
 8002132:	0245      	lsls	r5, r0, #9
 8002134:	0044      	lsls	r4, r0, #1
 8002136:	0a6d      	lsrs	r5, r5, #9
 8002138:	0e24      	lsrs	r4, r4, #24
 800213a:	0fc3      	lsrs	r3, r0, #31
 800213c:	0a76      	lsrs	r6, r6, #9
 800213e:	0e12      	lsrs	r2, r2, #24
 8002140:	0fc9      	lsrs	r1, r1, #31
 8002142:	2cff      	cmp	r4, #255	; 0xff
 8002144:	d015      	beq.n	8002172 <__gesf2+0x46>
 8002146:	2aff      	cmp	r2, #255	; 0xff
 8002148:	d00e      	beq.n	8002168 <__gesf2+0x3c>
 800214a:	2c00      	cmp	r4, #0
 800214c:	d115      	bne.n	800217a <__gesf2+0x4e>
 800214e:	2a00      	cmp	r2, #0
 8002150:	d101      	bne.n	8002156 <__gesf2+0x2a>
 8002152:	2e00      	cmp	r6, #0
 8002154:	d01c      	beq.n	8002190 <__gesf2+0x64>
 8002156:	2d00      	cmp	r5, #0
 8002158:	d014      	beq.n	8002184 <__gesf2+0x58>
 800215a:	428b      	cmp	r3, r1
 800215c:	d027      	beq.n	80021ae <__gesf2+0x82>
 800215e:	2002      	movs	r0, #2
 8002160:	3b01      	subs	r3, #1
 8002162:	4018      	ands	r0, r3
 8002164:	3801      	subs	r0, #1
 8002166:	bd70      	pop	{r4, r5, r6, pc}
 8002168:	2e00      	cmp	r6, #0
 800216a:	d0ee      	beq.n	800214a <__gesf2+0x1e>
 800216c:	2002      	movs	r0, #2
 800216e:	4240      	negs	r0, r0
 8002170:	e7f9      	b.n	8002166 <__gesf2+0x3a>
 8002172:	2d00      	cmp	r5, #0
 8002174:	d1fa      	bne.n	800216c <__gesf2+0x40>
 8002176:	2aff      	cmp	r2, #255	; 0xff
 8002178:	d00e      	beq.n	8002198 <__gesf2+0x6c>
 800217a:	2a00      	cmp	r2, #0
 800217c:	d10e      	bne.n	800219c <__gesf2+0x70>
 800217e:	2e00      	cmp	r6, #0
 8002180:	d0ed      	beq.n	800215e <__gesf2+0x32>
 8002182:	e00b      	b.n	800219c <__gesf2+0x70>
 8002184:	2301      	movs	r3, #1
 8002186:	3901      	subs	r1, #1
 8002188:	4399      	bics	r1, r3
 800218a:	0008      	movs	r0, r1
 800218c:	3001      	adds	r0, #1
 800218e:	e7ea      	b.n	8002166 <__gesf2+0x3a>
 8002190:	2000      	movs	r0, #0
 8002192:	2d00      	cmp	r5, #0
 8002194:	d0e7      	beq.n	8002166 <__gesf2+0x3a>
 8002196:	e7e2      	b.n	800215e <__gesf2+0x32>
 8002198:	2e00      	cmp	r6, #0
 800219a:	d1e7      	bne.n	800216c <__gesf2+0x40>
 800219c:	428b      	cmp	r3, r1
 800219e:	d1de      	bne.n	800215e <__gesf2+0x32>
 80021a0:	4294      	cmp	r4, r2
 80021a2:	dd05      	ble.n	80021b0 <__gesf2+0x84>
 80021a4:	2102      	movs	r1, #2
 80021a6:	1e58      	subs	r0, r3, #1
 80021a8:	4008      	ands	r0, r1
 80021aa:	3801      	subs	r0, #1
 80021ac:	e7db      	b.n	8002166 <__gesf2+0x3a>
 80021ae:	2400      	movs	r4, #0
 80021b0:	42a2      	cmp	r2, r4
 80021b2:	dc04      	bgt.n	80021be <__gesf2+0x92>
 80021b4:	42b5      	cmp	r5, r6
 80021b6:	d8d2      	bhi.n	800215e <__gesf2+0x32>
 80021b8:	2000      	movs	r0, #0
 80021ba:	42b5      	cmp	r5, r6
 80021bc:	d2d3      	bcs.n	8002166 <__gesf2+0x3a>
 80021be:	1e58      	subs	r0, r3, #1
 80021c0:	2301      	movs	r3, #1
 80021c2:	4398      	bics	r0, r3
 80021c4:	3001      	adds	r0, #1
 80021c6:	e7ce      	b.n	8002166 <__gesf2+0x3a>

080021c8 <__lesf2>:
 80021c8:	b530      	push	{r4, r5, lr}
 80021ca:	0042      	lsls	r2, r0, #1
 80021cc:	0244      	lsls	r4, r0, #9
 80021ce:	024d      	lsls	r5, r1, #9
 80021d0:	0fc3      	lsrs	r3, r0, #31
 80021d2:	0048      	lsls	r0, r1, #1
 80021d4:	0a64      	lsrs	r4, r4, #9
 80021d6:	0e12      	lsrs	r2, r2, #24
 80021d8:	0a6d      	lsrs	r5, r5, #9
 80021da:	0e00      	lsrs	r0, r0, #24
 80021dc:	0fc9      	lsrs	r1, r1, #31
 80021de:	2aff      	cmp	r2, #255	; 0xff
 80021e0:	d012      	beq.n	8002208 <__lesf2+0x40>
 80021e2:	28ff      	cmp	r0, #255	; 0xff
 80021e4:	d00c      	beq.n	8002200 <__lesf2+0x38>
 80021e6:	2a00      	cmp	r2, #0
 80021e8:	d112      	bne.n	8002210 <__lesf2+0x48>
 80021ea:	2800      	cmp	r0, #0
 80021ec:	d119      	bne.n	8002222 <__lesf2+0x5a>
 80021ee:	2d00      	cmp	r5, #0
 80021f0:	d117      	bne.n	8002222 <__lesf2+0x5a>
 80021f2:	2c00      	cmp	r4, #0
 80021f4:	d02b      	beq.n	800224e <__lesf2+0x86>
 80021f6:	2002      	movs	r0, #2
 80021f8:	3b01      	subs	r3, #1
 80021fa:	4018      	ands	r0, r3
 80021fc:	3801      	subs	r0, #1
 80021fe:	e026      	b.n	800224e <__lesf2+0x86>
 8002200:	2d00      	cmp	r5, #0
 8002202:	d0f0      	beq.n	80021e6 <__lesf2+0x1e>
 8002204:	2002      	movs	r0, #2
 8002206:	e022      	b.n	800224e <__lesf2+0x86>
 8002208:	2c00      	cmp	r4, #0
 800220a:	d1fb      	bne.n	8002204 <__lesf2+0x3c>
 800220c:	28ff      	cmp	r0, #255	; 0xff
 800220e:	d01f      	beq.n	8002250 <__lesf2+0x88>
 8002210:	2800      	cmp	r0, #0
 8002212:	d11f      	bne.n	8002254 <__lesf2+0x8c>
 8002214:	2d00      	cmp	r5, #0
 8002216:	d11d      	bne.n	8002254 <__lesf2+0x8c>
 8002218:	2002      	movs	r0, #2
 800221a:	3b01      	subs	r3, #1
 800221c:	4018      	ands	r0, r3
 800221e:	3801      	subs	r0, #1
 8002220:	e015      	b.n	800224e <__lesf2+0x86>
 8002222:	2c00      	cmp	r4, #0
 8002224:	d00e      	beq.n	8002244 <__lesf2+0x7c>
 8002226:	428b      	cmp	r3, r1
 8002228:	d1e5      	bne.n	80021f6 <__lesf2+0x2e>
 800222a:	2200      	movs	r2, #0
 800222c:	4290      	cmp	r0, r2
 800222e:	dc04      	bgt.n	800223a <__lesf2+0x72>
 8002230:	42ac      	cmp	r4, r5
 8002232:	d8e0      	bhi.n	80021f6 <__lesf2+0x2e>
 8002234:	2000      	movs	r0, #0
 8002236:	42ac      	cmp	r4, r5
 8002238:	d209      	bcs.n	800224e <__lesf2+0x86>
 800223a:	1e58      	subs	r0, r3, #1
 800223c:	2301      	movs	r3, #1
 800223e:	4398      	bics	r0, r3
 8002240:	3001      	adds	r0, #1
 8002242:	e004      	b.n	800224e <__lesf2+0x86>
 8002244:	2301      	movs	r3, #1
 8002246:	3901      	subs	r1, #1
 8002248:	4399      	bics	r1, r3
 800224a:	0008      	movs	r0, r1
 800224c:	3001      	adds	r0, #1
 800224e:	bd30      	pop	{r4, r5, pc}
 8002250:	2d00      	cmp	r5, #0
 8002252:	d1d7      	bne.n	8002204 <__lesf2+0x3c>
 8002254:	428b      	cmp	r3, r1
 8002256:	d1ce      	bne.n	80021f6 <__lesf2+0x2e>
 8002258:	4282      	cmp	r2, r0
 800225a:	dde7      	ble.n	800222c <__lesf2+0x64>
 800225c:	2102      	movs	r1, #2
 800225e:	1e58      	subs	r0, r3, #1
 8002260:	4008      	ands	r0, r1
 8002262:	3801      	subs	r0, #1
 8002264:	e7f3      	b.n	800224e <__lesf2+0x86>
 8002266:	46c0      	nop			; (mov r8, r8)

08002268 <__eqdf2>:
 8002268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800226a:	464f      	mov	r7, r9
 800226c:	4646      	mov	r6, r8
 800226e:	46d6      	mov	lr, sl
 8002270:	4684      	mov	ip, r0
 8002272:	b5c0      	push	{r6, r7, lr}
 8002274:	4680      	mov	r8, r0
 8002276:	4e19      	ldr	r6, [pc, #100]	; (80022dc <__eqdf2+0x74>)
 8002278:	0318      	lsls	r0, r3, #12
 800227a:	030f      	lsls	r7, r1, #12
 800227c:	004d      	lsls	r5, r1, #1
 800227e:	0b00      	lsrs	r0, r0, #12
 8002280:	005c      	lsls	r4, r3, #1
 8002282:	4682      	mov	sl, r0
 8002284:	0b3f      	lsrs	r7, r7, #12
 8002286:	0d6d      	lsrs	r5, r5, #21
 8002288:	0fc9      	lsrs	r1, r1, #31
 800228a:	4691      	mov	r9, r2
 800228c:	0d64      	lsrs	r4, r4, #21
 800228e:	0fdb      	lsrs	r3, r3, #31
 8002290:	2001      	movs	r0, #1
 8002292:	42b5      	cmp	r5, r6
 8002294:	d00a      	beq.n	80022ac <__eqdf2+0x44>
 8002296:	42b4      	cmp	r4, r6
 8002298:	d003      	beq.n	80022a2 <__eqdf2+0x3a>
 800229a:	42a5      	cmp	r5, r4
 800229c:	d101      	bne.n	80022a2 <__eqdf2+0x3a>
 800229e:	4557      	cmp	r7, sl
 80022a0:	d00c      	beq.n	80022bc <__eqdf2+0x54>
 80022a2:	bc1c      	pop	{r2, r3, r4}
 80022a4:	4690      	mov	r8, r2
 80022a6:	4699      	mov	r9, r3
 80022a8:	46a2      	mov	sl, r4
 80022aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022ac:	4666      	mov	r6, ip
 80022ae:	433e      	orrs	r6, r7
 80022b0:	d1f7      	bne.n	80022a2 <__eqdf2+0x3a>
 80022b2:	42ac      	cmp	r4, r5
 80022b4:	d1f5      	bne.n	80022a2 <__eqdf2+0x3a>
 80022b6:	4654      	mov	r4, sl
 80022b8:	4314      	orrs	r4, r2
 80022ba:	d1f2      	bne.n	80022a2 <__eqdf2+0x3a>
 80022bc:	2001      	movs	r0, #1
 80022be:	45c8      	cmp	r8, r9
 80022c0:	d1ef      	bne.n	80022a2 <__eqdf2+0x3a>
 80022c2:	4299      	cmp	r1, r3
 80022c4:	d007      	beq.n	80022d6 <__eqdf2+0x6e>
 80022c6:	2d00      	cmp	r5, #0
 80022c8:	d1eb      	bne.n	80022a2 <__eqdf2+0x3a>
 80022ca:	4663      	mov	r3, ip
 80022cc:	431f      	orrs	r7, r3
 80022ce:	0038      	movs	r0, r7
 80022d0:	1e47      	subs	r7, r0, #1
 80022d2:	41b8      	sbcs	r0, r7
 80022d4:	e7e5      	b.n	80022a2 <__eqdf2+0x3a>
 80022d6:	2000      	movs	r0, #0
 80022d8:	e7e3      	b.n	80022a2 <__eqdf2+0x3a>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff

080022e0 <__gedf2>:
 80022e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e2:	464f      	mov	r7, r9
 80022e4:	4646      	mov	r6, r8
 80022e6:	46d6      	mov	lr, sl
 80022e8:	004d      	lsls	r5, r1, #1
 80022ea:	b5c0      	push	{r6, r7, lr}
 80022ec:	030e      	lsls	r6, r1, #12
 80022ee:	0fc9      	lsrs	r1, r1, #31
 80022f0:	468a      	mov	sl, r1
 80022f2:	492c      	ldr	r1, [pc, #176]	; (80023a4 <__gedf2+0xc4>)
 80022f4:	031f      	lsls	r7, r3, #12
 80022f6:	005c      	lsls	r4, r3, #1
 80022f8:	4680      	mov	r8, r0
 80022fa:	0b36      	lsrs	r6, r6, #12
 80022fc:	0d6d      	lsrs	r5, r5, #21
 80022fe:	4691      	mov	r9, r2
 8002300:	0b3f      	lsrs	r7, r7, #12
 8002302:	0d64      	lsrs	r4, r4, #21
 8002304:	0fdb      	lsrs	r3, r3, #31
 8002306:	428d      	cmp	r5, r1
 8002308:	d01e      	beq.n	8002348 <__gedf2+0x68>
 800230a:	428c      	cmp	r4, r1
 800230c:	d016      	beq.n	800233c <__gedf2+0x5c>
 800230e:	2d00      	cmp	r5, #0
 8002310:	d11e      	bne.n	8002350 <__gedf2+0x70>
 8002312:	4330      	orrs	r0, r6
 8002314:	4684      	mov	ip, r0
 8002316:	2c00      	cmp	r4, #0
 8002318:	d101      	bne.n	800231e <__gedf2+0x3e>
 800231a:	433a      	orrs	r2, r7
 800231c:	d023      	beq.n	8002366 <__gedf2+0x86>
 800231e:	4662      	mov	r2, ip
 8002320:	2a00      	cmp	r2, #0
 8002322:	d01a      	beq.n	800235a <__gedf2+0x7a>
 8002324:	459a      	cmp	sl, r3
 8002326:	d029      	beq.n	800237c <__gedf2+0x9c>
 8002328:	4651      	mov	r1, sl
 800232a:	2002      	movs	r0, #2
 800232c:	3901      	subs	r1, #1
 800232e:	4008      	ands	r0, r1
 8002330:	3801      	subs	r0, #1
 8002332:	bc1c      	pop	{r2, r3, r4}
 8002334:	4690      	mov	r8, r2
 8002336:	4699      	mov	r9, r3
 8002338:	46a2      	mov	sl, r4
 800233a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800233c:	0039      	movs	r1, r7
 800233e:	4311      	orrs	r1, r2
 8002340:	d0e5      	beq.n	800230e <__gedf2+0x2e>
 8002342:	2002      	movs	r0, #2
 8002344:	4240      	negs	r0, r0
 8002346:	e7f4      	b.n	8002332 <__gedf2+0x52>
 8002348:	4330      	orrs	r0, r6
 800234a:	d1fa      	bne.n	8002342 <__gedf2+0x62>
 800234c:	42ac      	cmp	r4, r5
 800234e:	d00f      	beq.n	8002370 <__gedf2+0x90>
 8002350:	2c00      	cmp	r4, #0
 8002352:	d10f      	bne.n	8002374 <__gedf2+0x94>
 8002354:	433a      	orrs	r2, r7
 8002356:	d0e7      	beq.n	8002328 <__gedf2+0x48>
 8002358:	e00c      	b.n	8002374 <__gedf2+0x94>
 800235a:	2201      	movs	r2, #1
 800235c:	3b01      	subs	r3, #1
 800235e:	4393      	bics	r3, r2
 8002360:	0018      	movs	r0, r3
 8002362:	3001      	adds	r0, #1
 8002364:	e7e5      	b.n	8002332 <__gedf2+0x52>
 8002366:	4663      	mov	r3, ip
 8002368:	2000      	movs	r0, #0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0e1      	beq.n	8002332 <__gedf2+0x52>
 800236e:	e7db      	b.n	8002328 <__gedf2+0x48>
 8002370:	433a      	orrs	r2, r7
 8002372:	d1e6      	bne.n	8002342 <__gedf2+0x62>
 8002374:	459a      	cmp	sl, r3
 8002376:	d1d7      	bne.n	8002328 <__gedf2+0x48>
 8002378:	42a5      	cmp	r5, r4
 800237a:	dcd5      	bgt.n	8002328 <__gedf2+0x48>
 800237c:	42a5      	cmp	r5, r4
 800237e:	db05      	blt.n	800238c <__gedf2+0xac>
 8002380:	42be      	cmp	r6, r7
 8002382:	d8d1      	bhi.n	8002328 <__gedf2+0x48>
 8002384:	d008      	beq.n	8002398 <__gedf2+0xb8>
 8002386:	2000      	movs	r0, #0
 8002388:	42be      	cmp	r6, r7
 800238a:	d2d2      	bcs.n	8002332 <__gedf2+0x52>
 800238c:	4650      	mov	r0, sl
 800238e:	2301      	movs	r3, #1
 8002390:	3801      	subs	r0, #1
 8002392:	4398      	bics	r0, r3
 8002394:	3001      	adds	r0, #1
 8002396:	e7cc      	b.n	8002332 <__gedf2+0x52>
 8002398:	45c8      	cmp	r8, r9
 800239a:	d8c5      	bhi.n	8002328 <__gedf2+0x48>
 800239c:	2000      	movs	r0, #0
 800239e:	45c8      	cmp	r8, r9
 80023a0:	d3f4      	bcc.n	800238c <__gedf2+0xac>
 80023a2:	e7c6      	b.n	8002332 <__gedf2+0x52>
 80023a4:	000007ff 	.word	0x000007ff

080023a8 <__ledf2>:
 80023a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023aa:	464f      	mov	r7, r9
 80023ac:	4646      	mov	r6, r8
 80023ae:	46d6      	mov	lr, sl
 80023b0:	004d      	lsls	r5, r1, #1
 80023b2:	b5c0      	push	{r6, r7, lr}
 80023b4:	030e      	lsls	r6, r1, #12
 80023b6:	0fc9      	lsrs	r1, r1, #31
 80023b8:	468a      	mov	sl, r1
 80023ba:	492e      	ldr	r1, [pc, #184]	; (8002474 <__ledf2+0xcc>)
 80023bc:	031f      	lsls	r7, r3, #12
 80023be:	005c      	lsls	r4, r3, #1
 80023c0:	4680      	mov	r8, r0
 80023c2:	0b36      	lsrs	r6, r6, #12
 80023c4:	0d6d      	lsrs	r5, r5, #21
 80023c6:	4691      	mov	r9, r2
 80023c8:	0b3f      	lsrs	r7, r7, #12
 80023ca:	0d64      	lsrs	r4, r4, #21
 80023cc:	0fdb      	lsrs	r3, r3, #31
 80023ce:	428d      	cmp	r5, r1
 80023d0:	d018      	beq.n	8002404 <__ledf2+0x5c>
 80023d2:	428c      	cmp	r4, r1
 80023d4:	d011      	beq.n	80023fa <__ledf2+0x52>
 80023d6:	2d00      	cmp	r5, #0
 80023d8:	d118      	bne.n	800240c <__ledf2+0x64>
 80023da:	4330      	orrs	r0, r6
 80023dc:	4684      	mov	ip, r0
 80023de:	2c00      	cmp	r4, #0
 80023e0:	d11e      	bne.n	8002420 <__ledf2+0x78>
 80023e2:	433a      	orrs	r2, r7
 80023e4:	d11c      	bne.n	8002420 <__ledf2+0x78>
 80023e6:	4663      	mov	r3, ip
 80023e8:	2000      	movs	r0, #0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d030      	beq.n	8002450 <__ledf2+0xa8>
 80023ee:	4651      	mov	r1, sl
 80023f0:	2002      	movs	r0, #2
 80023f2:	3901      	subs	r1, #1
 80023f4:	4008      	ands	r0, r1
 80023f6:	3801      	subs	r0, #1
 80023f8:	e02a      	b.n	8002450 <__ledf2+0xa8>
 80023fa:	0039      	movs	r1, r7
 80023fc:	4311      	orrs	r1, r2
 80023fe:	d0ea      	beq.n	80023d6 <__ledf2+0x2e>
 8002400:	2002      	movs	r0, #2
 8002402:	e025      	b.n	8002450 <__ledf2+0xa8>
 8002404:	4330      	orrs	r0, r6
 8002406:	d1fb      	bne.n	8002400 <__ledf2+0x58>
 8002408:	42ac      	cmp	r4, r5
 800240a:	d026      	beq.n	800245a <__ledf2+0xb2>
 800240c:	2c00      	cmp	r4, #0
 800240e:	d126      	bne.n	800245e <__ledf2+0xb6>
 8002410:	433a      	orrs	r2, r7
 8002412:	d124      	bne.n	800245e <__ledf2+0xb6>
 8002414:	4651      	mov	r1, sl
 8002416:	2002      	movs	r0, #2
 8002418:	3901      	subs	r1, #1
 800241a:	4008      	ands	r0, r1
 800241c:	3801      	subs	r0, #1
 800241e:	e017      	b.n	8002450 <__ledf2+0xa8>
 8002420:	4662      	mov	r2, ip
 8002422:	2a00      	cmp	r2, #0
 8002424:	d00f      	beq.n	8002446 <__ledf2+0x9e>
 8002426:	459a      	cmp	sl, r3
 8002428:	d1e1      	bne.n	80023ee <__ledf2+0x46>
 800242a:	42a5      	cmp	r5, r4
 800242c:	db05      	blt.n	800243a <__ledf2+0x92>
 800242e:	42be      	cmp	r6, r7
 8002430:	d8dd      	bhi.n	80023ee <__ledf2+0x46>
 8002432:	d019      	beq.n	8002468 <__ledf2+0xc0>
 8002434:	2000      	movs	r0, #0
 8002436:	42be      	cmp	r6, r7
 8002438:	d20a      	bcs.n	8002450 <__ledf2+0xa8>
 800243a:	4650      	mov	r0, sl
 800243c:	2301      	movs	r3, #1
 800243e:	3801      	subs	r0, #1
 8002440:	4398      	bics	r0, r3
 8002442:	3001      	adds	r0, #1
 8002444:	e004      	b.n	8002450 <__ledf2+0xa8>
 8002446:	2201      	movs	r2, #1
 8002448:	3b01      	subs	r3, #1
 800244a:	4393      	bics	r3, r2
 800244c:	0018      	movs	r0, r3
 800244e:	3001      	adds	r0, #1
 8002450:	bc1c      	pop	{r2, r3, r4}
 8002452:	4690      	mov	r8, r2
 8002454:	4699      	mov	r9, r3
 8002456:	46a2      	mov	sl, r4
 8002458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800245a:	433a      	orrs	r2, r7
 800245c:	d1d0      	bne.n	8002400 <__ledf2+0x58>
 800245e:	459a      	cmp	sl, r3
 8002460:	d1c5      	bne.n	80023ee <__ledf2+0x46>
 8002462:	42a5      	cmp	r5, r4
 8002464:	dcc3      	bgt.n	80023ee <__ledf2+0x46>
 8002466:	e7e0      	b.n	800242a <__ledf2+0x82>
 8002468:	45c8      	cmp	r8, r9
 800246a:	d8c0      	bhi.n	80023ee <__ledf2+0x46>
 800246c:	2000      	movs	r0, #0
 800246e:	45c8      	cmp	r8, r9
 8002470:	d3e3      	bcc.n	800243a <__ledf2+0x92>
 8002472:	e7ed      	b.n	8002450 <__ledf2+0xa8>
 8002474:	000007ff 	.word	0x000007ff

08002478 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002478:	b500      	push	{lr}
 800247a:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 800247c:	220c      	movs	r2, #12
 800247e:	2100      	movs	r1, #0
 8002480:	a801      	add	r0, sp, #4
 8002482:	f003 fa6a 	bl	800595a <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002486:	4822      	ldr	r0, [pc, #136]	; (8002510 <MX_ADC_Init+0x98>)
 8002488:	4b22      	ldr	r3, [pc, #136]	; (8002514 <MX_ADC_Init+0x9c>)
 800248a:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800248c:	2300      	movs	r3, #0
 800248e:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002490:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002492:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002494:	2201      	movs	r2, #1
 8002496:	6102      	str	r2, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002498:	2104      	movs	r1, #4
 800249a:	6141      	str	r1, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800249c:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800249e:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80024a0:	7682      	strb	r2, [r0, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80024a2:	76c3      	strb	r3, [r0, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024a4:	21c2      	movs	r1, #194	; 0xc2
 80024a6:	31ff      	adds	r1, #255	; 0xff
 80024a8:	61c1      	str	r1, [r0, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80024aa:	6203      	str	r3, [r0, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80024ac:	3324      	adds	r3, #36	; 0x24
 80024ae:	54c2      	strb	r2, [r0, r3]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80024b0:	6282      	str	r2, [r0, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80024b2:	f001 fb7b 	bl	8003bac <HAL_ADC_Init>
 80024b6:	2800      	cmp	r0, #0
 80024b8:	d11e      	bne.n	80024f8 <MX_ADC_Init+0x80>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	015b      	lsls	r3, r3, #5
 80024c2:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80024c4:	2307      	movs	r3, #7
 80024c6:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80024c8:	a901      	add	r1, sp, #4
 80024ca:	4811      	ldr	r0, [pc, #68]	; (8002510 <MX_ADC_Init+0x98>)
 80024cc:	f001 fd1e 	bl	8003f0c <HAL_ADC_ConfigChannel>
 80024d0:	2800      	cmp	r0, #0
 80024d2:	d114      	bne.n	80024fe <MX_ADC_Init+0x86>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80024d4:	2301      	movs	r3, #1
 80024d6:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80024d8:	a901      	add	r1, sp, #4
 80024da:	480d      	ldr	r0, [pc, #52]	; (8002510 <MX_ADC_Init+0x98>)
 80024dc:	f001 fd16 	bl	8003f0c <HAL_ADC_ConfigChannel>
 80024e0:	2800      	cmp	r0, #0
 80024e2:	d10f      	bne.n	8002504 <MX_ADC_Init+0x8c>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80024e4:	2309      	movs	r3, #9
 80024e6:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80024e8:	a901      	add	r1, sp, #4
 80024ea:	4809      	ldr	r0, [pc, #36]	; (8002510 <MX_ADC_Init+0x98>)
 80024ec:	f001 fd0e 	bl	8003f0c <HAL_ADC_ConfigChannel>
 80024f0:	2800      	cmp	r0, #0
 80024f2:	d10a      	bne.n	800250a <MX_ADC_Init+0x92>
  {
    Error_Handler();
  }

}
 80024f4:	b005      	add	sp, #20
 80024f6:	bd00      	pop	{pc}
    Error_Handler();
 80024f8:	f000 fbd6 	bl	8002ca8 <Error_Handler>
 80024fc:	e7dd      	b.n	80024ba <MX_ADC_Init+0x42>
    Error_Handler();
 80024fe:	f000 fbd3 	bl	8002ca8 <Error_Handler>
 8002502:	e7e7      	b.n	80024d4 <MX_ADC_Init+0x5c>
    Error_Handler();
 8002504:	f000 fbd0 	bl	8002ca8 <Error_Handler>
 8002508:	e7ec      	b.n	80024e4 <MX_ADC_Init+0x6c>
    Error_Handler();
 800250a:	f000 fbcd 	bl	8002ca8 <Error_Handler>
}
 800250e:	e7f1      	b.n	80024f4 <MX_ADC_Init+0x7c>
 8002510:	200007e0 	.word	0x200007e0
 8002514:	40012400 	.word	0x40012400

08002518 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002518:	b530      	push	{r4, r5, lr}
 800251a:	b089      	sub	sp, #36	; 0x24
 800251c:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251e:	2214      	movs	r2, #20
 8002520:	2100      	movs	r1, #0
 8002522:	a803      	add	r0, sp, #12
 8002524:	f003 fa19 	bl	800595a <memset>
  if(adcHandle->Instance==ADC1)
 8002528:	4b2b      	ldr	r3, [pc, #172]	; (80025d8 <HAL_ADC_MspInit+0xc0>)
 800252a:	6822      	ldr	r2, [r4, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d001      	beq.n	8002534 <HAL_ADC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002530:	b009      	add	sp, #36	; 0x24
 8002532:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002534:	4b29      	ldr	r3, [pc, #164]	; (80025dc <HAL_ADC_MspInit+0xc4>)
 8002536:	6999      	ldr	r1, [r3, #24]
 8002538:	2080      	movs	r0, #128	; 0x80
 800253a:	0080      	lsls	r0, r0, #2
 800253c:	4301      	orrs	r1, r0
 800253e:	6199      	str	r1, [r3, #24]
 8002540:	699a      	ldr	r2, [r3, #24]
 8002542:	4002      	ands	r2, r0
 8002544:	9200      	str	r2, [sp, #0]
 8002546:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002548:	6959      	ldr	r1, [r3, #20]
 800254a:	2080      	movs	r0, #128	; 0x80
 800254c:	0280      	lsls	r0, r0, #10
 800254e:	4301      	orrs	r1, r0
 8002550:	6159      	str	r1, [r3, #20]
 8002552:	695a      	ldr	r2, [r3, #20]
 8002554:	4002      	ands	r2, r0
 8002556:	9201      	str	r2, [sp, #4]
 8002558:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800255a:	695a      	ldr	r2, [r3, #20]
 800255c:	2180      	movs	r1, #128	; 0x80
 800255e:	02c9      	lsls	r1, r1, #11
 8002560:	430a      	orrs	r2, r1
 8002562:	615a      	str	r2, [r3, #20]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	400b      	ands	r3, r1
 8002568:	9302      	str	r3, [sp, #8]
 800256a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800256c:	2503      	movs	r5, #3
 800256e:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002570:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002572:	2090      	movs	r0, #144	; 0x90
 8002574:	a903      	add	r1, sp, #12
 8002576:	05c0      	lsls	r0, r0, #23
 8002578:	f001 fe8e 	bl	8004298 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800257c:	2302      	movs	r3, #2
 800257e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002580:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2500      	movs	r5, #0
 8002584:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002586:	a903      	add	r1, sp, #12
 8002588:	4815      	ldr	r0, [pc, #84]	; (80025e0 <HAL_ADC_MspInit+0xc8>)
 800258a:	f001 fe85 	bl	8004298 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 800258e:	4815      	ldr	r0, [pc, #84]	; (80025e4 <HAL_ADC_MspInit+0xcc>)
 8002590:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <HAL_ADC_MspInit+0xd0>)
 8002592:	6003      	str	r3, [r0, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002594:	6045      	str	r5, [r0, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002596:	6085      	str	r5, [r0, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002598:	2380      	movs	r3, #128	; 0x80
 800259a:	60c3      	str	r3, [r0, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800259c:	3380      	adds	r3, #128	; 0x80
 800259e:	6103      	str	r3, [r0, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025a0:	2380      	movs	r3, #128	; 0x80
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	6143      	str	r3, [r0, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80025a6:	2320      	movs	r3, #32
 80025a8:	6183      	str	r3, [r0, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 80025aa:	2380      	movs	r3, #128	; 0x80
 80025ac:	019b      	lsls	r3, r3, #6
 80025ae:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80025b0:	f001 fd7a 	bl	80040a8 <HAL_DMA_Init>
 80025b4:	2800      	cmp	r0, #0
 80025b6:	d10b      	bne.n	80025d0 <HAL_ADC_MspInit+0xb8>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80025b8:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <HAL_ADC_MspInit+0xcc>)
 80025ba:	6323      	str	r3, [r4, #48]	; 0x30
 80025bc:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80025be:	2200      	movs	r2, #0
 80025c0:	2100      	movs	r1, #0
 80025c2:	200c      	movs	r0, #12
 80025c4:	f001 fd20 	bl	8004008 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80025c8:	200c      	movs	r0, #12
 80025ca:	f001 fd47 	bl	800405c <HAL_NVIC_EnableIRQ>
}
 80025ce:	e7af      	b.n	8002530 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 80025d0:	f000 fb6a 	bl	8002ca8 <Error_Handler>
 80025d4:	e7f0      	b.n	80025b8 <HAL_ADC_MspInit+0xa0>
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	40012400 	.word	0x40012400
 80025dc:	40021000 	.word	0x40021000
 80025e0:	48000400 	.word	0x48000400
 80025e4:	2000079c 	.word	0x2000079c
 80025e8:	40020008 	.word	0x40020008

080025ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80025ec:	b500      	push	{lr}
 80025ee:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025f0:	4a09      	ldr	r2, [pc, #36]	; (8002618 <MX_DMA_Init+0x2c>)
 80025f2:	6951      	ldr	r1, [r2, #20]
 80025f4:	2301      	movs	r3, #1
 80025f6:	4319      	orrs	r1, r3
 80025f8:	6151      	str	r1, [r2, #20]
 80025fa:	6952      	ldr	r2, [r2, #20]
 80025fc:	4013      	ands	r3, r2
 80025fe:	9301      	str	r3, [sp, #4]
 8002600:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002602:	2200      	movs	r2, #0
 8002604:	2100      	movs	r1, #0
 8002606:	2009      	movs	r0, #9
 8002608:	f001 fcfe 	bl	8004008 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800260c:	2009      	movs	r0, #9
 800260e:	f001 fd25 	bl	800405c <HAL_NVIC_EnableIRQ>

}
 8002612:	b003      	add	sp, #12
 8002614:	bd00      	pop	{pc}
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	40021000 	.word	0x40021000

0800261c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800261c:	b510      	push	{r4, lr}
 800261e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	2214      	movs	r2, #20
 8002622:	2100      	movs	r1, #0
 8002624:	a803      	add	r0, sp, #12
 8002626:	f003 f998 	bl	800595a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800262a:	4b13      	ldr	r3, [pc, #76]	; (8002678 <MX_GPIO_Init+0x5c>)
 800262c:	6959      	ldr	r1, [r3, #20]
 800262e:	2080      	movs	r0, #128	; 0x80
 8002630:	0280      	lsls	r0, r0, #10
 8002632:	4301      	orrs	r1, r0
 8002634:	6159      	str	r1, [r3, #20]
 8002636:	695a      	ldr	r2, [r3, #20]
 8002638:	4002      	ands	r2, r0
 800263a:	9201      	str	r2, [sp, #4]
 800263c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800263e:	695a      	ldr	r2, [r3, #20]
 8002640:	2180      	movs	r1, #128	; 0x80
 8002642:	02c9      	lsls	r1, r1, #11
 8002644:	430a      	orrs	r2, r1
 8002646:	615a      	str	r2, [r3, #20]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	400b      	ands	r3, r1
 800264c:	9302      	str	r3, [sp, #8]
 800264e:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8002650:	4c0a      	ldr	r4, [pc, #40]	; (800267c <MX_GPIO_Init+0x60>)
 8002652:	2200      	movs	r2, #0
 8002654:	2180      	movs	r1, #128	; 0x80
 8002656:	0020      	movs	r0, r4
 8002658:	f001 fed2 	bl	8004400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002660:	3b7f      	subs	r3, #127	; 0x7f
 8002662:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002664:	2300      	movs	r3, #0
 8002666:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002668:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800266a:	a903      	add	r1, sp, #12
 800266c:	0020      	movs	r0, r4
 800266e:	f001 fe13 	bl	8004298 <HAL_GPIO_Init>

}
 8002672:	b008      	add	sp, #32
 8002674:	bd10      	pop	{r4, pc}
 8002676:	46c0      	nop			; (mov r8, r8)
 8002678:	40021000 	.word	0x40021000
 800267c:	48000400 	.word	0x48000400

08002680 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002680:	b510      	push	{r4, lr}

  hi2c1.Instance = I2C1;
 8002682:	4814      	ldr	r0, [pc, #80]	; (80026d4 <MX_I2C1_Init+0x54>)
 8002684:	4b14      	ldr	r3, [pc, #80]	; (80026d8 <MX_I2C1_Init+0x58>)
 8002686:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x004036FF;
 8002688:	4b14      	ldr	r3, [pc, #80]	; (80026dc <MX_I2C1_Init+0x5c>)
 800268a:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002690:	2201      	movs	r2, #1
 8002692:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002694:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002696:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002698:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800269a:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800269c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800269e:	f002 f809 	bl	80046b4 <HAL_I2C_Init>
 80026a2:	2800      	cmp	r0, #0
 80026a4:	d10c      	bne.n	80026c0 <MX_I2C1_Init+0x40>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026a6:	2100      	movs	r1, #0
 80026a8:	480a      	ldr	r0, [pc, #40]	; (80026d4 <MX_I2C1_Init+0x54>)
 80026aa:	f002 fa3b 	bl	8004b24 <HAL_I2CEx_ConfigAnalogFilter>
 80026ae:	2800      	cmp	r0, #0
 80026b0:	d109      	bne.n	80026c6 <MX_I2C1_Init+0x46>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80026b2:	2100      	movs	r1, #0
 80026b4:	4807      	ldr	r0, [pc, #28]	; (80026d4 <MX_I2C1_Init+0x54>)
 80026b6:	f002 fa5b 	bl	8004b70 <HAL_I2CEx_ConfigDigitalFilter>
 80026ba:	2800      	cmp	r0, #0
 80026bc:	d106      	bne.n	80026cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
  }

}
 80026be:	bd10      	pop	{r4, pc}
    Error_Handler();
 80026c0:	f000 faf2 	bl	8002ca8 <Error_Handler>
 80026c4:	e7ef      	b.n	80026a6 <MX_I2C1_Init+0x26>
    Error_Handler();
 80026c6:	f000 faef 	bl	8002ca8 <Error_Handler>
 80026ca:	e7f2      	b.n	80026b2 <MX_I2C1_Init+0x32>
    Error_Handler();
 80026cc:	f000 faec 	bl	8002ca8 <Error_Handler>
}
 80026d0:	e7f5      	b.n	80026be <MX_I2C1_Init+0x3e>
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	20000820 	.word	0x20000820
 80026d8:	40005400 	.word	0x40005400
 80026dc:	004036ff 	.word	0x004036ff

080026e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80026e0:	b510      	push	{r4, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e6:	2214      	movs	r2, #20
 80026e8:	2100      	movs	r1, #0
 80026ea:	a803      	add	r0, sp, #12
 80026ec:	f003 f935 	bl	800595a <memset>
  if(i2cHandle->Instance==I2C1)
 80026f0:	4b14      	ldr	r3, [pc, #80]	; (8002744 <HAL_I2C_MspInit+0x64>)
 80026f2:	6822      	ldr	r2, [r4, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d001      	beq.n	80026fc <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80026f8:	b008      	add	sp, #32
 80026fa:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026fc:	4c12      	ldr	r4, [pc, #72]	; (8002748 <HAL_I2C_MspInit+0x68>)
 80026fe:	6962      	ldr	r2, [r4, #20]
 8002700:	2180      	movs	r1, #128	; 0x80
 8002702:	0289      	lsls	r1, r1, #10
 8002704:	430a      	orrs	r2, r1
 8002706:	6162      	str	r2, [r4, #20]
 8002708:	6963      	ldr	r3, [r4, #20]
 800270a:	400b      	ands	r3, r1
 800270c:	9301      	str	r3, [sp, #4]
 800270e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002710:	23c0      	movs	r3, #192	; 0xc0
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002716:	2312      	movs	r3, #18
 8002718:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800271a:	3b11      	subs	r3, #17
 800271c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800271e:	3302      	adds	r3, #2
 8002720:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002722:	3301      	adds	r3, #1
 8002724:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002726:	2090      	movs	r0, #144	; 0x90
 8002728:	a903      	add	r1, sp, #12
 800272a:	05c0      	lsls	r0, r0, #23
 800272c:	f001 fdb4 	bl	8004298 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002730:	69e2      	ldr	r2, [r4, #28]
 8002732:	2180      	movs	r1, #128	; 0x80
 8002734:	0389      	lsls	r1, r1, #14
 8002736:	430a      	orrs	r2, r1
 8002738:	61e2      	str	r2, [r4, #28]
 800273a:	69e3      	ldr	r3, [r4, #28]
 800273c:	400b      	ands	r3, r1
 800273e:	9302      	str	r3, [sp, #8]
 8002740:	9b02      	ldr	r3, [sp, #8]
}
 8002742:	e7d9      	b.n	80026f8 <HAL_I2C_MspInit+0x18>
 8002744:	40005400 	.word	0x40005400
 8002748:	40021000 	.word	0x40021000

0800274c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 800274c:	b510      	push	{r4, lr}

  hiwdg.Instance = IWDG;
 800274e:	4808      	ldr	r0, [pc, #32]	; (8002770 <MX_IWDG_Init+0x24>)
 8002750:	4b08      	ldr	r3, [pc, #32]	; (8002774 <MX_IWDG_Init+0x28>)
 8002752:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8002754:	2304      	movs	r3, #4
 8002756:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Window = 625;
 8002758:	4b07      	ldr	r3, [pc, #28]	; (8002778 <MX_IWDG_Init+0x2c>)
 800275a:	60c3      	str	r3, [r0, #12]
  hiwdg.Init.Reload = 625;
 800275c:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800275e:	f002 fa2b 	bl	8004bb8 <HAL_IWDG_Init>
 8002762:	2800      	cmp	r0, #0
 8002764:	d100      	bne.n	8002768 <MX_IWDG_Init+0x1c>
  {
    Error_Handler();
  }

}
 8002766:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002768:	f000 fa9e 	bl	8002ca8 <Error_Handler>
}
 800276c:	e7fb      	b.n	8002766 <MX_IWDG_Init+0x1a>
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	2000086c 	.word	0x2000086c
 8002774:	40003000 	.word	0x40003000
 8002778:	00000271 	.word	0x00000271

0800277c <OLED_Show_Time>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void OLED_Show_Time()
{
 800277c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800277e:	b089      	sub	sp, #36	; 0x24
	RTC_TimeTypeDef T;
	RTC_DateTypeDef D;
	HAL_RTC_GetTime(&hrtc, &T, RTC_FORMAT_BIN);
 8002780:	4d3e      	ldr	r5, [pc, #248]	; (800287c <OLED_Show_Time+0x100>)
 8002782:	2200      	movs	r2, #0
 8002784:	a903      	add	r1, sp, #12
 8002786:	0028      	movs	r0, r5
 8002788:	f002 fc04 	bl	8004f94 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &D, RTC_FORMAT_BIN);
 800278c:	ac02      	add	r4, sp, #8
 800278e:	2200      	movs	r2, #0
 8002790:	0021      	movs	r1, r4
 8002792:	0028      	movs	r0, r5
 8002794:	f002 fc28 	bl	8004fe8 <HAL_RTC_GetDate>
	if(D.Year==0)
 8002798:	78e3      	ldrb	r3, [r4, #3]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d05f      	beq.n	800285e <OLED_Show_Time+0xe2>
	{
		mcu_get_system_time();
		HAL_RTC_GetTime(&hrtc, &T, RTC_FORMAT_BIN);
		HAL_RTC_GetDate(&hrtc, &D, RTC_FORMAT_BIN);
	}
	OLED_ShowNum(DX, DY, D.Year+2000, 4, 16,' ');
 800279e:	ae02      	add	r6, sp, #8
 80027a0:	78f2      	ldrb	r2, [r6, #3]
 80027a2:	23fa      	movs	r3, #250	; 0xfa
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	469c      	mov	ip, r3
 80027a8:	4462      	add	r2, ip
 80027aa:	2320      	movs	r3, #32
 80027ac:	9301      	str	r3, [sp, #4]
 80027ae:	2410      	movs	r4, #16
 80027b0:	9400      	str	r4, [sp, #0]
 80027b2:	3b1c      	subs	r3, #28
 80027b4:	2100      	movs	r1, #0
 80027b6:	2000      	movs	r0, #0
 80027b8:	f000 fe3e 	bl	8003438 <OLED_ShowNum>
	OLED_ShowCHinese(DX+8*4, DY, 0);					//Year
 80027bc:	2200      	movs	r2, #0
 80027be:	2100      	movs	r1, #0
 80027c0:	2020      	movs	r0, #32
 80027c2:	f000 fec1 	bl	8003548 <OLED_ShowCHinese>
	OLED_ShowNum(DX+8*4+16*1, DY, D.Month, 2, 16,'0');
 80027c6:	7872      	ldrb	r2, [r6, #1]
 80027c8:	2530      	movs	r5, #48	; 0x30
 80027ca:	9501      	str	r5, [sp, #4]
 80027cc:	9400      	str	r4, [sp, #0]
 80027ce:	2302      	movs	r3, #2
 80027d0:	2100      	movs	r1, #0
 80027d2:	2030      	movs	r0, #48	; 0x30
 80027d4:	f000 fe30 	bl	8003438 <OLED_ShowNum>
	OLED_ShowCHinese(DX+8*6+16*1, DY, 1); 				//Month
 80027d8:	2201      	movs	r2, #1
 80027da:	2100      	movs	r1, #0
 80027dc:	2040      	movs	r0, #64	; 0x40
 80027de:	f000 feb3 	bl	8003548 <OLED_ShowCHinese>
	OLED_ShowNum(DX+8*6+16*2, DY, D.Date, 2, 16,'0');
 80027e2:	78b2      	ldrb	r2, [r6, #2]
 80027e4:	9501      	str	r5, [sp, #4]
 80027e6:	9400      	str	r4, [sp, #0]
 80027e8:	2302      	movs	r3, #2
 80027ea:	2100      	movs	r1, #0
 80027ec:	2050      	movs	r0, #80	; 0x50
 80027ee:	f000 fe23 	bl	8003438 <OLED_ShowNum>
	OLED_ShowCHinese(DX+8*8+16*2, DY, 2);				//Day
 80027f2:	2202      	movs	r2, #2
 80027f4:	2100      	movs	r1, #0
 80027f6:	2060      	movs	r0, #96	; 0x60
 80027f8:	f000 fea6 	bl	8003548 <OLED_ShowCHinese>
	OLED_ShowCHinese(DX+8*8+16*3, DY, D.WeekDay+5);		//Week
 80027fc:	7832      	ldrb	r2, [r6, #0]
 80027fe:	3205      	adds	r2, #5
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	2100      	movs	r1, #0
 8002804:	2070      	movs	r0, #112	; 0x70
 8002806:	f000 fe9f 	bl	8003548 <OLED_ShowCHinese>

	OLED_ShowNum(TX+8*0, TY, T.Hours, 2, 16, '0');		//Hours
 800280a:	ae03      	add	r6, sp, #12
 800280c:	7832      	ldrb	r2, [r6, #0]
 800280e:	9501      	str	r5, [sp, #4]
 8002810:	9400      	str	r4, [sp, #0]
 8002812:	2302      	movs	r3, #2
 8002814:	2102      	movs	r1, #2
 8002816:	2020      	movs	r0, #32
 8002818:	f000 fe0e 	bl	8003438 <OLED_ShowNum>
	OLED_ShowChar(TX+8*2, TY, ':', 16, 0);
 800281c:	2700      	movs	r7, #0
 800281e:	9700      	str	r7, [sp, #0]
 8002820:	2310      	movs	r3, #16
 8002822:	223a      	movs	r2, #58	; 0x3a
 8002824:	2102      	movs	r1, #2
 8002826:	2030      	movs	r0, #48	; 0x30
 8002828:	f000 fdca 	bl	80033c0 <OLED_ShowChar>
	OLED_ShowNum(TX+8*3, TY, T.Minutes, 2, 16, '0');	//Minutes
 800282c:	7872      	ldrb	r2, [r6, #1]
 800282e:	9501      	str	r5, [sp, #4]
 8002830:	9400      	str	r4, [sp, #0]
 8002832:	2302      	movs	r3, #2
 8002834:	2102      	movs	r1, #2
 8002836:	2038      	movs	r0, #56	; 0x38
 8002838:	f000 fdfe 	bl	8003438 <OLED_ShowNum>
	OLED_ShowChar(TX+8*5, TY, ':', 16, 0);
 800283c:	9700      	str	r7, [sp, #0]
 800283e:	2310      	movs	r3, #16
 8002840:	223a      	movs	r2, #58	; 0x3a
 8002842:	2102      	movs	r1, #2
 8002844:	2048      	movs	r0, #72	; 0x48
 8002846:	f000 fdbb 	bl	80033c0 <OLED_ShowChar>
	OLED_ShowNum(TX+8*6, TY, T.Seconds, 2, 16, '0');	//Seconds
 800284a:	78b2      	ldrb	r2, [r6, #2]
 800284c:	9501      	str	r5, [sp, #4]
 800284e:	9400      	str	r4, [sp, #0]
 8002850:	2302      	movs	r3, #2
 8002852:	2102      	movs	r1, #2
 8002854:	2050      	movs	r0, #80	; 0x50
 8002856:	f000 fdef 	bl	8003438 <OLED_ShowNum>

	//OLED_Refreash();
}
 800285a:	b009      	add	sp, #36	; 0x24
 800285c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		mcu_get_system_time();
 800285e:	f000 fd65 	bl	800332c <mcu_get_system_time>
		HAL_RTC_GetTime(&hrtc, &T, RTC_FORMAT_BIN);
 8002862:	4c06      	ldr	r4, [pc, #24]	; (800287c <OLED_Show_Time+0x100>)
 8002864:	2200      	movs	r2, #0
 8002866:	a903      	add	r1, sp, #12
 8002868:	0020      	movs	r0, r4
 800286a:	f002 fb93 	bl	8004f94 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &D, RTC_FORMAT_BIN);
 800286e:	2200      	movs	r2, #0
 8002870:	a902      	add	r1, sp, #8
 8002872:	0020      	movs	r0, r4
 8002874:	f002 fbb8 	bl	8004fe8 <HAL_RTC_GetDate>
 8002878:	e791      	b.n	800279e <OLED_Show_Time+0x22>
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	20000888 	.word	0x20000888

08002880 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002880:	b510      	push	{r4, lr}
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002882:	4a4e      	ldr	r2, [pc, #312]	; (80029bc <SystemClock_Config+0x13c>)
 8002884:	6813      	ldr	r3, [r2, #0]
 8002886:	2101      	movs	r1, #1
 8002888:	430b      	orrs	r3, r1
 800288a:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800288c:	0011      	movs	r1, r2
 800288e:	2201      	movs	r2, #1
 8002890:	680b      	ldr	r3, [r1, #0]
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
	while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 8002892:	421a      	tst	r2, r3
 8002894:	d0fc      	beq.n	8002890 <SystemClock_Config+0x10>
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002896:	4a4a      	ldr	r2, [pc, #296]	; (80029c0 <SystemClock_Config+0x140>)
 8002898:	6813      	ldr	r3, [r2, #0]
 800289a:	2101      	movs	r1, #1
 800289c:	430b      	orrs	r3, r1
 800289e:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80028a0:	0011      	movs	r1, r2
 80028a2:	2202      	movs	r2, #2
 80028a4:	680b      	ldr	r3, [r1, #0]
	{
	}
	LL_RCC_HSI_Enable();

	/* Wait till HSI is ready */
	while(LL_RCC_HSI_IsReady() != 1)
 80028a6:	421a      	tst	r2, r3
 80028a8:	d0fc      	beq.n	80028a4 <SystemClock_Config+0x24>
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80028aa:	4a45      	ldr	r2, [pc, #276]	; (80029c0 <SystemClock_Config+0x140>)
 80028ac:	6813      	ldr	r3, [r2, #0]
 80028ae:	21f8      	movs	r1, #248	; 0xf8
 80028b0:	438b      	bics	r3, r1
 80028b2:	3978      	subs	r1, #120	; 0x78
 80028b4:	430b      	orrs	r3, r1
 80028b6:	6013      	str	r3, [r2, #0]
  * @rmtoll CR2          HSI14ON       LL_RCC_HSI14_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_Enable(void)
{
  SET_BIT(RCC->CR2, RCC_CR2_HSI14ON);
 80028b8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80028ba:	397f      	subs	r1, #127	; 0x7f
 80028bc:	430b      	orrs	r3, r1
 80028be:	6353      	str	r3, [r2, #52]	; 0x34
  * @rmtoll CR2          HSI14RDY      LL_RCC_HSI14_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI14_IsReady(void)
{
  return (READ_BIT(RCC->CR2, RCC_CR2_HSI14RDY) == (RCC_CR2_HSI14RDY));
 80028c0:	0011      	movs	r1, r2
 80028c2:	2202      	movs	r2, #2
 80028c4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
	}
	LL_RCC_HSI_SetCalibTrimming(16);
	LL_RCC_HSI14_Enable();

	/* Wait till HSI14 is ready */
	while(LL_RCC_HSI14_IsReady() != 1)
 80028c6:	421a      	tst	r2, r3
 80028c8:	d0fc      	beq.n	80028c4 <SystemClock_Config+0x44>
  * @param  Value between Min_Data = 0x00 and Max_Data = 0xFF
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->CR2, RCC_CR2_HSI14TRIM, Value << RCC_POSITION_HSI14TRIM);
 80028ca:	4a3d      	ldr	r2, [pc, #244]	; (80029c0 <SystemClock_Config+0x140>)
 80028cc:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80028ce:	21f8      	movs	r1, #248	; 0xf8
 80028d0:	438b      	bics	r3, r1
 80028d2:	3978      	subs	r1, #120	; 0x78
 80028d4:	430b      	orrs	r3, r1
 80028d6:	6353      	str	r3, [r2, #52]	; 0x34
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80028d8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80028da:	397f      	subs	r1, #127	; 0x7f
 80028dc:	430b      	orrs	r3, r1
 80028de:	6253      	str	r3, [r2, #36]	; 0x24
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 80028e0:	0011      	movs	r1, r2
 80028e2:	2202      	movs	r2, #2
 80028e4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	}
	LL_RCC_HSI14_SetCalibTrimming(16);
	LL_RCC_LSI_Enable();

	/* Wait till LSI is ready */
	while(LL_RCC_LSI_IsReady() != 1)
 80028e6:	421a      	tst	r2, r3
 80028e8:	d0fc      	beq.n	80028e4 <SystemClock_Config+0x64>
  * @rmtoll CR    DBP       LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ea:	4a36      	ldr	r2, [pc, #216]	; (80029c4 <SystemClock_Config+0x144>)
 80028ec:	6811      	ldr	r1, [r2, #0]
 80028ee:	2380      	movs	r3, #128	; 0x80
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	430b      	orrs	r3, r1
 80028f4:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  */
__STATIC_INLINE uint32_t LL_RCC_GetRTCClockSource(void)
{
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80028f6:	4b32      	ldr	r3, [pc, #200]	; (80029c0 <SystemClock_Config+0x140>)
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	22c0      	movs	r2, #192	; 0xc0
 80028fc:	0092      	lsls	r2, r2, #2
 80028fe:	4013      	ands	r3, r2
	{

	}
	LL_PWR_EnableBkUpAccess();
	if(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSI)
 8002900:	3a01      	subs	r2, #1
 8002902:	3aff      	subs	r2, #255	; 0xff
 8002904:	4293      	cmp	r3, r2
 8002906:	d010      	beq.n	800292a <SystemClock_Config+0xaa>
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002908:	4b2d      	ldr	r3, [pc, #180]	; (80029c0 <SystemClock_Config+0x140>)
 800290a:	6a19      	ldr	r1, [r3, #32]
 800290c:	2280      	movs	r2, #128	; 0x80
 800290e:	0252      	lsls	r2, r2, #9
 8002910:	430a      	orrs	r2, r1
 8002912:	621a      	str	r2, [r3, #32]
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002914:	6a1a      	ldr	r2, [r3, #32]
 8002916:	492c      	ldr	r1, [pc, #176]	; (80029c8 <SystemClock_Config+0x148>)
 8002918:	400a      	ands	r2, r1
 800291a:	621a      	str	r2, [r3, #32]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800291c:	6a1a      	ldr	r2, [r3, #32]
 800291e:	492b      	ldr	r1, [pc, #172]	; (80029cc <SystemClock_Config+0x14c>)
 8002920:	4011      	ands	r1, r2
 8002922:	2280      	movs	r2, #128	; 0x80
 8002924:	0092      	lsls	r2, r2, #2
 8002926:	430a      	orrs	r2, r1
 8002928:	621a      	str	r2, [r3, #32]
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800292a:	4b25      	ldr	r3, [pc, #148]	; (80029c0 <SystemClock_Config+0x140>)
 800292c:	6a19      	ldr	r1, [r3, #32]
 800292e:	2280      	movs	r2, #128	; 0x80
 8002930:	0212      	lsls	r2, r2, #8
 8002932:	430a      	orrs	r2, r1
 8002934:	621a      	str	r2, [r3, #32]
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	4925      	ldr	r1, [pc, #148]	; (80029d0 <SystemClock_Config+0x150>)
 800293a:	4011      	ands	r1, r2
 800293c:	22a0      	movs	r2, #160	; 0xa0
 800293e:	0392      	lsls	r2, r2, #14
 8002940:	430a      	orrs	r2, r1
 8002942:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 8002944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002946:	210f      	movs	r1, #15
 8002948:	438a      	bics	r2, r1
 800294a:	62da      	str	r2, [r3, #44]	; 0x2c
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800294c:	6819      	ldr	r1, [r3, #0]
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	0452      	lsls	r2, r2, #17
 8002952:	430a      	orrs	r2, r1
 8002954:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8002956:	0019      	movs	r1, r3
 8002958:	2280      	movs	r2, #128	; 0x80
 800295a:	0492      	lsls	r2, r2, #18
 800295c:	680b      	ldr	r3, [r1, #0]
	LL_RCC_EnableRTC();
	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_12);
	LL_RCC_PLL_Enable();

	/* Wait till PLL is ready */
	while(LL_RCC_PLL_IsReady() != 1)
 800295e:	4213      	tst	r3, r2
 8002960:	d0fc      	beq.n	800295c <SystemClock_Config+0xdc>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002962:	4b17      	ldr	r3, [pc, #92]	; (80029c0 <SystemClock_Config+0x140>)
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	21f0      	movs	r1, #240	; 0xf0
 8002968:	438a      	bics	r2, r1
 800296a:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	4919      	ldr	r1, [pc, #100]	; (80029d4 <SystemClock_Config+0x154>)
 8002970:	400a      	ands	r2, r1
 8002972:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	2103      	movs	r1, #3
 8002978:	438a      	bics	r2, r1
 800297a:	3901      	subs	r1, #1
 800297c:	430a      	orrs	r2, r1
 800297e:	605a      	str	r2, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002980:	0019      	movs	r1, r3
 8002982:	220c      	movs	r2, #12
 8002984:	684b      	ldr	r3, [r1, #4]
 8002986:	4013      	ands	r3, r2
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

	/* Wait till System clock is ready */
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002988:	2b08      	cmp	r3, #8
 800298a:	d1fb      	bne.n	8002984 <SystemClock_Config+0x104>
	{

	}
	LL_SetSystemCoreClock(48000000);
 800298c:	4812      	ldr	r0, [pc, #72]	; (80029d8 <SystemClock_Config+0x158>)
 800298e:	f002 ffb1 	bl	80058f4 <LL_SetSystemCoreClock>

	/* Update the time base */
	if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8002992:	2000      	movs	r0, #0
 8002994:	f001 f866 	bl	8003a64 <HAL_InitTick>
 8002998:	2800      	cmp	r0, #0
 800299a:	d10d      	bne.n	80029b8 <SystemClock_Config+0x138>
  CLEAR_BIT(RCC->CR2, RCC_CR2_HSI14DIS);
 800299c:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <SystemClock_Config+0x140>)
 800299e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029a0:	2104      	movs	r1, #4
 80029a2:	438a      	bics	r2, r1
 80029a4:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 80029a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029a8:	3901      	subs	r1, #1
 80029aa:	438a      	bics	r2, r1
 80029ac:	631a      	str	r2, [r3, #48]	; 0x30
  MODIFY_REG(RCC->CFGR3, RCC_CFGR3_I2C1SW, I2CxSource);
 80029ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029b0:	310d      	adds	r1, #13
 80029b2:	430a      	orrs	r2, r1
 80029b4:	631a      	str	r2, [r3, #48]	; 0x30
		Error_Handler();
	}
	LL_RCC_HSI14_EnableADCControl();
	LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK1);
	LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_SYSCLK);
}
 80029b6:	bd10      	pop	{r4, pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029b8:	b672      	cpsid	i
 80029ba:	e7fe      	b.n	80029ba <SystemClock_Config+0x13a>
 80029bc:	40022000 	.word	0x40022000
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40007000 	.word	0x40007000
 80029c8:	fffeffff 	.word	0xfffeffff
 80029cc:	fffffcff 	.word	0xfffffcff
 80029d0:	ffc2ffff 	.word	0xffc2ffff
 80029d4:	fffff8ff 	.word	0xfffff8ff
 80029d8:	02dc6c00 	.word	0x02dc6c00

080029dc <main>:
{
 80029dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029de:	46c6      	mov	lr, r8
 80029e0:	b500      	push	{lr}
 80029e2:	b082      	sub	sp, #8
	HAL_Init();
 80029e4:	f001 f862 	bl	8003aac <HAL_Init>
	SystemClock_Config();
 80029e8:	f7ff ff4a 	bl	8002880 <SystemClock_Config>
	MX_GPIO_Init();
 80029ec:	f7ff fe16 	bl	800261c <MX_GPIO_Init>
	MX_DMA_Init();
 80029f0:	f7ff fdfc 	bl	80025ec <MX_DMA_Init>
	MX_ADC_Init();
 80029f4:	f7ff fd40 	bl	8002478 <MX_ADC_Init>
	MX_I2C1_Init();
 80029f8:	f7ff fe42 	bl	8002680 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 80029fc:	f000 fa28 	bl	8002e50 <MX_USART1_UART_Init>
	MX_RTC_Init();
 8002a00:	f000 f954 	bl	8002cac <MX_RTC_Init>
	MX_TIM17_Init();
 8002a04:	f000 f9ea 	bl	8002ddc <MX_TIM17_Init>
	MX_IWDG_Init();
 8002a08:	f7ff fea0 	bl	800274c <MX_IWDG_Init>
	OLED_Init();
 8002a0c:	f000 fcc0 	bl	8003390 <OLED_Init>
	OLED_Clear();
 8002a10:	f000 fcc6 	bl	80033a0 <OLED_Clear>
	OLED_Refreash();
 8002a14:	f000 fca6 	bl	8003364 <OLED_Refreash>
	sht30_init();
 8002a18:	f000 fad8 	bl	8002fcc <sht30_init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002a1c:	4b81      	ldr	r3, [pc, #516]	; (8002c24 <main+0x248>)
 8002a1e:	2202      	movs	r2, #2
 8002a20:	4252      	negs	r2, r2
 8002a22:	611a      	str	r2, [r3, #16]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002a24:	68d9      	ldr	r1, [r3, #12]
 8002a26:	2001      	movs	r0, #1
 8002a28:	4301      	orrs	r1, r0
 8002a2a:	60d9      	str	r1, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	4302      	orrs	r2, r0
 8002a30:	601a      	str	r2, [r3, #0]
	HAL_Delay(200);
 8002a32:	30c7      	adds	r0, #199	; 0xc7
 8002a34:	f001 f85c 	bl	8003af0 <HAL_Delay>
	wifi_protocol_init();
 8002a38:	f000 fc62 	bl	8003300 <wifi_protocol_init>
	HAL_UART_Receive_IT(&huart1,&aRxBuffer,1);
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	497a      	ldr	r1, [pc, #488]	; (8002c28 <main+0x24c>)
 8002a40:	487a      	ldr	r0, [pc, #488]	; (8002c2c <main+0x250>)
 8002a42:	f002 feeb 	bl	800581c <HAL_UART_Receive_IT>
	mcu_get_system_time();
 8002a46:	f000 fc71 	bl	800332c <mcu_get_system_time>
	HAL_ADC_Start_DMA(&hadc, (uint32_t*)ADval, 3);
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	4978      	ldr	r1, [pc, #480]	; (8002c30 <main+0x254>)
 8002a4e:	4879      	ldr	r0, [pc, #484]	; (8002c34 <main+0x258>)
 8002a50:	f001 f952 	bl	8003cf8 <HAL_ADC_Start_DMA>
	unsigned char perIR=0,isClear=0;
 8002a54:	2600      	movs	r6, #0
 8002a56:	e011      	b.n	8002a7c <main+0xa0>
		if(!isDisplay)
 8002a58:	4b77      	ldr	r3, [pc, #476]	; (8002c38 <main+0x25c>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d128      	bne.n	8002ab2 <main+0xd6>
			if(!isClear)
 8002a60:	2e00      	cmp	r6, #0
 8002a62:	d021      	beq.n	8002aa8 <main+0xcc>
			HAL_IWDG_Refresh(&hiwdg);
 8002a64:	4875      	ldr	r0, [pc, #468]	; (8002c3c <main+0x260>)
 8002a66:	f002 f8d3 	bl	8004c10 <HAL_IWDG_Refresh>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	2180      	movs	r1, #128	; 0x80
 8002a6e:	4874      	ldr	r0, [pc, #464]	; (8002c40 <main+0x264>)
 8002a70:	f001 fcc6 	bl	8004400 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8002a74:	2064      	movs	r0, #100	; 0x64
 8002a76:	f001 f83b 	bl	8003af0 <HAL_Delay>
			continue;
 8002a7a:	2601      	movs	r6, #1
		wifi_uart_service();
 8002a7c:	f000 fbc6 	bl	800320c <wifi_uart_service>
		perIR=ADval[IRR_Ar];
 8002a80:	4c6b      	ldr	r4, [pc, #428]	; (8002c30 <main+0x254>)
 8002a82:	88a5      	ldrh	r5, [r4, #4]
		sht30_sample(&Temperature, &Humidity);
 8002a84:	496f      	ldr	r1, [pc, #444]	; (8002c44 <main+0x268>)
 8002a86:	4870      	ldr	r0, [pc, #448]	; (8002c48 <main+0x26c>)
 8002a88:	f000 fab0 	bl	8002fec <sht30_sample>
		all_data_update();
 8002a8c:	f000 fd90 	bl	80035b0 <all_data_update>
		if(ADval[IRR_Ar]>=220 && perIR<=200)
 8002a90:	88a3      	ldrh	r3, [r4, #4]
 8002a92:	2bdb      	cmp	r3, #219	; 0xdb
 8002a94:	d9e0      	bls.n	8002a58 <main+0x7c>
 8002a96:	b2ed      	uxtb	r5, r5
 8002a98:	2dc8      	cmp	r5, #200	; 0xc8
 8002a9a:	d8dd      	bhi.n	8002a58 <main+0x7c>
			isDisplay=!isDisplay;
 8002a9c:	4a66      	ldr	r2, [pc, #408]	; (8002c38 <main+0x25c>)
 8002a9e:	7813      	ldrb	r3, [r2, #0]
 8002aa0:	4259      	negs	r1, r3
 8002aa2:	414b      	adcs	r3, r1
 8002aa4:	7013      	strb	r3, [r2, #0]
 8002aa6:	e7d7      	b.n	8002a58 <main+0x7c>
				OLED_Clear();
 8002aa8:	f000 fc7a 	bl	80033a0 <OLED_Clear>
				OLED_Refreash();
 8002aac:	f000 fc5a 	bl	8003364 <OLED_Refreash>
 8002ab0:	e7d8      	b.n	8002a64 <main+0x88>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8002ab2:	2180      	movs	r1, #128	; 0x80
 8002ab4:	4862      	ldr	r0, [pc, #392]	; (8002c40 <main+0x264>)
 8002ab6:	f001 fca9 	bl	800440c <HAL_GPIO_TogglePin>
		OLED_ShowString(0, 4, (unsigned char*)"Light:", 16);
 8002aba:	2310      	movs	r3, #16
 8002abc:	4a63      	ldr	r2, [pc, #396]	; (8002c4c <main+0x270>)
 8002abe:	2104      	movs	r1, #4
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f000 fd1b 	bl	80034fc <OLED_ShowString>
		OLED_ShowNum(48, 4, 100-ADval[Light_Ar]/40.96, 2, 16,' ');
 8002ac6:	4e5a      	ldr	r6, [pc, #360]	; (8002c30 <main+0x254>)
 8002ac8:	8830      	ldrh	r0, [r6, #0]
 8002aca:	f7ff fa37 	bl	8001f3c <__aeabi_i2d>
 8002ace:	4a60      	ldr	r2, [pc, #384]	; (8002c50 <main+0x274>)
 8002ad0:	4b60      	ldr	r3, [pc, #384]	; (8002c54 <main+0x278>)
 8002ad2:	f7fe f941 	bl	8000d58 <__aeabi_ddiv>
 8002ad6:	0002      	movs	r2, r0
 8002ad8:	000b      	movs	r3, r1
 8002ada:	2000      	movs	r0, #0
 8002adc:	495e      	ldr	r1, [pc, #376]	; (8002c58 <main+0x27c>)
 8002ade:	f7fe feaf 	bl	8001840 <__aeabi_dsub>
 8002ae2:	f7fd fcb3 	bl	800044c <__aeabi_d2uiz>
 8002ae6:	0002      	movs	r2, r0
 8002ae8:	2520      	movs	r5, #32
 8002aea:	9501      	str	r5, [sp, #4]
 8002aec:	2410      	movs	r4, #16
 8002aee:	9400      	str	r4, [sp, #0]
 8002af0:	2302      	movs	r3, #2
 8002af2:	2104      	movs	r1, #4
 8002af4:	2030      	movs	r0, #48	; 0x30
 8002af6:	f000 fc9f 	bl	8003438 <OLED_ShowNum>
		OLED_ShowString(64+8*1, 4, (unsigned char*)"B:", 16);
 8002afa:	2310      	movs	r3, #16
 8002afc:	4a57      	ldr	r2, [pc, #348]	; (8002c5c <main+0x280>)
 8002afe:	2104      	movs	r1, #4
 8002b00:	2048      	movs	r0, #72	; 0x48
 8002b02:	f000 fcfb 	bl	80034fc <OLED_ShowString>
		OLED_ShowNum(64+8*3, 4, ADval[BAT_Ar]*0.80566/1000*10.1, 1, 16,'0');
 8002b06:	8870      	ldrh	r0, [r6, #2]
 8002b08:	f7ff fa18 	bl	8001f3c <__aeabi_i2d>
 8002b0c:	4a54      	ldr	r2, [pc, #336]	; (8002c60 <main+0x284>)
 8002b0e:	4b55      	ldr	r3, [pc, #340]	; (8002c64 <main+0x288>)
 8002b10:	f7fe fc24 	bl	800135c <__aeabi_dmul>
 8002b14:	2200      	movs	r2, #0
 8002b16:	4b54      	ldr	r3, [pc, #336]	; (8002c68 <main+0x28c>)
 8002b18:	f7fe f91e 	bl	8000d58 <__aeabi_ddiv>
 8002b1c:	4a53      	ldr	r2, [pc, #332]	; (8002c6c <main+0x290>)
 8002b1e:	4b54      	ldr	r3, [pc, #336]	; (8002c70 <main+0x294>)
 8002b20:	f7fe fc1c 	bl	800135c <__aeabi_dmul>
 8002b24:	f7fd fc92 	bl	800044c <__aeabi_d2uiz>
 8002b28:	0002      	movs	r2, r0
 8002b2a:	2330      	movs	r3, #48	; 0x30
 8002b2c:	4698      	mov	r8, r3
 8002b2e:	9301      	str	r3, [sp, #4]
 8002b30:	9400      	str	r4, [sp, #0]
 8002b32:	3b2f      	subs	r3, #47	; 0x2f
 8002b34:	2104      	movs	r1, #4
 8002b36:	2058      	movs	r0, #88	; 0x58
 8002b38:	f000 fc7e 	bl	8003438 <OLED_ShowNum>
		OLED_ShowChar(64+8*4, 4, '.', 16, 0);
 8002b3c:	2700      	movs	r7, #0
 8002b3e:	9700      	str	r7, [sp, #0]
 8002b40:	2310      	movs	r3, #16
 8002b42:	222e      	movs	r2, #46	; 0x2e
 8002b44:	2104      	movs	r1, #4
 8002b46:	2060      	movs	r0, #96	; 0x60
 8002b48:	f000 fc3a 	bl	80033c0 <OLED_ShowChar>
		OLED_ShowNum(64+8*5, 4, (int)(ADval[BAT_Ar]*0.80566/10*10.1)%100, 2, 16,'0');
 8002b4c:	8870      	ldrh	r0, [r6, #2]
 8002b4e:	f7ff f9f5 	bl	8001f3c <__aeabi_i2d>
 8002b52:	4a43      	ldr	r2, [pc, #268]	; (8002c60 <main+0x284>)
 8002b54:	4b43      	ldr	r3, [pc, #268]	; (8002c64 <main+0x288>)
 8002b56:	f7fe fc01 	bl	800135c <__aeabi_dmul>
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	4b45      	ldr	r3, [pc, #276]	; (8002c74 <main+0x298>)
 8002b5e:	f7fe f8fb 	bl	8000d58 <__aeabi_ddiv>
 8002b62:	4a42      	ldr	r2, [pc, #264]	; (8002c6c <main+0x290>)
 8002b64:	4b42      	ldr	r3, [pc, #264]	; (8002c70 <main+0x294>)
 8002b66:	f7fe fbf9 	bl	800135c <__aeabi_dmul>
 8002b6a:	f7ff f9b1 	bl	8001ed0 <__aeabi_d2iz>
 8002b6e:	2164      	movs	r1, #100	; 0x64
 8002b70:	f7fd fc4e 	bl	8000410 <__aeabi_idivmod>
 8002b74:	000a      	movs	r2, r1
 8002b76:	4643      	mov	r3, r8
 8002b78:	9301      	str	r3, [sp, #4]
 8002b7a:	9400      	str	r4, [sp, #0]
 8002b7c:	3b2e      	subs	r3, #46	; 0x2e
 8002b7e:	2104      	movs	r1, #4
 8002b80:	2068      	movs	r0, #104	; 0x68
 8002b82:	f000 fc59 	bl	8003438 <OLED_ShowNum>
		OLED_ShowChar(64+8*7, 4, 'V', 16, 0);
 8002b86:	9700      	str	r7, [sp, #0]
 8002b88:	2310      	movs	r3, #16
 8002b8a:	2256      	movs	r2, #86	; 0x56
 8002b8c:	2104      	movs	r1, #4
 8002b8e:	2078      	movs	r0, #120	; 0x78
 8002b90:	f000 fc16 	bl	80033c0 <OLED_ShowChar>
		OLED_ShowString(0, 6, (unsigned char*)"Temp:", 16);
 8002b94:	2310      	movs	r3, #16
 8002b96:	4a38      	ldr	r2, [pc, #224]	; (8002c78 <main+0x29c>)
 8002b98:	2106      	movs	r1, #6
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	f000 fcae 	bl	80034fc <OLED_ShowString>
		OLED_ShowNum(5*8, 6, Temperature, 2, 16,' ');
 8002ba0:	4e29      	ldr	r6, [pc, #164]	; (8002c48 <main+0x26c>)
 8002ba2:	6830      	ldr	r0, [r6, #0]
 8002ba4:	f7fd fc3a 	bl	800041c <__aeabi_f2uiz>
 8002ba8:	0002      	movs	r2, r0
 8002baa:	9501      	str	r5, [sp, #4]
 8002bac:	9400      	str	r4, [sp, #0]
 8002bae:	2302      	movs	r3, #2
 8002bb0:	2106      	movs	r1, #6
 8002bb2:	2028      	movs	r0, #40	; 0x28
 8002bb4:	f000 fc40 	bl	8003438 <OLED_ShowNum>
		OLED_ShowString(7*8, 6, (unsigned char*)".", 16);
 8002bb8:	2310      	movs	r3, #16
 8002bba:	4a30      	ldr	r2, [pc, #192]	; (8002c7c <main+0x2a0>)
 8002bbc:	2106      	movs	r1, #6
 8002bbe:	2038      	movs	r0, #56	; 0x38
 8002bc0:	f000 fc9c 	bl	80034fc <OLED_ShowString>
		OLED_ShowNum(8*8, 6, ((int)(Temperature*10))%10, 1, 16,' ');
 8002bc4:	492e      	ldr	r1, [pc, #184]	; (8002c80 <main+0x2a4>)
 8002bc6:	6830      	ldr	r0, [r6, #0]
 8002bc8:	f7fd fd70 	bl	80006ac <__aeabi_fmul>
 8002bcc:	f7fe f864 	bl	8000c98 <__aeabi_f2iz>
 8002bd0:	210a      	movs	r1, #10
 8002bd2:	f7fd fc1d 	bl	8000410 <__aeabi_idivmod>
 8002bd6:	000a      	movs	r2, r1
 8002bd8:	9501      	str	r5, [sp, #4]
 8002bda:	9400      	str	r4, [sp, #0]
 8002bdc:	2301      	movs	r3, #1
 8002bde:	2106      	movs	r1, #6
 8002be0:	2040      	movs	r0, #64	; 0x40
 8002be2:	f000 fc29 	bl	8003438 <OLED_ShowNum>
		OLED_ShowString(9*8, 6, (unsigned char*)"Humi:", 16);
 8002be6:	2310      	movs	r3, #16
 8002be8:	4a26      	ldr	r2, [pc, #152]	; (8002c84 <main+0x2a8>)
 8002bea:	2106      	movs	r1, #6
 8002bec:	2048      	movs	r0, #72	; 0x48
 8002bee:	f000 fc85 	bl	80034fc <OLED_ShowString>
		OLED_ShowNum(14*8, 6, Humidity, 2, 16,' ');
 8002bf2:	4b14      	ldr	r3, [pc, #80]	; (8002c44 <main+0x268>)
 8002bf4:	6818      	ldr	r0, [r3, #0]
 8002bf6:	f7fd fc11 	bl	800041c <__aeabi_f2uiz>
 8002bfa:	0002      	movs	r2, r0
 8002bfc:	9501      	str	r5, [sp, #4]
 8002bfe:	9400      	str	r4, [sp, #0]
 8002c00:	2302      	movs	r3, #2
 8002c02:	2106      	movs	r1, #6
 8002c04:	2070      	movs	r0, #112	; 0x70
 8002c06:	f000 fc17 	bl	8003438 <OLED_ShowNum>
		OLED_Show_Time();
 8002c0a:	f7ff fdb7 	bl	800277c <OLED_Show_Time>
		OLED_Refreash();
 8002c0e:	f000 fba9 	bl	8003364 <OLED_Refreash>
		HAL_IWDG_Refresh(&hiwdg);
 8002c12:	480a      	ldr	r0, [pc, #40]	; (8002c3c <main+0x260>)
 8002c14:	f001 fffc 	bl	8004c10 <HAL_IWDG_Refresh>
		HAL_Delay(100);
 8002c18:	2064      	movs	r0, #100	; 0x64
 8002c1a:	f000 ff69 	bl	8003af0 <HAL_Delay>
		isClear=0;
 8002c1e:	2600      	movs	r6, #0
 8002c20:	e72c      	b.n	8002a7c <main+0xa0>
 8002c22:	46c0      	nop			; (mov r8, r8)
 8002c24:	40014800 	.word	0x40014800
 8002c28:	2000087c 	.word	0x2000087c
 8002c2c:	200008a8 	.word	0x200008a8
 8002c30:	20000880 	.word	0x20000880
 8002c34:	200007e0 	.word	0x200007e0
 8002c38:	20000000 	.word	0x20000000
 8002c3c:	2000086c 	.word	0x2000086c
 8002c40:	48000400 	.word	0x48000400
 8002c44:	2000038c 	.word	0x2000038c
 8002c48:	20000390 	.word	0x20000390
 8002c4c:	08005ae4 	.word	0x08005ae4
 8002c50:	47ae147b 	.word	0x47ae147b
 8002c54:	40447ae1 	.word	0x40447ae1
 8002c58:	40590000 	.word	0x40590000
 8002c5c:	08005aec 	.word	0x08005aec
 8002c60:	7af64064 	.word	0x7af64064
 8002c64:	3fe9c7f7 	.word	0x3fe9c7f7
 8002c68:	408f4000 	.word	0x408f4000
 8002c6c:	33333333 	.word	0x33333333
 8002c70:	40243333 	.word	0x40243333
 8002c74:	40240000 	.word	0x40240000
 8002c78:	08005af0 	.word	0x08005af0
 8002c7c:	08005af8 	.word	0x08005af8
 8002c80:	41200000 	.word	0x41200000
 8002c84:	08005afc 	.word	0x08005afc

08002c88 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c88:	b510      	push	{r4, lr}
	UNUSED(huart);
	uart_receive_input(aRxBuffer);
 8002c8a:	4c05      	ldr	r4, [pc, #20]	; (8002ca0 <HAL_UART_RxCpltCallback+0x18>)
 8002c8c:	7820      	ldrb	r0, [r4, #0]
 8002c8e:	f000 fa9d 	bl	80031cc <uart_receive_input>
	//HAL_UART_Transmit(&huart1, &aRxBuffer, 1, 0xff);
	HAL_UART_Receive_IT(&huart1,&aRxBuffer,1);
 8002c92:	2201      	movs	r2, #1
 8002c94:	0021      	movs	r1, r4
 8002c96:	4803      	ldr	r0, [pc, #12]	; (8002ca4 <HAL_UART_RxCpltCallback+0x1c>)
 8002c98:	f002 fdc0 	bl	800581c <HAL_UART_Receive_IT>
}
 8002c9c:	bd10      	pop	{r4, pc}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	2000087c 	.word	0x2000087c
 8002ca4:	200008a8 	.word	0x200008a8

08002ca8 <Error_Handler>:
 8002ca8:	b672      	cpsid	i
 8002caa:	e7fe      	b.n	8002caa <Error_Handler+0x2>

08002cac <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002cac:	b500      	push	{lr}
 8002cae:	b087      	sub	sp, #28
  RTC_TimeTypeDef sTime = {0};
 8002cb0:	2214      	movs	r2, #20
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	a801      	add	r0, sp, #4
 8002cb6:	f002 fe50 	bl	800595a <memset>
  RTC_DateTypeDef sDate = {0};
 8002cba:	2300      	movs	r3, #0
 8002cbc:	9300      	str	r3, [sp, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002cbe:	481b      	ldr	r0, [pc, #108]	; (8002d2c <MX_RTC_Init+0x80>)
 8002cc0:	4a1b      	ldr	r2, [pc, #108]	; (8002d30 <MX_RTC_Init+0x84>)
 8002cc2:	6002      	str	r2, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002cc4:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002cc6:	227f      	movs	r2, #127	; 0x7f
 8002cc8:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 311;
 8002cca:	2238      	movs	r2, #56	; 0x38
 8002ccc:	32ff      	adds	r2, #255	; 0xff
 8002cce:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002cd0:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002cd2:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002cd4:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002cd6:	f002 f81b 	bl	8004d10 <HAL_RTC_Init>
 8002cda:	2800      	cmp	r0, #0
 8002cdc:	d11c      	bne.n	8002d18 <MX_RTC_Init+0x6c>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8002cde:	a901      	add	r1, sp, #4
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	700b      	strb	r3, [r1, #0]
  sTime.Minutes = 0;
 8002ce4:	704b      	strb	r3, [r1, #1]
  sTime.Seconds = 0;
 8002ce6:	708b      	strb	r3, [r1, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002ce8:	60cb      	str	r3, [r1, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002cea:	610b      	str	r3, [r1, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002cec:	2200      	movs	r2, #0
 8002cee:	480f      	ldr	r0, [pc, #60]	; (8002d2c <MX_RTC_Init+0x80>)
 8002cf0:	f002 f86e 	bl	8004dd0 <HAL_RTC_SetTime>
 8002cf4:	2800      	cmp	r0, #0
 8002cf6:	d112      	bne.n	8002d1e <MX_RTC_Init+0x72>
  {
    Error_Handler();
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	466a      	mov	r2, sp
 8002cfc:	7013      	strb	r3, [r2, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002cfe:	7053      	strb	r3, [r2, #1]
  sDate.Date = 1;
 8002d00:	7093      	strb	r3, [r2, #2]
  sDate.Year = 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	70d3      	strb	r3, [r2, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002d06:	2200      	movs	r2, #0
 8002d08:	4669      	mov	r1, sp
 8002d0a:	4808      	ldr	r0, [pc, #32]	; (8002d2c <MX_RTC_Init+0x80>)
 8002d0c:	f002 f8d6 	bl	8004ebc <HAL_RTC_SetDate>
 8002d10:	2800      	cmp	r0, #0
 8002d12:	d107      	bne.n	8002d24 <MX_RTC_Init+0x78>
  {
    Error_Handler();
  }

}
 8002d14:	b007      	add	sp, #28
 8002d16:	bd00      	pop	{pc}
    Error_Handler();
 8002d18:	f7ff ffc6 	bl	8002ca8 <Error_Handler>
 8002d1c:	e7df      	b.n	8002cde <MX_RTC_Init+0x32>
    Error_Handler();
 8002d1e:	f7ff ffc3 	bl	8002ca8 <Error_Handler>
 8002d22:	e7e9      	b.n	8002cf8 <MX_RTC_Init+0x4c>
    Error_Handler();
 8002d24:	f7ff ffc0 	bl	8002ca8 <Error_Handler>
}
 8002d28:	e7f4      	b.n	8002d14 <MX_RTC_Init+0x68>
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	20000888 	.word	0x20000888
 8002d30:	40002800 	.word	0x40002800

08002d34 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8002d34:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <HAL_RTC_MspInit+0x18>)
 8002d36:	6802      	ldr	r2, [r0, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d000      	beq.n	8002d3e <HAL_RTC_MspInit+0xa>
    __HAL_RCC_RTC_ENABLE();
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002d3c:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 8002d3e:	4a04      	ldr	r2, [pc, #16]	; (8002d50 <HAL_RTC_MspInit+0x1c>)
 8002d40:	6a11      	ldr	r1, [r2, #32]
 8002d42:	2380      	movs	r3, #128	; 0x80
 8002d44:	021b      	lsls	r3, r3, #8
 8002d46:	430b      	orrs	r3, r1
 8002d48:	6213      	str	r3, [r2, #32]
}
 8002d4a:	e7f7      	b.n	8002d3c <HAL_RTC_MspInit+0x8>
 8002d4c:	40002800 	.word	0x40002800
 8002d50:	40021000 	.word	0x40021000

08002d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d54:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d56:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <HAL_MspInit+0x2c>)
 8002d58:	6999      	ldr	r1, [r3, #24]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	4311      	orrs	r1, r2
 8002d5e:	6199      	str	r1, [r3, #24]
 8002d60:	6999      	ldr	r1, [r3, #24]
 8002d62:	400a      	ands	r2, r1
 8002d64:	9200      	str	r2, [sp, #0]
 8002d66:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d68:	69da      	ldr	r2, [r3, #28]
 8002d6a:	2180      	movs	r1, #128	; 0x80
 8002d6c:	0549      	lsls	r1, r1, #21
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	61da      	str	r2, [r3, #28]
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	400b      	ands	r3, r1
 8002d76:	9301      	str	r3, [sp, #4]
 8002d78:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d7a:	b002      	add	sp, #8
 8002d7c:	4770      	bx	lr
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	40021000 	.word	0x40021000

08002d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d84:	e7fe      	b.n	8002d84 <NMI_Handler>

08002d86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d86:	e7fe      	b.n	8002d86 <HardFault_Handler>

08002d88 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002d88:	4770      	bx	lr

08002d8a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d8a:	4770      	bx	lr

08002d8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d8c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d8e:	f000 fe9d 	bl	8003acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d92:	bd10      	pop	{r4, pc}

08002d94 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002d94:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002d96:	4802      	ldr	r0, [pc, #8]	; (8002da0 <DMA1_Channel1_IRQHandler+0xc>)
 8002d98:	f001 fa35 	bl	8004206 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002d9c:	bd10      	pop	{r4, pc}
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	2000079c 	.word	0x2000079c

08002da4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002da4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002da6:	4802      	ldr	r0, [pc, #8]	; (8002db0 <ADC1_IRQHandler+0xc>)
 8002da8:	f001 f840 	bl	8003e2c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002dac:	bd10      	pop	{r4, pc}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	200007e0 	.word	0x200007e0

08002db4 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002db4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */
	//Calibrate every ten minutes
	//static unsigned char i=0;
	//OLED_ShowChar(0, 2, '.', 16, 0);
	//OLED_ShowNum(0, 2, ++i, 3, 16, '0');
	mcu_get_system_time();
 8002db6:	f000 fab9 	bl	800332c <mcu_get_system_time>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002dba:	4b02      	ldr	r3, [pc, #8]	; (8002dc4 <TIM17_IRQHandler+0x10>)
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	4252      	negs	r2, r2
 8002dc0:	611a      	str	r2, [r3, #16]
	LL_TIM_ClearFlag_UPDATE(TIM17);
  /* USER CODE END TIM17_IRQn 0 */
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002dc2:	bd10      	pop	{r4, pc}
 8002dc4:	40014800 	.word	0x40014800

08002dc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002dc8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */


  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002dca:	4802      	ldr	r0, [pc, #8]	; (8002dd4 <USART1_IRQHandler+0xc>)
 8002dcc:	f002 f956 	bl	800507c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002dd0:	bd10      	pop	{r4, pc}
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	200008a8 	.word	0x200008a8

08002dd8 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002dd8:	4770      	bx	lr
	...

08002ddc <MX_TIM17_Init>:

/* USER CODE END 0 */

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002ddc:	b530      	push	{r4, r5, lr}
 8002dde:	b087      	sub	sp, #28
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002de0:	a901      	add	r1, sp, #4
 8002de2:	2300      	movs	r3, #0
 8002de4:	804b      	strh	r3, [r1, #2]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002de6:	4814      	ldr	r0, [pc, #80]	; (8002e38 <MX_TIM17_Init+0x5c>)
 8002de8:	6984      	ldr	r4, [r0, #24]
 8002dea:	2580      	movs	r5, #128	; 0x80
 8002dec:	02ed      	lsls	r5, r5, #11
 8002dee:	432c      	orrs	r4, r5
 8002df0:	6184      	str	r4, [r0, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002df2:	6982      	ldr	r2, [r0, #24]
 8002df4:	402a      	ands	r2, r5
 8002df6:	9200      	str	r2, [sp, #0]
  (void)tmpreg;
 8002df8:	9a00      	ldr	r2, [sp, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002dfa:	4a10      	ldr	r2, [pc, #64]	; (8002e3c <MX_TIM17_Init+0x60>)
 8002dfc:	25c5      	movs	r5, #197	; 0xc5
 8002dfe:	00ad      	lsls	r5, r5, #2
 8002e00:	5950      	ldr	r0, [r2, r5]
 8002e02:	4c0f      	ldr	r4, [pc, #60]	; (8002e40 <MX_TIM17_Init+0x64>)
 8002e04:	4004      	ands	r4, r0
 8002e06:	20c0      	movs	r0, #192	; 0xc0
 8002e08:	0400      	lsls	r0, r0, #16
 8002e0a:	4320      	orrs	r0, r4
 8002e0c:	5150      	str	r0, [r2, r5]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e0e:	2080      	movs	r0, #128	; 0x80
 8002e10:	03c0      	lsls	r0, r0, #15
 8002e12:	6010      	str	r0, [r2, #0]

  /* TIM17 interrupt Init */
  NVIC_SetPriority(TIM17_IRQn, 3);
  NVIC_EnableIRQ(TIM17_IRQn);

  TIM_InitStruct.Prescaler = 47999;
 8002e14:	4a0b      	ldr	r2, [pc, #44]	; (8002e44 <MX_TIM17_Init+0x68>)
 8002e16:	800a      	strh	r2, [r1, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002e18:	604b      	str	r3, [r1, #4]
  TIM_InitStruct.Autoreload = 5535;
 8002e1a:	4a0b      	ldr	r2, [pc, #44]	; (8002e48 <MX_TIM17_Init+0x6c>)
 8002e1c:	608a      	str	r2, [r1, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002e1e:	60cb      	str	r3, [r1, #12]
  TIM_InitStruct.RepetitionCounter = 99;
 8002e20:	3363      	adds	r3, #99	; 0x63
 8002e22:	610b      	str	r3, [r1, #16]
  LL_TIM_Init(TIM17, &TIM_InitStruct);
 8002e24:	4c09      	ldr	r4, [pc, #36]	; (8002e4c <MX_TIM17_Init+0x70>)
 8002e26:	0020      	movs	r0, r4
 8002e28:	f002 fd24 	bl	8005874 <LL_TIM_Init>
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002e2c:	6823      	ldr	r3, [r4, #0]
 8002e2e:	2280      	movs	r2, #128	; 0x80
 8002e30:	4313      	orrs	r3, r2
 8002e32:	6023      	str	r3, [r4, #0]
  LL_TIM_EnableARRPreload(TIM17);

}
 8002e34:	b007      	add	sp, #28
 8002e36:	bd30      	pop	{r4, r5, pc}
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	e000e100 	.word	0xe000e100
 8002e40:	ff00ffff 	.word	0xff00ffff
 8002e44:	ffffbb7f 	.word	0xffffbb7f
 8002e48:	0000159f 	.word	0x0000159f
 8002e4c:	40014800 	.word	0x40014800

08002e50 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e50:	b510      	push	{r4, lr}

  huart1.Instance = USART1;
 8002e52:	480c      	ldr	r0, [pc, #48]	; (8002e84 <MX_USART1_UART_Init+0x34>)
 8002e54:	4b0c      	ldr	r3, [pc, #48]	; (8002e88 <MX_USART1_UART_Init+0x38>)
 8002e56:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8002e58:	23e1      	movs	r3, #225	; 0xe1
 8002e5a:	025b      	lsls	r3, r3, #9
 8002e5c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e62:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e64:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e66:	220c      	movs	r2, #12
 8002e68:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e6a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e6c:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e6e:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e70:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e72:	f002 fc5f 	bl	8005734 <HAL_UART_Init>
 8002e76:	2800      	cmp	r0, #0
 8002e78:	d100      	bne.n	8002e7c <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8002e7a:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002e7c:	f7ff ff14 	bl	8002ca8 <Error_Handler>
}
 8002e80:	e7fb      	b.n	8002e7a <MX_USART1_UART_Init+0x2a>
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	200008a8 	.word	0x200008a8
 8002e88:	40013800 	.word	0x40013800

08002e8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e8c:	b510      	push	{r4, lr}
 8002e8e:	b088      	sub	sp, #32
 8002e90:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e92:	2214      	movs	r2, #20
 8002e94:	2100      	movs	r1, #0
 8002e96:	a803      	add	r0, sp, #12
 8002e98:	f002 fd5f 	bl	800595a <memset>
  if(uartHandle->Instance==USART1)
 8002e9c:	4b17      	ldr	r3, [pc, #92]	; (8002efc <HAL_UART_MspInit+0x70>)
 8002e9e:	6822      	ldr	r2, [r4, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d001      	beq.n	8002ea8 <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002ea4:	b008      	add	sp, #32
 8002ea6:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ea8:	4b15      	ldr	r3, [pc, #84]	; (8002f00 <HAL_UART_MspInit+0x74>)
 8002eaa:	6999      	ldr	r1, [r3, #24]
 8002eac:	2080      	movs	r0, #128	; 0x80
 8002eae:	01c0      	lsls	r0, r0, #7
 8002eb0:	4301      	orrs	r1, r0
 8002eb2:	6199      	str	r1, [r3, #24]
 8002eb4:	699a      	ldr	r2, [r3, #24]
 8002eb6:	4002      	ands	r2, r0
 8002eb8:	9201      	str	r2, [sp, #4]
 8002eba:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ebc:	695a      	ldr	r2, [r3, #20]
 8002ebe:	2180      	movs	r1, #128	; 0x80
 8002ec0:	0289      	lsls	r1, r1, #10
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	615a      	str	r2, [r3, #20]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	400b      	ands	r3, r1
 8002eca:	9302      	str	r3, [sp, #8]
 8002ecc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ece:	230c      	movs	r3, #12
 8002ed0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed2:	3b0a      	subs	r3, #10
 8002ed4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002eda:	3b02      	subs	r3, #2
 8002edc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ede:	2090      	movs	r0, #144	; 0x90
 8002ee0:	a903      	add	r1, sp, #12
 8002ee2:	05c0      	lsls	r0, r0, #23
 8002ee4:	f001 f9d8 	bl	8004298 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ee8:	2200      	movs	r2, #0
 8002eea:	2100      	movs	r1, #0
 8002eec:	201b      	movs	r0, #27
 8002eee:	f001 f88b 	bl	8004008 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ef2:	201b      	movs	r0, #27
 8002ef4:	f001 f8b2 	bl	800405c <HAL_NVIC_EnableIRQ>
}
 8002ef8:	e7d4      	b.n	8002ea4 <HAL_UART_MspInit+0x18>
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	40013800 	.word	0x40013800
 8002f00:	40021000 	.word	0x40021000

08002f04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f04:	480d      	ldr	r0, [pc, #52]	; (8002f3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f06:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f08:	480d      	ldr	r0, [pc, #52]	; (8002f40 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f0a:	490e      	ldr	r1, [pc, #56]	; (8002f44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f0c:	4a0e      	ldr	r2, [pc, #56]	; (8002f48 <LoopForever+0xe>)
  movs r3, #0
 8002f0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f10:	e002      	b.n	8002f18 <LoopCopyDataInit>

08002f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f16:	3304      	adds	r3, #4

08002f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f1c:	d3f9      	bcc.n	8002f12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f1e:	4a0b      	ldr	r2, [pc, #44]	; (8002f4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f20:	4c0b      	ldr	r4, [pc, #44]	; (8002f50 <LoopForever+0x16>)
  movs r3, #0
 8002f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f24:	e001      	b.n	8002f2a <LoopFillZerobss>

08002f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f28:	3204      	adds	r2, #4

08002f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f2c:	d3fb      	bcc.n	8002f26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002f2e:	f7ff ff53 	bl	8002dd8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002f32:	f002 fce5 	bl	8005900 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f36:	f7ff fd51 	bl	80029dc <main>

08002f3a <LoopForever>:

LoopForever:
    b LoopForever
 8002f3a:	e7fe      	b.n	8002f3a <LoopForever>
  ldr   r0, =_estack
 8002f3c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f44:	20000370 	.word	0x20000370
  ldr r2, =_sidata
 8002f48:	080061e0 	.word	0x080061e0
  ldr r2, =_sbss
 8002f4c:	20000370 	.word	0x20000370
  ldr r4, =_ebss
 8002f50:	200009ac 	.word	0x200009ac

08002f54 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f54:	e7fe      	b.n	8002f54 <DMA1_Channel2_3_IRQHandler>

08002f56 <CheckCrc8>:
#include "stm32f0xx_hal_i2c.h"

//CRC校验计算
#define CRC8_POLYNOMIAL 0x31
uint8_t CheckCrc8(uint8_t* message, uint8_t initial_value)
{
 8002f56:	b510      	push	{r4, lr}
	uint8_t  remainder;
	uint8_t  i = 0, j = 0;
	remainder = initial_value;
	for(j = 0; j < 2;j++)
	{
		remainder ^= message[j];
 8002f58:	7803      	ldrb	r3, [r0, #0]
 8002f5a:	4059      	eors	r1, r3
 8002f5c:	2308      	movs	r3, #8
		for (i = 0; i < 8; i++)
		{
			if (remainder & 0x80)
			{
				remainder = (remainder << 1)^CRC8_POLYNOMIAL;
 8002f5e:	2431      	movs	r4, #49	; 0x31
 8002f60:	e006      	b.n	8002f70 <CheckCrc8+0x1a>
 8002f62:	0049      	lsls	r1, r1, #1
 8002f64:	4061      	eors	r1, r4
 8002f66:	b2c9      	uxtb	r1, r1
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b2db      	uxtb	r3, r3
		for (i = 0; i < 8; i++)
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <CheckCrc8+0x26>
			if (remainder & 0x80)
 8002f70:	b24a      	sxtb	r2, r1
 8002f72:	2a00      	cmp	r2, #0
 8002f74:	dbf5      	blt.n	8002f62 <CheckCrc8+0xc>
			}
			else
			{
				remainder = (remainder << 1);
 8002f76:	0049      	lsls	r1, r1, #1
 8002f78:	b2c9      	uxtb	r1, r1
 8002f7a:	e7f5      	b.n	8002f68 <CheckCrc8+0x12>
		remainder ^= message[j];
 8002f7c:	7840      	ldrb	r0, [r0, #1]
 8002f7e:	4048      	eors	r0, r1
 8002f80:	3308      	adds	r3, #8
				remainder = (remainder << 1)^CRC8_POLYNOMIAL;
 8002f82:	2131      	movs	r1, #49	; 0x31
 8002f84:	e006      	b.n	8002f94 <CheckCrc8+0x3e>
 8002f86:	0040      	lsls	r0, r0, #1
 8002f88:	4048      	eors	r0, r1
 8002f8a:	b2c0      	uxtb	r0, r0
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b2db      	uxtb	r3, r3
		for (i = 0; i < 8; i++)
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <CheckCrc8+0x4a>
			if (remainder & 0x80)
 8002f94:	b242      	sxtb	r2, r0
 8002f96:	2a00      	cmp	r2, #0
 8002f98:	dbf5      	blt.n	8002f86 <CheckCrc8+0x30>
				remainder = (remainder << 1);
 8002f9a:	0040      	lsls	r0, r0, #1
 8002f9c:	b2c0      	uxtb	r0, r0
 8002f9e:	e7f5      	b.n	8002f8c <CheckCrc8+0x36>
			}
		}
	}
	return remainder;
}
 8002fa0:	bd10      	pop	{r4, pc}
	...

08002fa4 <i2c_write_cmd>:

//I2C写2字节命令
uint8_t i2c_write_cmd(uint16_t cmd)
{
 8002fa4:	b500      	push	{lr}
 8002fa6:	b085      	sub	sp, #20
	uint8_t cmd_buff[2];
	cmd_buff[0] = cmd>>8;
 8002fa8:	aa03      	add	r2, sp, #12
 8002faa:	0a03      	lsrs	r3, r0, #8
 8002fac:	7013      	strb	r3, [r2, #0]
	cmd_buff[1] = cmd;
 8002fae:	7050      	strb	r0, [r2, #1]

	return HAL_I2C_Master_Transmit(&hi2c1,SHT_ADDR,cmd_buff,2,0xffff);
 8002fb0:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <i2c_write_cmd+0x20>)
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	2188      	movs	r1, #136	; 0x88
 8002fb8:	4803      	ldr	r0, [pc, #12]	; (8002fc8 <i2c_write_cmd+0x24>)
 8002fba:	f001 fbd1 	bl	8004760 <HAL_I2C_Master_Transmit>
}
 8002fbe:	b005      	add	sp, #20
 8002fc0:	bd00      	pop	{pc}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	0000ffff 	.word	0x0000ffff
 8002fc8:	20000820 	.word	0x20000820

08002fcc <sht30_init>:
//初始化代码
uint8_t sht30_init()
{
 8002fcc:	b510      	push	{r4, lr}
	//soft reset
	i2c_write_cmd(0x30a2);
 8002fce:	4805      	ldr	r0, [pc, #20]	; (8002fe4 <sht30_init+0x18>)
 8002fd0:	f7ff ffe8 	bl	8002fa4 <i2c_write_cmd>
	HAL_Delay(25);
 8002fd4:	2019      	movs	r0, #25
 8002fd6:	f000 fd8b 	bl	8003af0 <HAL_Delay>

	return i2c_write_cmd(0x2220);//repeat medium_2
 8002fda:	4803      	ldr	r0, [pc, #12]	; (8002fe8 <sht30_init+0x1c>)
 8002fdc:	f7ff ffe2 	bl	8002fa4 <i2c_write_cmd>
}
 8002fe0:	bd10      	pop	{r4, pc}
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	000030a2 	.word	0x000030a2
 8002fe8:	00002220 	.word	0x00002220

08002fec <sht30_sample>:
uint8_t sht30_sample(float *t, float *h)
{
 8002fec:	b570      	push	{r4, r5, r6, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	0005      	movs	r5, r0
 8002ff2:	000c      	movs	r4, r1
	uint8_t read_buff[6] = {0};
 8002ff4:	2206      	movs	r2, #6
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	a802      	add	r0, sp, #8
 8002ffa:	f002 fcae 	bl	800595a <memset>

	uint16_t temp_value;
	uint16_t humi_value;

	i2c_write_cmd(0x2C06);//read for period mode
 8002ffe:	4822      	ldr	r0, [pc, #136]	; (8003088 <sht30_sample+0x9c>)
 8003000:	f7ff ffd0 	bl	8002fa4 <i2c_write_cmd>
	//i2c_write_cmd(0xe000);
	//read value
	if(HAL_I2C_Master_Receive(&hi2c1,SHT_ADDR|0x01,read_buff,6,0xffff) != HAL_OK)
 8003004:	4b21      	ldr	r3, [pc, #132]	; (800308c <sht30_sample+0xa0>)
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	2306      	movs	r3, #6
 800300a:	aa02      	add	r2, sp, #8
 800300c:	2189      	movs	r1, #137	; 0x89
 800300e:	4820      	ldr	r0, [pc, #128]	; (8003090 <sht30_sample+0xa4>)
 8003010:	f001 fc3c 	bl	800488c <HAL_I2C_Master_Receive>
	{
		return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
	if(HAL_I2C_Master_Receive(&hi2c1,SHT_ADDR|0x01,read_buff,6,0xffff) != HAL_OK)
 8003016:	2800      	cmp	r0, #0
 8003018:	d108      	bne.n	800302c <sht30_sample+0x40>
	}

	//check crc
	if(CheckCrc8(read_buff, 0xFF) != read_buff[2] || CheckCrc8(&read_buff[3], 0xFF) != read_buff[5])
 800301a:	ae02      	add	r6, sp, #8
 800301c:	21ff      	movs	r1, #255	; 0xff
 800301e:	0030      	movs	r0, r6
 8003020:	f7ff ff99 	bl	8002f56 <CheckCrc8>
 8003024:	78b2      	ldrb	r2, [r6, #2]
	{
		return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
	if(CheckCrc8(read_buff, 0xFF) != read_buff[2] || CheckCrc8(&read_buff[3], 0xFF) != read_buff[5])
 8003028:	4282      	cmp	r2, r0
 800302a:	d002      	beq.n	8003032 <sht30_sample+0x46>

	humi_value = ((uint16_t)read_buff[3]<<8)|read_buff[4];
	*h = 100 * ((float)humi_value / 65535);

	return HAL_OK;
}
 800302c:	0018      	movs	r0, r3
 800302e:	b004      	add	sp, #16
 8003030:	bd70      	pop	{r4, r5, r6, pc}
	if(CheckCrc8(read_buff, 0xFF) != read_buff[2] || CheckCrc8(&read_buff[3], 0xFF) != read_buff[5])
 8003032:	21ff      	movs	r1, #255	; 0xff
 8003034:	200b      	movs	r0, #11
 8003036:	4468      	add	r0, sp
 8003038:	f7ff ff8d 	bl	8002f56 <CheckCrc8>
 800303c:	ab02      	add	r3, sp, #8
 800303e:	795a      	ldrb	r2, [r3, #5]
		return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
	if(CheckCrc8(read_buff, 0xFF) != read_buff[2] || CheckCrc8(&read_buff[3], 0xFF) != read_buff[5])
 8003042:	4282      	cmp	r2, r0
 8003044:	d1f2      	bne.n	800302c <sht30_sample+0x40>
	temp_value = ((uint16_t)read_buff[0]<<8)|read_buff[1];
 8003046:	ae02      	add	r6, sp, #8
 8003048:	7833      	ldrb	r3, [r6, #0]
 800304a:	021b      	lsls	r3, r3, #8
 800304c:	7870      	ldrb	r0, [r6, #1]
	*t = -45 + 175*((float)temp_value/65535);
 800304e:	4318      	orrs	r0, r3
 8003050:	f7fd fe42 	bl	8000cd8 <__aeabi_ui2f>
 8003054:	490f      	ldr	r1, [pc, #60]	; (8003094 <sht30_sample+0xa8>)
 8003056:	f7fd fa17 	bl	8000488 <__aeabi_fdiv>
 800305a:	490f      	ldr	r1, [pc, #60]	; (8003098 <sht30_sample+0xac>)
 800305c:	f7fd fb26 	bl	80006ac <__aeabi_fmul>
 8003060:	490e      	ldr	r1, [pc, #56]	; (800309c <sht30_sample+0xb0>)
 8003062:	f7fd fc55 	bl	8000910 <__aeabi_fsub>
 8003066:	6028      	str	r0, [r5, #0]
	humi_value = ((uint16_t)read_buff[3]<<8)|read_buff[4];
 8003068:	78f3      	ldrb	r3, [r6, #3]
 800306a:	021b      	lsls	r3, r3, #8
 800306c:	7930      	ldrb	r0, [r6, #4]
	*h = 100 * ((float)humi_value / 65535);
 800306e:	4318      	orrs	r0, r3
 8003070:	f7fd fe32 	bl	8000cd8 <__aeabi_ui2f>
 8003074:	4907      	ldr	r1, [pc, #28]	; (8003094 <sht30_sample+0xa8>)
 8003076:	f7fd fa07 	bl	8000488 <__aeabi_fdiv>
 800307a:	4909      	ldr	r1, [pc, #36]	; (80030a0 <sht30_sample+0xb4>)
 800307c:	f7fd fb16 	bl	80006ac <__aeabi_fmul>
 8003080:	6020      	str	r0, [r4, #0]
	return HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	e7d2      	b.n	800302c <sht30_sample+0x40>
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	00002c06 	.word	0x00002c06
 800308c:	0000ffff 	.word	0x0000ffff
 8003090:	20000820 	.word	0x20000820
 8003094:	477fff00 	.word	0x477fff00
 8003098:	432f0000 	.word	0x432f0000
 800309c:	42340000 	.word	0x42340000
 80030a0:	42c80000 	.word	0x42c80000

080030a4 <my_strlen>:
 * @return 数据长度
 */
unsigned long my_strlen(unsigned char *str)  
{
	unsigned long len = 0;
	if(str == NULL) {
 80030a4:	2800      	cmp	r0, #0
 80030a6:	d009      	beq.n	80030bc <my_strlen+0x18>
		return 0;
	}

	for(len = 0; *str ++ != '\0'; ) {
 80030a8:	7803      	ldrb	r3, [r0, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d008      	beq.n	80030c0 <my_strlen+0x1c>
 80030ae:	2300      	movs	r3, #0
		len ++;
 80030b0:	3301      	adds	r3, #1
	for(len = 0; *str ++ != '\0'; ) {
 80030b2:	5cc2      	ldrb	r2, [r0, r3]
 80030b4:	2a00      	cmp	r2, #0
 80030b6:	d1fb      	bne.n	80030b0 <my_strlen+0xc>
	}

	return len;
}
 80030b8:	0018      	movs	r0, r3
 80030ba:	4770      	bx	lr
		return 0;
 80030bc:	2300      	movs	r3, #0
 80030be:	e7fb      	b.n	80030b8 <my_strlen+0x14>
	for(len = 0; *str ++ != '\0'; ) {
 80030c0:	2300      	movs	r3, #0
 80030c2:	e7f9      	b.n	80030b8 <my_strlen+0x14>

080030c4 <my_memcpy>:
 * @param[in] {src} 源地址
 * @param[in] {count} 拷贝数据个数
 * @return 数据处理完后的源地址
 */
void *my_memcpy(void *dest, const void *src, unsigned short count)  
{  
 80030c4:	b510      	push	{r4, lr}
	unsigned char *pdest = (unsigned char *)dest;
	const unsigned char *psrc  = (const unsigned char *)src;
	unsigned short i;

	if(dest == NULL || src == NULL) {
 80030c6:	2800      	cmp	r0, #0
 80030c8:	d00c      	beq.n	80030e4 <my_memcpy+0x20>
 80030ca:	2900      	cmp	r1, #0
 80030cc:	d01a      	beq.n	8003104 <my_memcpy+0x40>
		return NULL;
	}

	if((pdest <= psrc) || (pdest > psrc + count)) {
 80030ce:	4288      	cmp	r0, r1
 80030d0:	d809      	bhi.n	80030e6 <my_memcpy+0x22>
		for(i = 0; i < count; i ++) {
 80030d2:	2300      	movs	r3, #0
 80030d4:	2a00      	cmp	r2, #0
 80030d6:	d005      	beq.n	80030e4 <my_memcpy+0x20>
			pdest[i] = psrc[i];
 80030d8:	5ccc      	ldrb	r4, [r1, r3]
 80030da:	54c4      	strb	r4, [r0, r3]
 80030dc:	3301      	adds	r3, #1
		for(i = 0; i < count; i ++) {
 80030de:	b29c      	uxth	r4, r3
 80030e0:	4294      	cmp	r4, r2
 80030e2:	d3f9      	bcc.n	80030d8 <my_memcpy+0x14>
			pdest[i - 1] = psrc[i - 1];
		}
	}

	return dest;
}
 80030e4:	bd10      	pop	{r4, pc}
	if((pdest <= psrc) || (pdest > psrc + count)) {
 80030e6:	188b      	adds	r3, r1, r2
 80030e8:	4298      	cmp	r0, r3
 80030ea:	d8f2      	bhi.n	80030d2 <my_memcpy+0xe>
		for(i = count; i > 0; i --) {
 80030ec:	2a00      	cmp	r2, #0
 80030ee:	d0f9      	beq.n	80030e4 <my_memcpy+0x20>
 80030f0:	1e53      	subs	r3, r2, #1
 80030f2:	1e94      	subs	r4, r2, #2
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	1aa2      	subs	r2, r4, r2
			pdest[i - 1] = psrc[i - 1];
 80030f8:	5ccc      	ldrb	r4, [r1, r3]
 80030fa:	54c4      	strb	r4, [r0, r3]
 80030fc:	3b01      	subs	r3, #1
		for(i = count; i > 0; i --) {
 80030fe:	4293      	cmp	r3, r2
 8003100:	d1fa      	bne.n	80030f8 <my_memcpy+0x34>
 8003102:	e7ef      	b.n	80030e4 <my_memcpy+0x20>
		return NULL;
 8003104:	2000      	movs	r0, #0
 8003106:	e7ed      	b.n	80030e4 <my_memcpy+0x20>

08003108 <byte_to_int>:
 */
unsigned long byte_to_int(const unsigned char value[4])
{
	unsigned long nubmer = 0;

	nubmer = (unsigned long)value[0];
 8003108:	7802      	ldrb	r2, [r0, #0]
	nubmer <<= 8;
 800310a:	0212      	lsls	r2, r2, #8
	nubmer |= (unsigned long)value[1];
 800310c:	7843      	ldrb	r3, [r0, #1]
 800310e:	431a      	orrs	r2, r3
	nubmer <<= 8;
 8003110:	0212      	lsls	r2, r2, #8
	nubmer |= (unsigned long)value[2];
 8003112:	7883      	ldrb	r3, [r0, #2]
 8003114:	4313      	orrs	r3, r2
	nubmer <<= 8;
 8003116:	021b      	lsls	r3, r3, #8
	nubmer |= (unsigned long)value[3];
 8003118:	78c0      	ldrb	r0, [r0, #3]
 800311a:	4318      	orrs	r0, r3

	return nubmer;
}
 800311c:	4770      	bx	lr
	...

08003120 <mcu_dp_bool_update>:
 * @param[in] {value} 当前dp值
 * @return Null
 * @note   Null
 */
unsigned char mcu_dp_bool_update(unsigned char dpid,unsigned char value)
{
 8003120:	b510      	push	{r4, lr}
 8003122:	000c      	movs	r4, r1
	unsigned short send_len = 0;

	if(stop_update_flag == ENABLE)
 8003124:	4b10      	ldr	r3, [pc, #64]	; (8003168 <mcu_dp_bool_update+0x48>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d016      	beq.n	800315a <mcu_dp_bool_update+0x3a>
		return SUCCESS;

	send_len = set_wifi_uart_byte(send_len,dpid);
 800312c:	0001      	movs	r1, r0
 800312e:	2000      	movs	r0, #0
 8003130:	f000 fafe 	bl	8003730 <set_wifi_uart_byte>
	send_len = set_wifi_uart_byte(send_len,DP_TYPE_BOOL);
 8003134:	2101      	movs	r1, #1
 8003136:	f000 fafb 	bl	8003730 <set_wifi_uart_byte>
	//
	send_len = set_wifi_uart_byte(send_len,0);
 800313a:	2100      	movs	r1, #0
 800313c:	f000 faf8 	bl	8003730 <set_wifi_uart_byte>
	send_len = set_wifi_uart_byte(send_len,1);
 8003140:	2101      	movs	r1, #1
 8003142:	f000 faf5 	bl	8003730 <set_wifi_uart_byte>
	//
	if(value == FALSE) {
 8003146:	2c00      	cmp	r4, #0
 8003148:	d109      	bne.n	800315e <mcu_dp_bool_update+0x3e>
		send_len = set_wifi_uart_byte(send_len,FALSE);
 800314a:	2100      	movs	r1, #0
 800314c:	f000 faf0 	bl	8003730 <set_wifi_uart_byte>
 8003150:	0002      	movs	r2, r0
	}else {
		send_len = set_wifi_uart_byte(send_len,1);
	}

	wifi_uart_write_frame(STATE_UPLOAD_CMD, MCU_TX_VER, send_len);
 8003152:	2103      	movs	r1, #3
 8003154:	2007      	movs	r0, #7
 8003156:	f000 fb13 	bl	8003780 <wifi_uart_write_frame>

	return SUCCESS;
}
 800315a:	2001      	movs	r0, #1
 800315c:	bd10      	pop	{r4, pc}
		send_len = set_wifi_uart_byte(send_len,1);
 800315e:	2101      	movs	r1, #1
 8003160:	f000 fae6 	bl	8003730 <set_wifi_uart_byte>
 8003164:	0002      	movs	r2, r0
 8003166:	e7f4      	b.n	8003152 <mcu_dp_bool_update+0x32>
 8003168:	200009a5 	.word	0x200009a5

0800316c <mcu_dp_value_update>:
 * @param[in] {value} 当前dp值
 * @return Null
 * @note   Null
 */
unsigned char mcu_dp_value_update(unsigned char dpid,unsigned long value)
{
 800316c:	b510      	push	{r4, lr}
 800316e:	000c      	movs	r4, r1
	unsigned short send_len = 0;

	if(stop_update_flag == ENABLE)
 8003170:	4b12      	ldr	r3, [pc, #72]	; (80031bc <mcu_dp_value_update+0x50>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d01f      	beq.n	80031b8 <mcu_dp_value_update+0x4c>
		return SUCCESS;

	send_len = set_wifi_uart_byte(send_len,dpid);
 8003178:	0001      	movs	r1, r0
 800317a:	2000      	movs	r0, #0
 800317c:	f000 fad8 	bl	8003730 <set_wifi_uart_byte>
	send_len = set_wifi_uart_byte(send_len,DP_TYPE_VALUE);
 8003180:	2102      	movs	r1, #2
 8003182:	f000 fad5 	bl	8003730 <set_wifi_uart_byte>
	//
	send_len = set_wifi_uart_byte(send_len,0);
 8003186:	2100      	movs	r1, #0
 8003188:	f000 fad2 	bl	8003730 <set_wifi_uart_byte>
	send_len = set_wifi_uart_byte(send_len,4);
 800318c:	2104      	movs	r1, #4
 800318e:	f000 facf 	bl	8003730 <set_wifi_uart_byte>
	//
	send_len = set_wifi_uart_byte(send_len,value >> 24);
 8003192:	0e21      	lsrs	r1, r4, #24
 8003194:	f000 facc 	bl	8003730 <set_wifi_uart_byte>
	send_len = set_wifi_uart_byte(send_len,value >> 16);
 8003198:	0c21      	lsrs	r1, r4, #16
 800319a:	b2c9      	uxtb	r1, r1
 800319c:	f000 fac8 	bl	8003730 <set_wifi_uart_byte>
	send_len = set_wifi_uart_byte(send_len,value >> 8);
 80031a0:	0a21      	lsrs	r1, r4, #8
 80031a2:	b2c9      	uxtb	r1, r1
 80031a4:	f000 fac4 	bl	8003730 <set_wifi_uart_byte>
	send_len = set_wifi_uart_byte(send_len,value & 0xff);
 80031a8:	b2e1      	uxtb	r1, r4
 80031aa:	f000 fac1 	bl	8003730 <set_wifi_uart_byte>
 80031ae:	0002      	movs	r2, r0

	wifi_uart_write_frame(STATE_UPLOAD_CMD,MCU_TX_VER,send_len);
 80031b0:	2103      	movs	r1, #3
 80031b2:	2007      	movs	r0, #7
 80031b4:	f000 fae4 	bl	8003780 <wifi_uart_write_frame>

	return SUCCESS;
}
 80031b8:	2001      	movs	r0, #1
 80031ba:	bd10      	pop	{r4, pc}
 80031bc:	200009a5 	.word	0x200009a5

080031c0 <mcu_get_dp_download_bool>:
 * @return 当前dp值
 * @note   Null
 */
unsigned char mcu_get_dp_download_bool(const unsigned char value[],unsigned short len)
{
	return(value[0]);
 80031c0:	7800      	ldrb	r0, [r0, #0]
}
 80031c2:	4770      	bx	lr

080031c4 <mcu_get_dp_download_value>:
 * @param[in] {len} dp数据长度
 * @return 当前dp值
 * @note   Null
 */
unsigned long mcu_get_dp_download_value(const unsigned char value[],unsigned short len)
{
 80031c4:	b510      	push	{r4, lr}
	return(byte_to_int(value));
 80031c6:	f7ff ff9f 	bl	8003108 <byte_to_int>
}
 80031ca:	bd10      	pop	{r4, pc}

080031cc <uart_receive_input>:
 */
void uart_receive_input(unsigned char value)
{
	//#error "请在串口接收中断中调用uart_receive_input(value),串口数据由MCU_SDK处理,用户请勿再另行处理,完成后删除该行"

	if(1 == rx_buf_out - rx_buf_in) {
 80031cc:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <uart_receive_input+0x30>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a0b      	ldr	r2, [pc, #44]	; (8003200 <uart_receive_input+0x34>)
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	1a99      	subs	r1, r3, r2
 80031d6:	2901      	cmp	r1, #1
 80031d8:	d00f      	beq.n	80031fa <uart_receive_input+0x2e>
		//串口接收缓存已满
	}else if((rx_buf_in > rx_buf_out) && ((rx_buf_in - rx_buf_out) >= sizeof(wifi_uart_rx_buf))) {
 80031da:	4293      	cmp	r3, r2
 80031dc:	d202      	bcs.n	80031e4 <uart_receive_input+0x18>
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b16      	cmp	r3, #22
 80031e2:	d80a      	bhi.n	80031fa <uart_receive_input+0x2e>
		//串口接收缓存已满
	}else {
		//串口接收缓存未满
		if(rx_buf_in >= (unsigned char *)(wifi_uart_rx_buf + sizeof(wifi_uart_rx_buf))) {
 80031e4:	4b07      	ldr	r3, [pc, #28]	; (8003204 <uart_receive_input+0x38>)
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d302      	bcc.n	80031f0 <uart_receive_input+0x24>
			rx_buf_in = (unsigned char *)(wifi_uart_rx_buf);
 80031ea:	4b05      	ldr	r3, [pc, #20]	; (8003200 <uart_receive_input+0x34>)
 80031ec:	4a06      	ldr	r2, [pc, #24]	; (8003208 <uart_receive_input+0x3c>)
 80031ee:	601a      	str	r2, [r3, #0]
		}

		*rx_buf_in ++ = value;
 80031f0:	4a03      	ldr	r2, [pc, #12]	; (8003200 <uart_receive_input+0x34>)
 80031f2:	6813      	ldr	r3, [r2, #0]
 80031f4:	1c59      	adds	r1, r3, #1
 80031f6:	6011      	str	r1, [r2, #0]
 80031f8:	7018      	strb	r0, [r3, #0]
	}
}
 80031fa:	4770      	bx	lr
 80031fc:	20000968 	.word	0x20000968
 8003200:	2000094c 	.word	0x2000094c
 8003204:	20000967 	.word	0x20000967
 8003208:	20000950 	.word	0x20000950

0800320c <wifi_uart_service>:
 * @param  Null
 * @return Null
 * @note   在MCU主函数while循环中调用该函数
 */
void wifi_uart_service(void)
{
 800320c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800320e:	46d6      	mov	lr, sl
 8003210:	464f      	mov	r7, r9
 8003212:	4646      	mov	r6, r8
 8003214:	b5c0      	push	{r6, r7, lr}
	//#error "请直接在main函数的while(1){}中添加wifi_uart_service(),调用该函数不要加任何条件判断,完成后删除该行"
	static unsigned short rx_in = 0;
	unsigned short offset = 0;
	unsigned short rx_value_len = 0;

	while((rx_in < sizeof(wifi_data_process_buf)) && with_data_rxbuff() > 0) {
 8003216:	4b38      	ldr	r3, [pc, #224]	; (80032f8 <wifi_uart_service+0xec>)
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	2b1e      	cmp	r3, #30
 800321c:	d80e      	bhi.n	800323c <wifi_uart_service+0x30>
		wifi_data_process_buf[rx_in ++] = take_byte_rxbuff();
 800321e:	4c36      	ldr	r4, [pc, #216]	; (80032f8 <wifi_uart_service+0xec>)
 8003220:	4e36      	ldr	r6, [pc, #216]	; (80032fc <wifi_uart_service+0xf0>)
	while((rx_in < sizeof(wifi_data_process_buf)) && with_data_rxbuff() > 0) {
 8003222:	f000 fbf3 	bl	8003a0c <with_data_rxbuff>
 8003226:	2800      	cmp	r0, #0
 8003228:	d008      	beq.n	800323c <wifi_uart_service+0x30>
		wifi_data_process_buf[rx_in ++] = take_byte_rxbuff();
 800322a:	8825      	ldrh	r5, [r4, #0]
 800322c:	1c6b      	adds	r3, r5, #1
 800322e:	8023      	strh	r3, [r4, #0]
 8003230:	f000 fbfa 	bl	8003a28 <take_byte_rxbuff>
 8003234:	5570      	strb	r0, [r6, r5]
	while((rx_in < sizeof(wifi_data_process_buf)) && with_data_rxbuff() > 0) {
 8003236:	8823      	ldrh	r3, [r4, #0]
 8003238:	2b1e      	cmp	r3, #30
 800323a:	d9f2      	bls.n	8003222 <wifi_uart_service+0x16>
	}

	if(rx_in < PROTOCOL_HEAD)
 800323c:	4b2e      	ldr	r3, [pc, #184]	; (80032f8 <wifi_uart_service+0xec>)
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	2b06      	cmp	r3, #6
 8003242:	d94f      	bls.n	80032e4 <wifi_uart_service+0xd8>
	unsigned short offset = 0;
 8003244:	2400      	movs	r4, #0
		return;

	while((rx_in - offset) >= PROTOCOL_HEAD) {
 8003246:	4e2c      	ldr	r6, [pc, #176]	; (80032f8 <wifi_uart_service+0xec>)
		if(wifi_data_process_buf[offset + HEAD_FIRST] != FRAME_FIRST) {
 8003248:	4f2c      	ldr	r7, [pc, #176]	; (80032fc <wifi_uart_service+0xf0>)
			offset ++;
			continue;
		}

		if(wifi_data_process_buf[offset + HEAD_SECOND] != FRAME_SECOND) {
 800324a:	46b8      	mov	r8, r7
 800324c:	e001      	b.n	8003252 <wifi_uart_service+0x46>
			offset ++;
 800324e:	3401      	adds	r4, #1
 8003250:	b2a4      	uxth	r4, r4
	while((rx_in - offset) >= PROTOCOL_HEAD) {
 8003252:	8832      	ldrh	r2, [r6, #0]
 8003254:	0025      	movs	r5, r4
 8003256:	1b13      	subs	r3, r2, r4
 8003258:	2b06      	cmp	r3, #6
 800325a:	dd3d      	ble.n	80032d8 <wifi_uart_service+0xcc>
		if(wifi_data_process_buf[offset + HEAD_FIRST] != FRAME_FIRST) {
 800325c:	5d39      	ldrb	r1, [r7, r4]
 800325e:	2955      	cmp	r1, #85	; 0x55
 8003260:	d1f5      	bne.n	800324e <wifi_uart_service+0x42>
		if(wifi_data_process_buf[offset + HEAD_SECOND] != FRAME_SECOND) {
 8003262:	1c69      	adds	r1, r5, #1
 8003264:	4640      	mov	r0, r8
 8003266:	5c41      	ldrb	r1, [r0, r1]
 8003268:	b2c9      	uxtb	r1, r1
 800326a:	29aa      	cmp	r1, #170	; 0xaa
 800326c:	d125      	bne.n	80032ba <wifi_uart_service+0xae>
			offset ++;
			continue;
		}

		if(wifi_data_process_buf[offset + PROTOCOL_VERSION] != MCU_RX_VER) {
 800326e:	1ca9      	adds	r1, r5, #2
 8003270:	4822      	ldr	r0, [pc, #136]	; (80032fc <wifi_uart_service+0xf0>)
 8003272:	5c41      	ldrb	r1, [r0, r1]
 8003274:	2900      	cmp	r1, #0
 8003276:	d123      	bne.n	80032c0 <wifi_uart_service+0xb4>
			offset += 2;
			continue;
		}

		rx_value_len = wifi_data_process_buf[offset + LENGTH_HIGH] * 0x100;
 8003278:	1d29      	adds	r1, r5, #4
 800327a:	4820      	ldr	r0, [pc, #128]	; (80032fc <wifi_uart_service+0xf0>)
 800327c:	5c41      	ldrb	r1, [r0, r1]
 800327e:	0209      	lsls	r1, r1, #8
 8003280:	4689      	mov	r9, r1
		rx_value_len += (wifi_data_process_buf[offset + LENGTH_LOW] + PROTOCOL_HEAD);
 8003282:	1d69      	adds	r1, r5, #5
 8003284:	5c40      	ldrb	r0, [r0, r1]
 8003286:	3007      	adds	r0, #7
 8003288:	0001      	movs	r1, r0
 800328a:	4449      	add	r1, r9
 800328c:	b289      	uxth	r1, r1
 800328e:	4689      	mov	r9, r1
		if(rx_value_len > sizeof(wifi_data_process_buf) + PROTOCOL_HEAD) {
 8003290:	2926      	cmp	r1, #38	; 0x26
 8003292:	d818      	bhi.n	80032c6 <wifi_uart_service+0xba>
			offset += 3;
			continue;
		}

		if((rx_in - offset) < rx_value_len) {
 8003294:	4299      	cmp	r1, r3
 8003296:	dc1f      	bgt.n	80032d8 <wifi_uart_service+0xcc>
			break;
		}

		//数据接收完成
		if(get_check_sum((unsigned char *)wifi_data_process_buf + offset,rx_value_len - 1) != wifi_data_process_buf[offset + rx_value_len - 1]) {
 8003298:	3901      	subs	r1, #1
 800329a:	b289      	uxth	r1, r1
 800329c:	4b17      	ldr	r3, [pc, #92]	; (80032fc <wifi_uart_service+0xf0>)
 800329e:	469a      	mov	sl, r3
 80032a0:	18e0      	adds	r0, r4, r3
 80032a2:	f000 fa5b 	bl	800375c <get_check_sum>
 80032a6:	444d      	add	r5, r9
 80032a8:	3d01      	subs	r5, #1
 80032aa:	4653      	mov	r3, sl
 80032ac:	5d5b      	ldrb	r3, [r3, r5]
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	4298      	cmp	r0, r3
 80032b2:	d00b      	beq.n	80032cc <wifi_uart_service+0xc0>
			//校验出错
			//printf("crc error (crc:0x%X  but data:0x%X)\r\n",get_check_sum((unsigned char *)wifi_data_process_buf + offset,rx_value_len - 1),wifi_data_process_buf[offset + rx_value_len - 1]);
			offset += 3;
 80032b4:	3403      	adds	r4, #3
 80032b6:	b2a4      	uxth	r4, r4
			continue;
 80032b8:	e7cb      	b.n	8003252 <wifi_uart_service+0x46>
			offset ++;
 80032ba:	3401      	adds	r4, #1
 80032bc:	b2a4      	uxth	r4, r4
			continue;
 80032be:	e7c8      	b.n	8003252 <wifi_uart_service+0x46>
			offset += 2;
 80032c0:	3402      	adds	r4, #2
 80032c2:	b2a4      	uxth	r4, r4
			continue;
 80032c4:	e7c5      	b.n	8003252 <wifi_uart_service+0x46>
			offset += 3;
 80032c6:	3403      	adds	r4, #3
 80032c8:	b2a4      	uxth	r4, r4
			continue;
 80032ca:	e7c2      	b.n	8003252 <wifi_uart_service+0x46>
		}

		data_handle(offset);
 80032cc:	0020      	movs	r0, r4
 80032ce:	f000 fa7b 	bl	80037c8 <data_handle>
		offset += rx_value_len;
 80032d2:	444c      	add	r4, r9
 80032d4:	b2a4      	uxth	r4, r4
 80032d6:	e7bc      	b.n	8003252 <wifi_uart_service+0x46>
	}//end while

	rx_in -= offset;
 80032d8:	1b12      	subs	r2, r2, r4
 80032da:	b292      	uxth	r2, r2
 80032dc:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <wifi_uart_service+0xec>)
 80032de:	801a      	strh	r2, [r3, #0]
	if(rx_in > 0) {
 80032e0:	2a00      	cmp	r2, #0
 80032e2:	d104      	bne.n	80032ee <wifi_uart_service+0xe2>
		my_memcpy((char *)wifi_data_process_buf, (const char *)wifi_data_process_buf + offset, rx_in);
	}
}
 80032e4:	bc1c      	pop	{r2, r3, r4}
 80032e6:	4690      	mov	r8, r2
 80032e8:	4699      	mov	r9, r3
 80032ea:	46a2      	mov	sl, r4
 80032ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		my_memcpy((char *)wifi_data_process_buf, (const char *)wifi_data_process_buf + offset, rx_in);
 80032ee:	4803      	ldr	r0, [pc, #12]	; (80032fc <wifi_uart_service+0xf0>)
 80032f0:	1821      	adds	r1, r4, r0
 80032f2:	f7ff fee7 	bl	80030c4 <my_memcpy>
 80032f6:	e7f5      	b.n	80032e4 <wifi_uart_service+0xd8>
 80032f8:	20000394 	.word	0x20000394
 80032fc:	2000092c 	.word	0x2000092c

08003300 <wifi_protocol_init>:
 * @note   在MCU初始化代码中调用该函数
 */
void wifi_protocol_init(void)
{
	//#error " 请在main函数中添加wifi_protocol_init()完成wifi协议初始化,并删除该行"
	rx_buf_in = (unsigned char *)wifi_uart_rx_buf;
 8003300:	4b05      	ldr	r3, [pc, #20]	; (8003318 <wifi_protocol_init+0x18>)
 8003302:	4a06      	ldr	r2, [pc, #24]	; (800331c <wifi_protocol_init+0x1c>)
 8003304:	6013      	str	r3, [r2, #0]
	rx_buf_out = (unsigned char *)wifi_uart_rx_buf;
 8003306:	4a06      	ldr	r2, [pc, #24]	; (8003320 <wifi_protocol_init+0x20>)
 8003308:	6013      	str	r3, [r2, #0]

	stop_update_flag = DISABLE;
 800330a:	4b06      	ldr	r3, [pc, #24]	; (8003324 <wifi_protocol_init+0x24>)
 800330c:	2200      	movs	r2, #0
 800330e:	701a      	strb	r2, [r3, #0]

#ifndef WIFI_CONTROL_SELF_MODE
	wifi_work_state = WIFI_SATE_UNKNOW;
 8003310:	4b05      	ldr	r3, [pc, #20]	; (8003328 <wifi_protocol_init+0x28>)
 8003312:	32ff      	adds	r2, #255	; 0xff
 8003314:	701a      	strb	r2, [r3, #0]
#endif
}
 8003316:	4770      	bx	lr
 8003318:	20000950 	.word	0x20000950
 800331c:	2000094c 	.word	0x2000094c
 8003320:	20000968 	.word	0x20000968
 8003324:	200009a5 	.word	0x200009a5
 8003328:	200009a3 	.word	0x200009a3

0800332c <mcu_get_system_time>:
 * @param  Null
 * @return Null
 * @note   MCU主动调用完成后在mcu_write_rtctime函数内校对rtc时钟
 */
void mcu_get_system_time(void)
{
 800332c:	b510      	push	{r4, lr}
	wifi_uart_write_frame(GET_LOCAL_TIME_CMD, MCU_TX_VER, 0);
 800332e:	2200      	movs	r2, #0
 8003330:	2103      	movs	r1, #3
 8003332:	201c      	movs	r0, #28
 8003334:	f000 fa24 	bl	8003780 <wifi_uart_write_frame>
}
 8003338:	bd10      	pop	{r4, pc}
	...

0800333c <WriteCmd>:
		0xA8, 0x3F,

		0xC8, 0xD3, 0x00, 0xD5, 0x80, 0xD8, 0x05, 0xD9, 0xF1, 0xDA, 0x12,

		0xDB, 0x30, 0x8D, 0x14, 0xAF, 0x20, 0x00 };
void WriteCmd(void) {
 800333c:	b500      	push	{lr}
 800333e:	b085      	sub	sp, #20
	HAL_I2C_Mem_Write(&hi2c1, 0x78, 0x00, I2C_MEMADD_SIZE_8BIT, CMD_Data, 29,
 8003340:	23ff      	movs	r3, #255	; 0xff
 8003342:	9302      	str	r3, [sp, #8]
 8003344:	3be2      	subs	r3, #226	; 0xe2
 8003346:	9301      	str	r3, [sp, #4]
 8003348:	4b04      	ldr	r3, [pc, #16]	; (800335c <WriteCmd+0x20>)
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	2301      	movs	r3, #1
 800334e:	2200      	movs	r2, #0
 8003350:	2178      	movs	r1, #120	; 0x78
 8003352:	4803      	ldr	r0, [pc, #12]	; (8003360 <WriteCmd+0x24>)
 8003354:	f001 fb30 	bl	80049b8 <HAL_I2C_Mem_Write>
			0xff);
}
 8003358:	b005      	add	sp, #20
 800335a:	bd00      	pop	{pc}
 800335c:	20000008 	.word	0x20000008
 8003360:	20000820 	.word	0x20000820

08003364 <OLED_Refreash>:

//向设备写数据
void OLED_Refreash(void) {
 8003364:	b500      	push	{lr}
 8003366:	b085      	sub	sp, #20
	HAL_I2C_Mem_Write(&hi2c1, 0x78, 0x40, I2C_MEMADD_SIZE_8BIT, OLED[0], 1024,
 8003368:	23ff      	movs	r3, #255	; 0xff
 800336a:	9302      	str	r3, [sp, #8]
 800336c:	2380      	movs	r3, #128	; 0x80
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	9301      	str	r3, [sp, #4]
 8003372:	4b05      	ldr	r3, [pc, #20]	; (8003388 <OLED_Refreash+0x24>)
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	2301      	movs	r3, #1
 8003378:	2240      	movs	r2, #64	; 0x40
 800337a:	2178      	movs	r1, #120	; 0x78
 800337c:	4803      	ldr	r0, [pc, #12]	; (800338c <OLED_Refreash+0x28>)
 800337e:	f001 fb1b 	bl	80049b8 <HAL_I2C_Mem_Write>
			0xff);
}
 8003382:	b005      	add	sp, #20
 8003384:	bd00      	pop	{pc}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	20000398 	.word	0x20000398
 800338c:	20000820 	.word	0x20000820

08003390 <OLED_Init>:
//初始化oled屏幕
void OLED_Init(void) {
 8003390:	b510      	push	{r4, lr}
	HAL_Delay(200); //这里的延时很重要
 8003392:	20c8      	movs	r0, #200	; 0xc8
 8003394:	f000 fbac 	bl	8003af0 <HAL_Delay>
	WriteCmd();
 8003398:	f7ff ffd0 	bl	800333c <WriteCmd>
}
 800339c:	bd10      	pop	{r4, pc}
	...

080033a0 <OLED_Clear>:
//清屏
void OLED_Clear(void) {
 80033a0:	4b06      	ldr	r3, [pc, #24]	; (80033bc <OLED_Clear+0x1c>)
 80033a2:	2280      	movs	r2, #128	; 0x80
 80033a4:	00d2      	lsls	r2, r2, #3
 80033a6:	1898      	adds	r0, r3, r2
	uint8_t i, n;
	for (i = 0; i < 8; i++) {
		for (n = 0; n < 128; n++)
			OLED[i][n] = 0;
 80033a8:	2100      	movs	r1, #0
 80033aa:	001a      	movs	r2, r3
 80033ac:	3280      	adds	r2, #128	; 0x80
 80033ae:	7019      	strb	r1, [r3, #0]
 80033b0:	3301      	adds	r3, #1
		for (n = 0; n < 128; n++)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d1fb      	bne.n	80033ae <OLED_Clear+0xe>
	for (i = 0; i < 8; i++) {
 80033b6:	4283      	cmp	r3, r0
 80033b8:	d1f7      	bne.n	80033aa <OLED_Clear+0xa>
	}
}
 80033ba:	4770      	bx	lr
 80033bc:	20000398 	.word	0x20000398

080033c0 <OLED_ShowChar>:
//x:0~127
//y:0~63
//mode:0,反白显示;1,正常显示				 
//size:选择字体 16/12 
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t Char_Size,
		uint8_t Is_Reverse) {
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	ac04      	add	r4, sp, #16
 80033c4:	7825      	ldrb	r5, [r4, #0]
	unsigned char c = 0, i = 0;
	c = chr - ' '; //得到偏移后的值
	if (x > 128 - 1) {
 80033c6:	b244      	sxtb	r4, r0
 80033c8:	2c00      	cmp	r4, #0
 80033ca:	db02      	blt.n	80033d2 <OLED_ShowChar+0x12>
		x = 0;
		y = y + 2;
	}
	if (Char_Size == 16) {
 80033cc:	2b10      	cmp	r3, #16
 80033ce:	d004      	beq.n	80033da <OLED_ShowChar+0x1a>
		} else {
			OLED[y][x + i] = ~F8X16[c * 16 + i];
			OLED[y + 1][x + i] = ~F8X16[c * 16 + i + 8];
		}
	}
}
 80033d0:	bd70      	pop	{r4, r5, r6, pc}
		y = y + 2;
 80033d2:	3102      	adds	r1, #2
 80033d4:	b2c9      	uxtb	r1, r1
		x = 0;
 80033d6:	2000      	movs	r0, #0
 80033d8:	e7f8      	b.n	80033cc <OLED_ShowChar+0xc>
	c = chr - ' '; //得到偏移后的值
 80033da:	3a20      	subs	r2, #32
 80033dc:	b2d2      	uxtb	r2, r2
		if (Is_Reverse == 0) {
 80033de:	2d00      	cmp	r5, #0
 80033e0:	d116      	bne.n	8003410 <OLED_ShowChar+0x50>
				OLED[y][x + i] = F8X16[c * 16 + i];
 80033e2:	0112      	lsls	r2, r2, #4
 80033e4:	4b12      	ldr	r3, [pc, #72]	; (8003430 <OLED_ShowChar+0x70>)
 80033e6:	18d2      	adds	r2, r2, r3
 80033e8:	01c9      	lsls	r1, r1, #7
 80033ea:	0003      	movs	r3, r0
 80033ec:	3380      	adds	r3, #128	; 0x80
 80033ee:	185b      	adds	r3, r3, r1
 80033f0:	4c10      	ldr	r4, [pc, #64]	; (8003434 <OLED_ShowChar+0x74>)
 80033f2:	191b      	adds	r3, r3, r4
 80033f4:	3488      	adds	r4, #136	; 0x88
 80033f6:	1820      	adds	r0, r4, r0
 80033f8:	1841      	adds	r1, r0, r1
 80033fa:	001c      	movs	r4, r3
 80033fc:	3c80      	subs	r4, #128	; 0x80
 80033fe:	7815      	ldrb	r5, [r2, #0]
 8003400:	7025      	strb	r5, [r4, #0]
				OLED[y + 1][x + i] = F8X16[c * 16 + i + 8];
 8003402:	7a14      	ldrb	r4, [r2, #8]
 8003404:	701c      	strb	r4, [r3, #0]
 8003406:	3201      	adds	r2, #1
 8003408:	3301      	adds	r3, #1
			for (i = 0; i < 8; i++) {
 800340a:	428b      	cmp	r3, r1
 800340c:	d1f5      	bne.n	80033fa <OLED_ShowChar+0x3a>
 800340e:	e7df      	b.n	80033d0 <OLED_ShowChar+0x10>
			OLED[y][x + i] = ~F8X16[c * 16 + i];
 8003410:	0112      	lsls	r2, r2, #4
 8003412:	4b08      	ldr	r3, [pc, #32]	; (8003434 <OLED_ShowChar+0x74>)
 8003414:	01cd      	lsls	r5, r1, #7
 8003416:	195d      	adds	r5, r3, r5
 8003418:	4c05      	ldr	r4, [pc, #20]	; (8003430 <OLED_ShowChar+0x70>)
 800341a:	5ca6      	ldrb	r6, [r4, r2]
 800341c:	43f6      	mvns	r6, r6
 800341e:	542e      	strb	r6, [r5, r0]
			OLED[y + 1][x + i] = ~F8X16[c * 16 + i + 8];
 8003420:	3101      	adds	r1, #1
 8003422:	01c9      	lsls	r1, r1, #7
 8003424:	1859      	adds	r1, r3, r1
 8003426:	18a2      	adds	r2, r4, r2
 8003428:	7a13      	ldrb	r3, [r2, #8]
 800342a:	43db      	mvns	r3, r3
 800342c:	540b      	strb	r3, [r1, r0]
}
 800342e:	e7cf      	b.n	80033d0 <OLED_ShowChar+0x10>
 8003430:	08005b0c 	.word	0x08005b0c
 8003434:	20000398 	.word	0x20000398

08003438 <OLED_ShowNum>:
		uint8_t size2,char FillChar) {
 8003438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800343a:	46de      	mov	lr, fp
 800343c:	4657      	mov	r7, sl
 800343e:	464e      	mov	r6, r9
 8003440:	4645      	mov	r5, r8
 8003442:	b5e0      	push	{r5, r6, r7, lr}
 8003444:	b089      	sub	sp, #36	; 0x24
 8003446:	0007      	movs	r7, r0
 8003448:	9105      	str	r1, [sp, #20]
 800344a:	9204      	str	r2, [sp, #16]
 800344c:	aa12      	add	r2, sp, #72	; 0x48
 800344e:	7811      	ldrb	r1, [r2, #0]
 8003450:	9106      	str	r1, [sp, #24]
 8003452:	aa13      	add	r2, sp, #76	; 0x4c
 8003454:	7812      	ldrb	r2, [r2, #0]
 8003456:	9207      	str	r2, [sp, #28]
	for (t = 0; t < len; t++) {
 8003458:	2b00      	cmp	r3, #0
 800345a:	d048      	beq.n	80034ee <OLED_ShowNum+0xb6>
		OLED_ShowChar(x + (size2 / 2) * t, y, temp + '0', size2, 0);
 800345c:	084a      	lsrs	r2, r1, #1
 800345e:	4691      	mov	r9, r2
 8003460:	1e5d      	subs	r5, r3, #1
 8003462:	b2ed      	uxtb	r5, r5
 8003464:	0006      	movs	r6, r0
 8003466:	2200      	movs	r2, #0
 8003468:	4690      	mov	r8, r2
	uint8_t enshow = 0;
 800346a:	9203      	str	r2, [sp, #12]
		OLED_ShowChar(x + (size2 / 2) * t, y, temp + '0', size2, 0);
 800346c:	4693      	mov	fp, r2
		if (enshow == 0 && t < (len - 1)) {
 800346e:	3b01      	subs	r3, #1
 8003470:	469a      	mov	sl, r3
 8003472:	e016      	b.n	80034a2 <OLED_ShowNum+0x6a>
	unsigned int result = 1;
 8003474:	2101      	movs	r1, #1
 8003476:	e020      	b.n	80034ba <OLED_ShowNum+0x82>
		OLED_ShowChar(x + (size2 / 2) * t, y, temp + '0', size2, 0);
 8003478:	0022      	movs	r2, r4
 800347a:	3230      	adds	r2, #48	; 0x30
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	465b      	mov	r3, fp
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	9b06      	ldr	r3, [sp, #24]
 8003484:	9905      	ldr	r1, [sp, #20]
 8003486:	0030      	movs	r0, r6
 8003488:	f7ff ff9a 	bl	80033c0 <OLED_ShowChar>
 800348c:	2301      	movs	r3, #1
 800348e:	469c      	mov	ip, r3
 8003490:	44e0      	add	r8, ip
 8003492:	3d01      	subs	r5, #1
 8003494:	b2ed      	uxtb	r5, r5
 8003496:	444f      	add	r7, r9
 8003498:	b2ff      	uxtb	r7, r7
 800349a:	444e      	add	r6, r9
 800349c:	b2f6      	uxtb	r6, r6
	for (t = 0; t < len; t++) {
 800349e:	2dff      	cmp	r5, #255	; 0xff
 80034a0:	d025      	beq.n	80034ee <OLED_ShowNum+0xb6>
 80034a2:	1e6a      	subs	r2, r5, #1
 80034a4:	b2d2      	uxtb	r2, r2
	while (n--)
 80034a6:	2d00      	cmp	r5, #0
 80034a8:	d0e4      	beq.n	8003474 <OLED_ShowNum+0x3c>
	unsigned int result = 1;
 80034aa:	2101      	movs	r1, #1
		result *= m;
 80034ac:	008b      	lsls	r3, r1, #2
 80034ae:	1859      	adds	r1, r3, r1
 80034b0:	0049      	lsls	r1, r1, #1
	while (n--)
 80034b2:	3a01      	subs	r2, #1
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	2aff      	cmp	r2, #255	; 0xff
 80034b8:	d1f8      	bne.n	80034ac <OLED_ShowNum+0x74>
		temp = (num / oled_pow(10, len - t - 1)) % 10;
 80034ba:	9804      	ldr	r0, [sp, #16]
 80034bc:	f7fc fe38 	bl	8000130 <__udivsi3>
 80034c0:	210a      	movs	r1, #10
 80034c2:	f7fc febb 	bl	800023c <__aeabi_uidivmod>
 80034c6:	b2cc      	uxtb	r4, r1
		if (enshow == 0 && t < (len - 1)) {
 80034c8:	9b03      	ldr	r3, [sp, #12]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1d4      	bne.n	8003478 <OLED_ShowNum+0x40>
 80034ce:	45c2      	cmp	sl, r8
 80034d0:	ddd2      	ble.n	8003478 <OLED_ShowNum+0x40>
				enshow = 1;
 80034d2:	3301      	adds	r3, #1
 80034d4:	9303      	str	r3, [sp, #12]
			if (temp == 0) {
 80034d6:	2c00      	cmp	r4, #0
 80034d8:	d1ce      	bne.n	8003478 <OLED_ShowNum+0x40>
				OLED_ShowChar(x + (size2 / 2) * t, y, FillChar, size2, 0);
 80034da:	465b      	mov	r3, fp
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	9b06      	ldr	r3, [sp, #24]
 80034e0:	9a07      	ldr	r2, [sp, #28]
 80034e2:	9905      	ldr	r1, [sp, #20]
 80034e4:	0038      	movs	r0, r7
 80034e6:	f7ff ff6b 	bl	80033c0 <OLED_ShowChar>
				continue;
 80034ea:	9403      	str	r4, [sp, #12]
 80034ec:	e7ce      	b.n	800348c <OLED_ShowNum+0x54>
}
 80034ee:	b009      	add	sp, #36	; 0x24
 80034f0:	bc3c      	pop	{r2, r3, r4, r5}
 80034f2:	4690      	mov	r8, r2
 80034f4:	4699      	mov	r9, r3
 80034f6:	46a2      	mov	sl, r4
 80034f8:	46ab      	mov	fp, r5
 80034fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034fc <OLED_ShowString>:

//显示一个字符号串
void OLED_ShowString(uint8_t x, uint8_t y, uint8_t *chr, uint8_t Char_Size) {
 80034fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034fe:	46ce      	mov	lr, r9
 8003500:	b500      	push	{lr}
 8003502:	b084      	sub	sp, #16
 8003504:	0004      	movs	r4, r0
 8003506:	000f      	movs	r7, r1
 8003508:	4691      	mov	r9, r2
 800350a:	9303      	str	r3, [sp, #12]
	unsigned char j = 0;
	while (chr[j] != '\0') {
 800350c:	7812      	ldrb	r2, [r2, #0]
 800350e:	2a00      	cmp	r2, #0
 8003510:	d016      	beq.n	8003540 <OLED_ShowString+0x44>
	unsigned char j = 0;
 8003512:	2500      	movs	r5, #0
		OLED_ShowChar(x, y, chr[j], Char_Size, 0);
 8003514:	2600      	movs	r6, #0
 8003516:	e005      	b.n	8003524 <OLED_ShowString+0x28>
		x += 8;
		if (x > 120) {
			x = 0;
			y += 2;
		}
		j++;
 8003518:	3501      	adds	r5, #1
 800351a:	b2ed      	uxtb	r5, r5
	while (chr[j] != '\0') {
 800351c:	464b      	mov	r3, r9
 800351e:	5d5a      	ldrb	r2, [r3, r5]
 8003520:	2a00      	cmp	r2, #0
 8003522:	d00d      	beq.n	8003540 <OLED_ShowString+0x44>
		OLED_ShowChar(x, y, chr[j], Char_Size, 0);
 8003524:	9600      	str	r6, [sp, #0]
 8003526:	9b03      	ldr	r3, [sp, #12]
 8003528:	0039      	movs	r1, r7
 800352a:	0020      	movs	r0, r4
 800352c:	f7ff ff48 	bl	80033c0 <OLED_ShowChar>
		x += 8;
 8003530:	3408      	adds	r4, #8
 8003532:	b2e4      	uxtb	r4, r4
		if (x > 120) {
 8003534:	2c78      	cmp	r4, #120	; 0x78
 8003536:	d9ef      	bls.n	8003518 <OLED_ShowString+0x1c>
			y += 2;
 8003538:	3702      	adds	r7, #2
 800353a:	b2ff      	uxtb	r7, r7
			x = 0;
 800353c:	0034      	movs	r4, r6
 800353e:	e7eb      	b.n	8003518 <OLED_ShowString+0x1c>
	}
}
 8003540:	b004      	add	sp, #16
 8003542:	bc04      	pop	{r2}
 8003544:	4691      	mov	r9, r2
 8003546:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003548 <OLED_ShowCHinese>:
//显示汉字
//hzk 用取模软件得出的数组
void OLED_ShowCHinese(uint8_t x, uint8_t y, uint8_t no) {
 8003548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800354a:	000f      	movs	r7, r1
	uint8_t t;

	for (t = 0; t < 16; t++) {
		OLED[y][x + t] = Hzk[2 * no][t];
 800354c:	0054      	lsls	r4, r2, #1
 800354e:	0196      	lsls	r6, r2, #6
 8003550:	490e      	ldr	r1, [pc, #56]	; (800358c <OLED_ShowCHinese+0x44>)
 8003552:	1871      	adds	r1, r6, r1
 8003554:	01ff      	lsls	r7, r7, #7
 8003556:	183a      	adds	r2, r7, r0
 8003558:	4b0d      	ldr	r3, [pc, #52]	; (8003590 <OLED_ShowCHinese+0x48>)
 800355a:	18d2      	adds	r2, r2, r3
 800355c:	2300      	movs	r3, #0
 800355e:	5ccd      	ldrb	r5, [r1, r3]
 8003560:	54d5      	strb	r5, [r2, r3]
 8003562:	3301      	adds	r3, #1
	for (t = 0; t < 16; t++) {
 8003564:	2b10      	cmp	r3, #16
 8003566:	d1fa      	bne.n	800355e <OLED_ShowCHinese+0x16>
 8003568:	1c63      	adds	r3, r4, #1
 800356a:	015b      	lsls	r3, r3, #5
 800356c:	4a07      	ldr	r2, [pc, #28]	; (800358c <OLED_ShowCHinese+0x44>)
 800356e:	189b      	adds	r3, r3, r2
 8003570:	0001      	movs	r1, r0
 8003572:	3180      	adds	r1, #128	; 0x80
 8003574:	19c9      	adds	r1, r1, r7
 8003576:	4806      	ldr	r0, [pc, #24]	; (8003590 <OLED_ShowCHinese+0x48>)
 8003578:	1809      	adds	r1, r1, r0
 800357a:	3230      	adds	r2, #48	; 0x30
 800357c:	1992      	adds	r2, r2, r6
	}
	for (t = 0; t < 16; t++) {
		OLED[y + 1][x + t] = Hzk[2 * no + 1][t];
 800357e:	7818      	ldrb	r0, [r3, #0]
 8003580:	7008      	strb	r0, [r1, #0]
 8003582:	3301      	adds	r3, #1
 8003584:	3101      	adds	r1, #1
	for (t = 0; t < 16; t++) {
 8003586:	4293      	cmp	r3, r2
 8003588:	d1f9      	bne.n	800357e <OLED_ShowCHinese+0x36>
	}
}
 800358a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800358c:	20000028 	.word	0x20000028
 8003590:	20000398 	.word	0x20000398

08003594 <uart_transmit_output>:
 * @brief  串口发送数据
 * @param[in] {value} 串口要发送的1字节数据
 * @return Null
 */
void uart_transmit_output(unsigned char value)
{
 8003594:	b500      	push	{lr}
 8003596:	b083      	sub	sp, #12
 8003598:	466b      	mov	r3, sp
 800359a:	1dd9      	adds	r1, r3, #7
 800359c:	7008      	strb	r0, [r1, #0]
	extern UART_HandleTypeDef huart1;
	//#error "请将MCU串口发送函数填入该函数,并删除该行"
	HAL_UART_Transmit(&huart1, &value, 1, 0xff);
 800359e:	23ff      	movs	r3, #255	; 0xff
 80035a0:	2201      	movs	r2, #1
 80035a2:	4802      	ldr	r0, [pc, #8]	; (80035ac <uart_transmit_output+0x18>)
 80035a4:	f002 f828 	bl	80055f8 <HAL_UART_Transmit>
	/*
    //Example:
    extern void Uart_PutChar(unsigned char value);
    Uart_PutChar(value);	                                //串口发送函数
	 */
}
 80035a8:	b003      	add	sp, #12
 80035aa:	bd00      	pop	{pc}
 80035ac:	200008a8 	.word	0x200008a8

080035b0 <all_data_update>:
 * @param  Null
 * @return Null
 * @note   此函数SDK内部需调用，MCU必须实现该函数内数据上报功能，包括只上报和可上报可下发型数据
 */
void all_data_update(void)
{
 80035b0:	b510      	push	{r4, lr}
	//#error "请在此处理可下发可上报数据及只上报数据示例,处理完成后删除该行"
	extern float Temperature,Humidity;
	extern unsigned char ADval[3];
	//此代码为平台自动生成，请按照实际数据修改每个可下发可上报函数和只上报函数
	mcu_dp_value_update(DPID_TEMP_CURRENT,Temperature*10); //VALUE型数据上报;
 80035b2:	4915      	ldr	r1, [pc, #84]	; (8003608 <all_data_update+0x58>)
 80035b4:	4b15      	ldr	r3, [pc, #84]	; (800360c <all_data_update+0x5c>)
 80035b6:	6818      	ldr	r0, [r3, #0]
 80035b8:	f7fd f878 	bl	80006ac <__aeabi_fmul>
 80035bc:	f7fc ff2e 	bl	800041c <__aeabi_f2uiz>
 80035c0:	0001      	movs	r1, r0
 80035c2:	2001      	movs	r0, #1
 80035c4:	f7ff fdd2 	bl	800316c <mcu_dp_value_update>
	mcu_dp_value_update(DPID_HUMIDITY_VALUE,Humidity); //VALUE型数据上报;
 80035c8:	4b11      	ldr	r3, [pc, #68]	; (8003610 <all_data_update+0x60>)
 80035ca:	6818      	ldr	r0, [r3, #0]
 80035cc:	f7fc ff26 	bl	800041c <__aeabi_f2uiz>
 80035d0:	0001      	movs	r1, r0
 80035d2:	2002      	movs	r0, #2
 80035d4:	f7ff fdca 	bl	800316c <mcu_dp_value_update>
	mcu_dp_value_update(DPID_BRIGHT_VALUE,100-ADval[0]*100/255.0); //VALUE型数据上报;
 80035d8:	4b0e      	ldr	r3, [pc, #56]	; (8003614 <all_data_update+0x64>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2064      	movs	r0, #100	; 0x64
 80035de:	4358      	muls	r0, r3
 80035e0:	f7fe fcac 	bl	8001f3c <__aeabi_i2d>
 80035e4:	2200      	movs	r2, #0
 80035e6:	4b0c      	ldr	r3, [pc, #48]	; (8003618 <all_data_update+0x68>)
 80035e8:	f7fd fbb6 	bl	8000d58 <__aeabi_ddiv>
 80035ec:	0002      	movs	r2, r0
 80035ee:	000b      	movs	r3, r1
 80035f0:	2000      	movs	r0, #0
 80035f2:	490a      	ldr	r1, [pc, #40]	; (800361c <all_data_update+0x6c>)
 80035f4:	f7fe f924 	bl	8001840 <__aeabi_dsub>
 80035f8:	f7fc ff28 	bl	800044c <__aeabi_d2uiz>
 80035fc:	0001      	movs	r1, r0
 80035fe:	2010      	movs	r0, #16
 8003600:	f7ff fdb4 	bl	800316c <mcu_dp_value_update>
    mcu_dp_value_update(DPID_TEMP_PERIODIC_REPORT,当前温度周期上报); //VALUE型数据上报;
    mcu_dp_value_update(DPID_HUM_PERIODIC_REPORT,当前湿度周期上报); //VALUE型数据上报;
    mcu_dp_bool_update(DPID_SWITCH,当前开关); //BOOL型数据上报;
	 */

}
 8003604:	bd10      	pop	{r4, pc}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	41200000 	.word	0x41200000
 800360c:	20000390 	.word	0x20000390
 8003610:	2000038c 	.word	0x2000038c
 8003614:	20000880 	.word	0x20000880
 8003618:	406fe000 	.word	0x406fe000
 800361c:	40590000 	.word	0x40590000

08003620 <dp_download_handle>:
 * -           0(ERROR): 失败
 * -           1(SUCCESS): 成功
 * @note   该函数用户不能修改
 */
unsigned char dp_download_handle(unsigned char dpid,const unsigned char value[], unsigned short length)
{
 8003620:	b510      	push	{r4, lr}
 8003622:	000b      	movs	r3, r1
    当前函数处理可下发/可上报数据调用                    
    具体函数内需要实现下发数据处理
    完成用需要将处理结果反馈至APP端,否则APP会认为下发失败
	 ***********************************/
	unsigned char ret;
	switch(dpid) {
 8003624:	2811      	cmp	r0, #17
 8003626:	d020      	beq.n	800366a <dp_download_handle+0x4a>
 8003628:	d910      	bls.n	800364c <dp_download_handle+0x2c>
 800362a:	2812      	cmp	r0, #18
 800362c:	d02a      	beq.n	8003684 <dp_download_handle+0x64>
 800362e:	2815      	cmp	r0, #21
 8003630:	d135      	bne.n	800369e <dp_download_handle+0x7e>
	switch_1 = mcu_get_dp_download_bool(value,length);
 8003632:	0011      	movs	r1, r2
 8003634:	0018      	movs	r0, r3
 8003636:	f7ff fdc3 	bl	80031c0 <mcu_get_dp_download_bool>
 800363a:	0001      	movs	r1, r0
	ret = mcu_dp_bool_update(DPID_SWITCH,switch_1);
 800363c:	2015      	movs	r0, #21
 800363e:	f7ff fd6f 	bl	8003120 <mcu_dp_bool_update>
	if(ret == SUCCESS)
 8003642:	3801      	subs	r0, #1
 8003644:	4243      	negs	r3, r0
 8003646:	4158      	adcs	r0, r3
		return ERROR;
 8003648:	b2c0      	uxtb	r0, r0
 800364a:	e00d      	b.n	8003668 <dp_download_handle+0x48>
	switch(dpid) {
 800364c:	2810      	cmp	r0, #16
 800364e:	d126      	bne.n	800369e <dp_download_handle+0x7e>
	bright_value = mcu_get_dp_download_value(value,length);
 8003650:	0011      	movs	r1, r2
 8003652:	0018      	movs	r0, r3
 8003654:	f7ff fdb6 	bl	80031c4 <mcu_get_dp_download_value>
 8003658:	0001      	movs	r1, r0
	ret = mcu_dp_value_update(DPID_BRIGHT_VALUE,bright_value);
 800365a:	2010      	movs	r0, #16
 800365c:	f7ff fd86 	bl	800316c <mcu_dp_value_update>
	if(ret == SUCCESS)
 8003660:	3801      	subs	r0, #1
 8003662:	4243      	negs	r3, r0
 8003664:	4158      	adcs	r0, r3
		return ERROR;
 8003666:	b2c0      	uxtb	r0, r0

	default: ret=0;
	break;
	}
	return ret;
}
 8003668:	bd10      	pop	{r4, pc}
	temp_periodic_report = mcu_get_dp_download_value(value,length);
 800366a:	0011      	movs	r1, r2
 800366c:	0018      	movs	r0, r3
 800366e:	f7ff fda9 	bl	80031c4 <mcu_get_dp_download_value>
 8003672:	0001      	movs	r1, r0
	ret = mcu_dp_value_update(DPID_TEMP_PERIODIC_REPORT,temp_periodic_report);
 8003674:	2011      	movs	r0, #17
 8003676:	f7ff fd79 	bl	800316c <mcu_dp_value_update>
	if(ret == SUCCESS)
 800367a:	3801      	subs	r0, #1
 800367c:	4243      	negs	r3, r0
 800367e:	4158      	adcs	r0, r3
		return ERROR;
 8003680:	b2c0      	uxtb	r0, r0
 8003682:	e7f1      	b.n	8003668 <dp_download_handle+0x48>
	hum_periodic_report = mcu_get_dp_download_value(value,length);
 8003684:	0011      	movs	r1, r2
 8003686:	0018      	movs	r0, r3
 8003688:	f7ff fd9c 	bl	80031c4 <mcu_get_dp_download_value>
 800368c:	0001      	movs	r1, r0
	ret = mcu_dp_value_update(DPID_HUM_PERIODIC_REPORT,hum_periodic_report);
 800368e:	2012      	movs	r0, #18
 8003690:	f7ff fd6c 	bl	800316c <mcu_dp_value_update>
	if(ret == SUCCESS)
 8003694:	3801      	subs	r0, #1
 8003696:	4243      	negs	r3, r0
 8003698:	4158      	adcs	r0, r3
		return ERROR;
 800369a:	b2c0      	uxtb	r0, r0
 800369c:	e7e4      	b.n	8003668 <dp_download_handle+0x48>
	default: ret=0;
 800369e:	2000      	movs	r0, #0
 80036a0:	e7e2      	b.n	8003668 <dp_download_handle+0x48>

080036a2 <get_download_cmd_total>:
 * @note   该函数用户不能修改
 */
unsigned char get_download_cmd_total(void)
{
	return(sizeof(download_cmd) / sizeof(download_cmd[0]));
}
 80036a2:	2008      	movs	r0, #8
 80036a4:	4770      	bx	lr
	...

080036a8 <mcu_write_rtctime>:
 * @param[in] {time} 获取到的格林时间数据
 * @return Null
 * @note   MCU需要自行实现该功能
 */
void mcu_write_rtctime(unsigned char time[])
{
 80036a8:	b530      	push	{r4, r5, lr}
 80036aa:	b087      	sub	sp, #28
 80036ac:	0004      	movs	r4, r0
	//#error "请自行完成RTC时钟写入代码,并删除该行"
	extern RTC_HandleTypeDef hrtc;
	extern UART_HandleTypeDef huart1;
	RTC_TimeTypeDef sTime = {0};
 80036ae:	2214      	movs	r2, #20
 80036b0:	2100      	movs	r1, #0
 80036b2:	a801      	add	r0, sp, #4
 80036b4:	f002 f951 	bl	800595a <memset>
	RTC_DateTypeDef sDate = {0};
 80036b8:	2300      	movs	r3, #0
 80036ba:	9300      	str	r3, [sp, #0]
    Time[5] 为分钟，从 0 开始到59 结束
    Time[6] 为秒钟，从 0 开始到59 结束
    Time[7] 为星期，从 1 开始到 7 结束，1代表星期一
	 */

	if(time[0] == 1) {
 80036bc:	7823      	ldrb	r3, [r4, #0]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d007      	beq.n	80036d2 <mcu_write_rtctime+0x2a>
		sDate.Year = time[1];
		HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);

	}else {
		//获取本地时钟数据出错,有可能是当前wifi模块未联网
		HAL_UART_Transmit(&huart1, (unsigned char*)"Time No!", 8, 0xff);
 80036c2:	23ff      	movs	r3, #255	; 0xff
 80036c4:	2208      	movs	r2, #8
 80036c6:	4915      	ldr	r1, [pc, #84]	; (800371c <mcu_write_rtctime+0x74>)
 80036c8:	4815      	ldr	r0, [pc, #84]	; (8003720 <mcu_write_rtctime+0x78>)
 80036ca:	f001 ff95 	bl	80055f8 <HAL_UART_Transmit>
	}
}
 80036ce:	b007      	add	sp, #28
 80036d0:	bd30      	pop	{r4, r5, pc}
		HAL_UART_Transmit(&huart1, (unsigned char*)"Time OK!", 8, 0xff);
 80036d2:	33fe      	adds	r3, #254	; 0xfe
 80036d4:	2208      	movs	r2, #8
 80036d6:	4913      	ldr	r1, [pc, #76]	; (8003724 <mcu_write_rtctime+0x7c>)
 80036d8:	4811      	ldr	r0, [pc, #68]	; (8003720 <mcu_write_rtctime+0x78>)
 80036da:	f001 ff8d 	bl	80055f8 <HAL_UART_Transmit>
		sTime.Hours = time[4];
 80036de:	a901      	add	r1, sp, #4
 80036e0:	7923      	ldrb	r3, [r4, #4]
 80036e2:	700b      	strb	r3, [r1, #0]
		sTime.Minutes = time[5];
 80036e4:	7963      	ldrb	r3, [r4, #5]
 80036e6:	704b      	strb	r3, [r1, #1]
		sTime.Seconds = time[6];
 80036e8:	79a3      	ldrb	r3, [r4, #6]
 80036ea:	708b      	strb	r3, [r1, #2]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80036ec:	2300      	movs	r3, #0
 80036ee:	60cb      	str	r3, [r1, #12]
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80036f0:	610b      	str	r3, [r1, #16]
		HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80036f2:	4d0d      	ldr	r5, [pc, #52]	; (8003728 <mcu_write_rtctime+0x80>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	0028      	movs	r0, r5
 80036f8:	f001 fb6a 	bl	8004dd0 <HAL_RTC_SetTime>
		sDate.WeekDay = time[7];
 80036fc:	79e3      	ldrb	r3, [r4, #7]
 80036fe:	466a      	mov	r2, sp
 8003700:	7013      	strb	r3, [r2, #0]
		sDate.Month = time[2];
 8003702:	78a3      	ldrb	r3, [r4, #2]
 8003704:	7053      	strb	r3, [r2, #1]
		sDate.Date = time[3];
 8003706:	78e3      	ldrb	r3, [r4, #3]
 8003708:	7093      	strb	r3, [r2, #2]
		sDate.Year = time[1];
 800370a:	7863      	ldrb	r3, [r4, #1]
 800370c:	70d3      	strb	r3, [r2, #3]
		HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800370e:	2200      	movs	r2, #0
 8003710:	4669      	mov	r1, sp
 8003712:	0028      	movs	r0, r5
 8003714:	f001 fbd2 	bl	8004ebc <HAL_RTC_SetDate>
 8003718:	e7d9      	b.n	80036ce <mcu_write_rtctime+0x26>
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	08006118 	.word	0x08006118
 8003720:	200008a8 	.word	0x200008a8
 8003724:	0800610c 	.word	0x0800610c
 8003728:	20000888 	.word	0x20000888

0800372c <wifi_test_result>:
		}
	}else {
		//测试成功
		//rssi为信号强度(0-100, 0信号最差，100信号最强)
	}
}
 800372c:	4770      	bx	lr
	...

08003730 <set_wifi_uart_byte>:
 */
unsigned short set_wifi_uart_byte(unsigned short dest, unsigned char byte)
{
    unsigned char *obj = (unsigned char *)wifi_uart_tx_buf + DATA_START + dest;
    
    *obj = byte;
 8003730:	4b02      	ldr	r3, [pc, #8]	; (800373c <set_wifi_uart_byte+0xc>)
 8003732:	5419      	strb	r1, [r3, r0]
    dest += 1;
 8003734:	3001      	adds	r0, #1
    
    return dest;
 8003736:	b280      	uxth	r0, r0
}
 8003738:	4770      	bx	lr
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	20000972 	.word	0x20000972

08003740 <set_wifi_uart_buffer>:
 * @param[in] {src} 源地址
 * @param[in] {len} 数据长度
 * @return 写入结束的缓存地址
 */
unsigned short set_wifi_uart_buffer(unsigned short dest, const unsigned char *src, unsigned short len)
{
 8003740:	b570      	push	{r4, r5, r6, lr}
 8003742:	0004      	movs	r4, r0
 8003744:	0015      	movs	r5, r2
    unsigned char *obj = (unsigned char *)wifi_uart_tx_buf + DATA_START + dest;
 8003746:	3006      	adds	r0, #6
 8003748:	4b03      	ldr	r3, [pc, #12]	; (8003758 <set_wifi_uart_buffer+0x18>)
 800374a:	18c0      	adds	r0, r0, r3
    
    my_memcpy(obj,src,len);
 800374c:	f7ff fcba 	bl	80030c4 <my_memcpy>
    
    dest += len;
 8003750:	1964      	adds	r4, r4, r5
    return dest;
 8003752:	b2a0      	uxth	r0, r4
}
 8003754:	bd70      	pop	{r4, r5, r6, pc}
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	2000096c 	.word	0x2000096c

0800375c <get_check_sum>:
unsigned char get_check_sum(unsigned char *pack, unsigned short pack_len)
{
    unsigned short i;
    unsigned char check_sum = 0;
    
    for(i = 0; i < pack_len; i ++) {
 800375c:	2900      	cmp	r1, #0
 800375e:	d00c      	beq.n	800377a <get_check_sum+0x1e>
 8003760:	0003      	movs	r3, r0
 8003762:	3901      	subs	r1, #1
 8003764:	b289      	uxth	r1, r1
 8003766:	1841      	adds	r1, r0, r1
 8003768:	3101      	adds	r1, #1
    unsigned char check_sum = 0;
 800376a:	2000      	movs	r0, #0
        check_sum += *pack ++;
 800376c:	781a      	ldrb	r2, [r3, #0]
 800376e:	1880      	adds	r0, r0, r2
 8003770:	b2c0      	uxtb	r0, r0
 8003772:	3301      	adds	r3, #1
    for(i = 0; i < pack_len; i ++) {
 8003774:	428b      	cmp	r3, r1
 8003776:	d1f9      	bne.n	800376c <get_check_sum+0x10>
    }
    
    return check_sum;
}
 8003778:	4770      	bx	lr
    unsigned char check_sum = 0;
 800377a:	2000      	movs	r0, #0
 800377c:	e7fc      	b.n	8003778 <get_check_sum+0x1c>
	...

08003780 <wifi_uart_write_frame>:
 * @param[in] {fr_ver} 帧版本
 * @param[in] {len} 数据长度
 * @return Null
 */
void wifi_uart_write_frame(unsigned char fr_type, unsigned char fr_ver, unsigned short len)
{
 8003780:	b570      	push	{r4, r5, r6, lr}
    unsigned char check_sum = 0;
    
    wifi_uart_tx_buf[HEAD_FIRST] = 0x55;
 8003782:	4c10      	ldr	r4, [pc, #64]	; (80037c4 <wifi_uart_write_frame+0x44>)
 8003784:	2355      	movs	r3, #85	; 0x55
 8003786:	7023      	strb	r3, [r4, #0]
    wifi_uart_tx_buf[HEAD_SECOND] = 0xaa;
 8003788:	3355      	adds	r3, #85	; 0x55
 800378a:	7063      	strb	r3, [r4, #1]
    wifi_uart_tx_buf[PROTOCOL_VERSION] = fr_ver;
 800378c:	70a1      	strb	r1, [r4, #2]
    wifi_uart_tx_buf[FRAME_TYPE] = fr_type;
 800378e:	70e0      	strb	r0, [r4, #3]
    wifi_uart_tx_buf[LENGTH_HIGH] = len >> 8;
 8003790:	0a13      	lsrs	r3, r2, #8
 8003792:	7123      	strb	r3, [r4, #4]
    wifi_uart_tx_buf[LENGTH_LOW] = len & 0xff;
 8003794:	b2d3      	uxtb	r3, r2
 8003796:	7163      	strb	r3, [r4, #5]
    
    len += PROTOCOL_HEAD;
 8003798:	1dd6      	adds	r6, r2, #7
 800379a:	b2b6      	uxth	r6, r6
    check_sum = get_check_sum((unsigned char *)wifi_uart_tx_buf, len - 1);
 800379c:	3206      	adds	r2, #6
 800379e:	b295      	uxth	r5, r2
 80037a0:	0029      	movs	r1, r5
 80037a2:	0020      	movs	r0, r4
 80037a4:	f7ff ffda 	bl	800375c <get_check_sum>
    wifi_uart_tx_buf[len - 1] = check_sum;
 80037a8:	1e73      	subs	r3, r6, #1
 80037aa:	54e0      	strb	r0, [r4, r3]
    if((NULL == in) || (0 == len)) {
 80037ac:	2e00      	cmp	r6, #0
 80037ae:	d007      	beq.n	80037c0 <wifi_uart_write_frame+0x40>
 80037b0:	3501      	adds	r5, #1
 80037b2:	192d      	adds	r5, r5, r4
        uart_transmit_output(*in);
 80037b4:	7820      	ldrb	r0, [r4, #0]
 80037b6:	f7ff feed 	bl	8003594 <uart_transmit_output>
        in ++;
 80037ba:	3401      	adds	r4, #1
    while(len --) {
 80037bc:	42ac      	cmp	r4, r5
 80037be:	d1f9      	bne.n	80037b4 <wifi_uart_write_frame+0x34>
    
    wifi_uart_write_data((unsigned char *)wifi_uart_tx_buf, len);
}
 80037c0:	bd70      	pop	{r4, r5, r6, pc}
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	2000096c 	.word	0x2000096c

080037c8 <data_handle>:
 * @brief  数据帧处理
 * @param[in] {offset} 数据起始位
 * @return Null
 */
void data_handle(unsigned short offset)
{
 80037c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ca:	46de      	mov	lr, fp
 80037cc:	4657      	mov	r7, sl
 80037ce:	464e      	mov	r6, r9
 80037d0:	4645      	mov	r5, r8
 80037d2:	b5e0      	push	{r5, r6, r7, lr}
 80037d4:	b085      	sub	sp, #20
 80037d6:	0006      	movs	r6, r0
    unsigned short dp_len;
#endif
  
    unsigned char ret;
    unsigned short i,total_len;
    unsigned char cmd_type = wifi_data_process_buf[offset + FRAME_TYPE];
 80037d8:	9000      	str	r0, [sp, #0]
 80037da:	1cc3      	adds	r3, r0, #3
 80037dc:	4a7b      	ldr	r2, [pc, #492]	; (80039cc <data_handle+0x204>)
 80037de:	5cd3      	ldrb	r3, [r2, r3]
 80037e0:	b2db      	uxtb	r3, r3
    static unsigned short file_package_size = 0;                                //文件数据包一包的大小
    static unsigned char file_download_flag = 0;                                //文件下载标志
    unsigned int file_download_size = 0;
#endif

    switch(cmd_type)
 80037e2:	2b1c      	cmp	r3, #28
 80037e4:	d80f      	bhi.n	8003806 <data_handle+0x3e>
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4a79      	ldr	r2, [pc, #484]	; (80039d0 <data_handle+0x208>)
 80037ea:	58d3      	ldr	r3, [r2, r3]
 80037ec:	469f      	mov	pc, r3
    if(FALSE == mcu_reset_state) {
 80037ee:	4b79      	ldr	r3, [pc, #484]	; (80039d4 <data_handle+0x20c>)
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00e      	beq.n	8003814 <data_handle+0x4c>
    *obj = byte;
 80037f6:	4b78      	ldr	r3, [pc, #480]	; (80039d8 <data_handle+0x210>)
 80037f8:	2201      	movs	r2, #1
 80037fa:	719a      	strb	r2, [r3, #6]
    wifi_uart_write_frame(HEAT_BEAT_CMD, MCU_TX_VER, length);
 80037fc:	2201      	movs	r2, #1
 80037fe:	2103      	movs	r1, #3
 8003800:	2000      	movs	r0, #0
 8003802:	f7ff ffbd 	bl	8003780 <wifi_uart_write_frame>
#endif
        

        default:break;
    }
}
 8003806:	b005      	add	sp, #20
 8003808:	bc3c      	pop	{r2, r3, r4, r5}
 800380a:	4690      	mov	r8, r2
 800380c:	4699      	mov	r9, r3
 800380e:	46a2      	mov	sl, r4
 8003810:	46ab      	mov	fp, r5
 8003812:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *obj = byte;
 8003814:	4b70      	ldr	r3, [pc, #448]	; (80039d8 <data_handle+0x210>)
 8003816:	2200      	movs	r2, #0
 8003818:	719a      	strb	r2, [r3, #6]
        mcu_reset_state = TRUE;
 800381a:	4b6e      	ldr	r3, [pc, #440]	; (80039d4 <data_handle+0x20c>)
 800381c:	3201      	adds	r2, #1
 800381e:	701a      	strb	r2, [r3, #0]
 8003820:	e7ec      	b.n	80037fc <data_handle+0x34>
    length = set_wifi_uart_buffer(length, (unsigned char*)"{\"p\":\"", my_strlen((unsigned char*)"{\"p\":\""));
 8003822:	4c6e      	ldr	r4, [pc, #440]	; (80039dc <data_handle+0x214>)
 8003824:	0020      	movs	r0, r4
 8003826:	f7ff fc3d 	bl	80030a4 <my_strlen>
 800382a:	b282      	uxth	r2, r0
 800382c:	0021      	movs	r1, r4
 800382e:	2000      	movs	r0, #0
 8003830:	f7ff ff86 	bl	8003740 <set_wifi_uart_buffer>
 8003834:	0005      	movs	r5, r0
    length = set_wifi_uart_buffer(length,(unsigned char *)PRODUCT_KEY,my_strlen((unsigned char *)PRODUCT_KEY));
 8003836:	4e6a      	ldr	r6, [pc, #424]	; (80039e0 <data_handle+0x218>)
 8003838:	0030      	movs	r0, r6
 800383a:	f7ff fc33 	bl	80030a4 <my_strlen>
 800383e:	b282      	uxth	r2, r0
 8003840:	24ff      	movs	r4, #255	; 0xff
 8003842:	0028      	movs	r0, r5
 8003844:	4020      	ands	r0, r4
 8003846:	0031      	movs	r1, r6
 8003848:	f7ff ff7a 	bl	8003740 <set_wifi_uart_buffer>
 800384c:	0005      	movs	r5, r0
    length = set_wifi_uart_buffer(length, (unsigned char*)"\",\"v\":\"", my_strlen((unsigned char*)"\",\"v\":\""));
 800384e:	4e65      	ldr	r6, [pc, #404]	; (80039e4 <data_handle+0x21c>)
 8003850:	0030      	movs	r0, r6
 8003852:	f7ff fc27 	bl	80030a4 <my_strlen>
 8003856:	b282      	uxth	r2, r0
 8003858:	0028      	movs	r0, r5
 800385a:	4020      	ands	r0, r4
 800385c:	0031      	movs	r1, r6
 800385e:	f7ff ff6f 	bl	8003740 <set_wifi_uart_buffer>
 8003862:	0005      	movs	r5, r0
    length = set_wifi_uart_buffer(length,(unsigned char *)MCU_VER,my_strlen((unsigned char *)MCU_VER));
 8003864:	4e60      	ldr	r6, [pc, #384]	; (80039e8 <data_handle+0x220>)
 8003866:	0030      	movs	r0, r6
 8003868:	f7ff fc1c 	bl	80030a4 <my_strlen>
 800386c:	b282      	uxth	r2, r0
 800386e:	0028      	movs	r0, r5
 8003870:	4020      	ands	r0, r4
 8003872:	0031      	movs	r1, r6
 8003874:	f7ff ff64 	bl	8003740 <set_wifi_uart_buffer>
 8003878:	0005      	movs	r5, r0
    length = set_wifi_uart_buffer(length, (unsigned char*)"\",\"m\":", my_strlen((unsigned char*)"\",\"m\":"));
 800387a:	4e5c      	ldr	r6, [pc, #368]	; (80039ec <data_handle+0x224>)
 800387c:	0030      	movs	r0, r6
 800387e:	f7ff fc11 	bl	80030a4 <my_strlen>
 8003882:	b282      	uxth	r2, r0
 8003884:	0028      	movs	r0, r5
 8003886:	4020      	ands	r0, r4
 8003888:	0031      	movs	r1, r6
 800388a:	f7ff ff59 	bl	8003740 <set_wifi_uart_buffer>
 800388e:	0005      	movs	r5, r0
    length = set_wifi_uart_buffer(length, (unsigned char *)CONFIG_MODE, my_strlen((unsigned char *)CONFIG_MODE));
 8003890:	4e57      	ldr	r6, [pc, #348]	; (80039f0 <data_handle+0x228>)
 8003892:	0030      	movs	r0, r6
 8003894:	f7ff fc06 	bl	80030a4 <my_strlen>
 8003898:	b282      	uxth	r2, r0
 800389a:	0028      	movs	r0, r5
 800389c:	4020      	ands	r0, r4
 800389e:	0031      	movs	r1, r6
 80038a0:	f7ff ff4e 	bl	8003740 <set_wifi_uart_buffer>
 80038a4:	0005      	movs	r5, r0
    length = set_wifi_uart_buffer(length, (unsigned char*)"}", my_strlen((unsigned char*)"}"));
 80038a6:	4e53      	ldr	r6, [pc, #332]	; (80039f4 <data_handle+0x22c>)
 80038a8:	0030      	movs	r0, r6
 80038aa:	f7ff fbfb 	bl	80030a4 <my_strlen>
 80038ae:	b282      	uxth	r2, r0
 80038b0:	0028      	movs	r0, r5
 80038b2:	4020      	ands	r0, r4
 80038b4:	0031      	movs	r1, r6
 80038b6:	f7ff ff43 	bl	8003740 <set_wifi_uart_buffer>
    wifi_uart_write_frame(PRODUCT_INFO_CMD, MCU_TX_VER, length);
 80038ba:	0022      	movs	r2, r4
 80038bc:	4002      	ands	r2, r0
 80038be:	2103      	movs	r1, #3
 80038c0:	2001      	movs	r0, #1
 80038c2:	f7ff ff5d 	bl	8003780 <wifi_uart_write_frame>
 80038c6:	e79e      	b.n	8003806 <data_handle+0x3e>
    wifi_uart_write_frame(WORK_MODE_CMD, MCU_TX_VER, length);
 80038c8:	2200      	movs	r2, #0
 80038ca:	2103      	movs	r1, #3
 80038cc:	2002      	movs	r0, #2
 80038ce:	f7ff ff57 	bl	8003780 <wifi_uart_write_frame>
 80038d2:	e798      	b.n	8003806 <data_handle+0x3e>
            wifi_work_state = wifi_data_process_buf[offset + DATA_START];
 80038d4:	3606      	adds	r6, #6
 80038d6:	4b3d      	ldr	r3, [pc, #244]	; (80039cc <data_handle+0x204>)
 80038d8:	5d9b      	ldrb	r3, [r3, r6]
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	4a46      	ldr	r2, [pc, #280]	; (80039f8 <data_handle+0x230>)
 80038de:	7013      	strb	r3, [r2, #0]
            wifi_uart_write_frame(WIFI_STATE_CMD, MCU_TX_VER, 0);
 80038e0:	2200      	movs	r2, #0
 80038e2:	2103      	movs	r1, #3
 80038e4:	2003      	movs	r0, #3
 80038e6:	f7ff ff4b 	bl	8003780 <wifi_uart_write_frame>
        break;
 80038ea:	e78c      	b.n	8003806 <data_handle+0x3e>
            reset_wifi_flag = RESET_WIFI_SUCCESS;
 80038ec:	4b43      	ldr	r3, [pc, #268]	; (80039fc <data_handle+0x234>)
 80038ee:	2201      	movs	r2, #1
 80038f0:	701a      	strb	r2, [r3, #0]
        break;
 80038f2:	e788      	b.n	8003806 <data_handle+0x3e>
            set_wifimode_flag = SET_WIFICONFIG_SUCCESS;
 80038f4:	4b42      	ldr	r3, [pc, #264]	; (8003a00 <data_handle+0x238>)
 80038f6:	2201      	movs	r2, #1
 80038f8:	701a      	strb	r2, [r3, #0]
        break;
 80038fa:	e784      	b.n	8003806 <data_handle+0x3e>
            total_len = (wifi_data_process_buf[offset + LENGTH_HIGH] << 8) | wifi_data_process_buf[offset + LENGTH_LOW];
 80038fc:	1d03      	adds	r3, r0, #4
 80038fe:	4a33      	ldr	r2, [pc, #204]	; (80039cc <data_handle+0x204>)
 8003900:	5cd3      	ldrb	r3, [r2, r3]
 8003902:	1d41      	adds	r1, r0, #5
 8003904:	5c52      	ldrb	r2, [r2, r1]
 8003906:	021b      	lsls	r3, r3, #8
 8003908:	431a      	orrs	r2, r3
 800390a:	9203      	str	r2, [sp, #12]
            for(i = 0;i < total_len; ) {
 800390c:	d100      	bne.n	8003910 <data_handle+0x148>
 800390e:	e77a      	b.n	8003806 <data_handle+0x3e>
 8003910:	2400      	movs	r4, #0
                dp_len = wifi_data_process_buf[offset + DATA_START + i + 2] * 0x100;
 8003912:	4b2e      	ldr	r3, [pc, #184]	; (80039cc <data_handle+0x204>)
 8003914:	4699      	mov	r9, r3
    if(dp_type != download_cmd[index].dp_type) {
 8003916:	4683      	mov	fp, r0
 8003918:	0026      	movs	r6, r4
 800391a:	e00e      	b.n	800393a <data_handle+0x172>
    for(index = 0; index < total; index ++) {
 800391c:	2000      	movs	r0, #0
    if(dp_type != download_cmd[index].dp_type) {
 800391e:	0040      	lsls	r0, r0, #1
 8003920:	4b38      	ldr	r3, [pc, #224]	; (8003a04 <data_handle+0x23c>)
 8003922:	469c      	mov	ip, r3
 8003924:	4460      	add	r0, ip
 8003926:	7843      	ldrb	r3, [r0, #1]
 8003928:	4553      	cmp	r3, sl
 800392a:	d030      	beq.n	800398e <data_handle+0x1c6>
 800392c:	19be      	adds	r6, r7, r6
                i += (dp_len + 4);
 800392e:	4446      	add	r6, r8
 8003930:	b2b6      	uxth	r6, r6
            for(i = 0;i < total_len; ) {
 8003932:	9b03      	ldr	r3, [sp, #12]
 8003934:	42b3      	cmp	r3, r6
 8003936:	d800      	bhi.n	800393a <data_handle+0x172>
 8003938:	e765      	b.n	8003806 <data_handle+0x3e>
                dp_len = wifi_data_process_buf[offset + DATA_START + i + 2] * 0x100;
 800393a:	9b00      	ldr	r3, [sp, #0]
 800393c:	3306      	adds	r3, #6
 800393e:	199b      	adds	r3, r3, r6
 8003940:	1c9a      	adds	r2, r3, #2
 8003942:	4649      	mov	r1, r9
 8003944:	5c8f      	ldrb	r7, [r1, r2]
 8003946:	023a      	lsls	r2, r7, #8
 8003948:	4690      	mov	r8, r2
                dp_len += wifi_data_process_buf[offset + DATA_START + i + 3];
 800394a:	3303      	adds	r3, #3
 800394c:	5ccf      	ldrb	r7, [r1, r3]
 800394e:	3704      	adds	r7, #4
                ret = data_point_handle((unsigned char *)wifi_data_process_buf + offset + DATA_START + i);
 8003950:	465b      	mov	r3, fp
 8003952:	1d9d      	adds	r5, r3, #6
 8003954:	19ad      	adds	r5, r5, r6
 8003956:	444d      	add	r5, r9
    dp_id = value[0];
 8003958:	782c      	ldrb	r4, [r5, #0]
    dp_type = value[1];
 800395a:	786b      	ldrb	r3, [r5, #1]
 800395c:	469a      	mov	sl, r3
    dp_len = value[2] * 0x100;
 800395e:	78ab      	ldrb	r3, [r5, #2]
 8003960:	9301      	str	r3, [sp, #4]
    dp_len += value[3];
 8003962:	78eb      	ldrb	r3, [r5, #3]
 8003964:	9302      	str	r3, [sp, #8]
    unsigned char total = get_download_cmd_total();
 8003966:	f7ff fe9c 	bl	80036a2 <get_download_cmd_total>
 800396a:	1e02      	subs	r2, r0, #0
    for(index = 0; index < total; index ++) {
 800396c:	d0d7      	beq.n	800391e <data_handle+0x156>
        if(download_cmd[index].dp_id == dpid) {
 800396e:	4b25      	ldr	r3, [pc, #148]	; (8003a04 <data_handle+0x23c>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	42a3      	cmp	r3, r4
 8003974:	d0d2      	beq.n	800391c <data_handle+0x154>
 8003976:	4b24      	ldr	r3, [pc, #144]	; (8003a08 <data_handle+0x240>)
    for(index = 0; index < total; index ++) {
 8003978:	2000      	movs	r0, #0
 800397a:	3001      	adds	r0, #1
 800397c:	b2c0      	uxtb	r0, r0
 800397e:	4282      	cmp	r2, r0
 8003980:	d0cd      	beq.n	800391e <data_handle+0x156>
 8003982:	3302      	adds	r3, #2
        if(download_cmd[index].dp_id == dpid) {
 8003984:	1e99      	subs	r1, r3, #2
 8003986:	7809      	ldrb	r1, [r1, #0]
 8003988:	42a1      	cmp	r1, r4
 800398a:	d1f6      	bne.n	800397a <data_handle+0x1b2>
 800398c:	e7c7      	b.n	800391e <data_handle+0x156>
    dp_len = value[2] * 0x100;
 800398e:	9b01      	ldr	r3, [sp, #4]
 8003990:	021a      	lsls	r2, r3, #8
    dp_len += value[3];
 8003992:	9b02      	ldr	r3, [sp, #8]
 8003994:	469c      	mov	ip, r3
 8003996:	4462      	add	r2, ip
        ret = dp_download_handle(dp_id,value + 4,dp_len);
 8003998:	b292      	uxth	r2, r2
 800399a:	1d29      	adds	r1, r5, #4
 800399c:	0020      	movs	r0, r4
 800399e:	f7ff fe3f 	bl	8003620 <dp_download_handle>
 80039a2:	e7c3      	b.n	800392c <data_handle+0x164>
            all_data_update();                               
 80039a4:	f7ff fe04 	bl	80035b0 <all_data_update>
        break;
 80039a8:	e72d      	b.n	8003806 <data_handle+0x3e>
            mcu_write_rtctime((unsigned char *)(wifi_data_process_buf + offset + DATA_START));
 80039aa:	3006      	adds	r0, #6
 80039ac:	4b07      	ldr	r3, [pc, #28]	; (80039cc <data_handle+0x204>)
 80039ae:	18c0      	adds	r0, r0, r3
 80039b0:	f7ff fe7a 	bl	80036a8 <mcu_write_rtctime>
        break;
 80039b4:	e727      	b.n	8003806 <data_handle+0x3e>
            result = wifi_data_process_buf[offset + DATA_START];
 80039b6:	1d83      	adds	r3, r0, #6
 80039b8:	4a04      	ldr	r2, [pc, #16]	; (80039cc <data_handle+0x204>)
 80039ba:	5cd0      	ldrb	r0, [r2, r3]
 80039bc:	b2c0      	uxtb	r0, r0
            rssi = wifi_data_process_buf[offset + DATA_START + 1];
 80039be:	1df3      	adds	r3, r6, #7
 80039c0:	5cd1      	ldrb	r1, [r2, r3]
 80039c2:	b2c9      	uxtb	r1, r1
            wifi_test_result(result, rssi);
 80039c4:	f7ff feb2 	bl	800372c <wifi_test_result>
}
 80039c8:	e71d      	b.n	8003806 <data_handle+0x3e>
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	2000092c 	.word	0x2000092c
 80039d0:	08006124 	.word	0x08006124
 80039d4:	20000798 	.word	0x20000798
 80039d8:	2000096c 	.word	0x2000096c
 80039dc:	08006198 	.word	0x08006198
 80039e0:	080061a0 	.word	0x080061a0
 80039e4:	080061b4 	.word	0x080061b4
 80039e8:	080061bc 	.word	0x080061bc
 80039ec:	080061c4 	.word	0x080061c4
 80039f0:	080061cc 	.word	0x080061cc
 80039f4:	080061d0 	.word	0x080061d0
 80039f8:	200009a3 	.word	0x200009a3
 80039fc:	200009a4 	.word	0x200009a4
 8003a00:	2000094b 	.word	0x2000094b
 8003a04:	080060fc 	.word	0x080060fc
 8003a08:	080060fe 	.word	0x080060fe

08003a0c <with_data_rxbuff>:
 * @param  Null
 * @return 是否有数据
 */
unsigned char with_data_rxbuff(void)
{
    if(rx_buf_in != rx_buf_out)
 8003a0c:	4b04      	ldr	r3, [pc, #16]	; (8003a20 <with_data_rxbuff+0x14>)
 8003a0e:	6818      	ldr	r0, [r3, #0]
 8003a10:	4b04      	ldr	r3, [pc, #16]	; (8003a24 <with_data_rxbuff+0x18>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	1ac0      	subs	r0, r0, r3
 8003a16:	1e43      	subs	r3, r0, #1
 8003a18:	4198      	sbcs	r0, r3
 8003a1a:	b2c0      	uxtb	r0, r0
        return 1;
    else
        return 0;
}
 8003a1c:	4770      	bx	lr
 8003a1e:	46c0      	nop			; (mov r8, r8)
 8003a20:	2000094c 	.word	0x2000094c
 8003a24:	20000968 	.word	0x20000968

08003a28 <take_byte_rxbuff>:
 */
unsigned char take_byte_rxbuff(void)
{
    unsigned char value;
    
    if(rx_buf_out != rx_buf_in) {
 8003a28:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <take_byte_rxbuff+0x2c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a0a      	ldr	r2, [pc, #40]	; (8003a58 <take_byte_rxbuff+0x30>)
 8003a2e:	6812      	ldr	r2, [r2, #0]
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00c      	beq.n	8003a4e <take_byte_rxbuff+0x26>
        //有数据
        if(rx_buf_out >= (unsigned char *)(wifi_uart_rx_buf + sizeof(wifi_uart_rx_buf))) {
 8003a34:	4a09      	ldr	r2, [pc, #36]	; (8003a5c <take_byte_rxbuff+0x34>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d302      	bcc.n	8003a40 <take_byte_rxbuff+0x18>
            //数据已经到末尾
            rx_buf_out = (unsigned char *)(wifi_uart_rx_buf);
 8003a3a:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <take_byte_rxbuff+0x2c>)
 8003a3c:	4a08      	ldr	r2, [pc, #32]	; (8003a60 <take_byte_rxbuff+0x38>)
 8003a3e:	601a      	str	r2, [r3, #0]
        }
        
        value = *rx_buf_out ++;   
 8003a40:	4a04      	ldr	r2, [pc, #16]	; (8003a54 <take_byte_rxbuff+0x2c>)
 8003a42:	6813      	ldr	r3, [r2, #0]
 8003a44:	1c59      	adds	r1, r3, #1
 8003a46:	6011      	str	r1, [r2, #0]
 8003a48:	7818      	ldrb	r0, [r3, #0]
 8003a4a:	b2c0      	uxtb	r0, r0
    {
    	value = 0;
    }
    
    return value;
}
 8003a4c:	4770      	bx	lr
    	value = 0;
 8003a4e:	2000      	movs	r0, #0
 8003a50:	e7fc      	b.n	8003a4c <take_byte_rxbuff+0x24>
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	20000968 	.word	0x20000968
 8003a58:	2000094c 	.word	0x2000094c
 8003a5c:	20000967 	.word	0x20000967
 8003a60:	20000950 	.word	0x20000950

08003a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a64:	b570      	push	{r4, r5, r6, lr}
 8003a66:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a68:	20fa      	movs	r0, #250	; 0xfa
 8003a6a:	4b0d      	ldr	r3, [pc, #52]	; (8003aa0 <HAL_InitTick+0x3c>)
 8003a6c:	0080      	lsls	r0, r0, #2
 8003a6e:	7819      	ldrb	r1, [r3, #0]
 8003a70:	f7fc fb5e 	bl	8000130 <__udivsi3>
 8003a74:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <HAL_InitTick+0x40>)
 8003a76:	0001      	movs	r1, r0
 8003a78:	6818      	ldr	r0, [r3, #0]
 8003a7a:	f7fc fb59 	bl	8000130 <__udivsi3>
 8003a7e:	f000 faf9 	bl	8004074 <HAL_SYSTICK_Config>
 8003a82:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8003a84:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a86:	2c00      	cmp	r4, #0
 8003a88:	d109      	bne.n	8003a9e <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a8a:	2d03      	cmp	r5, #3
 8003a8c:	d807      	bhi.n	8003a9e <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a8e:	3802      	subs	r0, #2
 8003a90:	0022      	movs	r2, r4
 8003a92:	0029      	movs	r1, r5
 8003a94:	f000 fab8 	bl	8004008 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a98:	0020      	movs	r0, r4
 8003a9a:	4b03      	ldr	r3, [pc, #12]	; (8003aa8 <HAL_InitTick+0x44>)
 8003a9c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8003a9e:	bd70      	pop	{r4, r5, r6, pc}
 8003aa0:	20000368 	.word	0x20000368
 8003aa4:	20000004 	.word	0x20000004
 8003aa8:	2000036c 	.word	0x2000036c

08003aac <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003aac:	2310      	movs	r3, #16
 8003aae:	4a06      	ldr	r2, [pc, #24]	; (8003ac8 <HAL_Init+0x1c>)
{
 8003ab0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ab2:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ab4:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ab6:	430b      	orrs	r3, r1
 8003ab8:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8003aba:	f7ff ffd3 	bl	8003a64 <HAL_InitTick>
  HAL_MspInit();
 8003abe:	f7ff f949 	bl	8002d54 <HAL_MspInit>
}
 8003ac2:	2000      	movs	r0, #0
 8003ac4:	bd10      	pop	{r4, pc}
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	40022000 	.word	0x40022000

08003acc <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003acc:	4a03      	ldr	r2, [pc, #12]	; (8003adc <HAL_IncTick+0x10>)
 8003ace:	4b04      	ldr	r3, [pc, #16]	; (8003ae0 <HAL_IncTick+0x14>)
 8003ad0:	6811      	ldr	r1, [r2, #0]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	185b      	adds	r3, r3, r1
 8003ad6:	6013      	str	r3, [r2, #0]
}
 8003ad8:	4770      	bx	lr
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	200009a8 	.word	0x200009a8
 8003ae0:	20000368 	.word	0x20000368

08003ae4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003ae4:	4b01      	ldr	r3, [pc, #4]	; (8003aec <HAL_GetTick+0x8>)
 8003ae6:	6818      	ldr	r0, [r3, #0]
}
 8003ae8:	4770      	bx	lr
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	200009a8 	.word	0x200009a8

08003af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003af0:	b570      	push	{r4, r5, r6, lr}
 8003af2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003af4:	f7ff fff6 	bl	8003ae4 <HAL_GetTick>
 8003af8:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003afa:	1c63      	adds	r3, r4, #1
 8003afc:	d002      	beq.n	8003b04 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003afe:	4b04      	ldr	r3, [pc, #16]	; (8003b10 <HAL_Delay+0x20>)
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003b04:	f7ff ffee 	bl	8003ae4 <HAL_GetTick>
 8003b08:	1b40      	subs	r0, r0, r5
 8003b0a:	42a0      	cmp	r0, r4
 8003b0c:	d3fa      	bcc.n	8003b04 <HAL_Delay+0x14>
  {
  }
}
 8003b0e:	bd70      	pop	{r4, r5, r6, pc}
 8003b10:	20000368 	.word	0x20000368

08003b14 <ADC_Enable>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8003b14:	2300      	movs	r3, #0
{
 8003b16:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b18:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 8003b1a:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b1c:	6803      	ldr	r3, [r0, #0]
{
 8003b1e:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	400a      	ands	r2, r1
 8003b24:	2a01      	cmp	r2, #1
 8003b26:	d107      	bne.n	8003b38 <ADC_Enable+0x24>
 8003b28:	6819      	ldr	r1, [r3, #0]
 8003b2a:	4211      	tst	r1, r2
 8003b2c:	d001      	beq.n	8003b32 <ADC_Enable+0x1e>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003b2e:	2000      	movs	r0, #0
}
 8003b30:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b32:	68da      	ldr	r2, [r3, #12]
 8003b34:	0412      	lsls	r2, r2, #16
 8003b36:	d4fa      	bmi.n	8003b2e <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003b38:	6899      	ldr	r1, [r3, #8]
 8003b3a:	4a19      	ldr	r2, [pc, #100]	; (8003ba0 <ADC_Enable+0x8c>)
 8003b3c:	4211      	tst	r1, r2
 8003b3e:	d008      	beq.n	8003b52 <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b40:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b42:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b44:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003b46:	4313      	orrs	r3, r2
 8003b48:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003b4c:	4303      	orrs	r3, r0
 8003b4e:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8003b50:	e7ee      	b.n	8003b30 <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 8003b52:	2201      	movs	r2, #1
 8003b54:	6899      	ldr	r1, [r3, #8]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b5a:	4b12      	ldr	r3, [pc, #72]	; (8003ba4 <ADC_Enable+0x90>)
 8003b5c:	4912      	ldr	r1, [pc, #72]	; (8003ba8 <ADC_Enable+0x94>)
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	f7fc fae6 	bl	8000130 <__udivsi3>
 8003b64:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8003b66:	9b01      	ldr	r3, [sp, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d115      	bne.n	8003b98 <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 8003b6c:	f7ff ffba 	bl	8003ae4 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003b70:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 8003b72:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003b74:	6823      	ldr	r3, [r4, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	422b      	tst	r3, r5
 8003b7a:	d1d8      	bne.n	8003b2e <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b7c:	f7ff ffb2 	bl	8003ae4 <HAL_GetTick>
 8003b80:	1b80      	subs	r0, r0, r6
 8003b82:	2802      	cmp	r0, #2
 8003b84:	d9f6      	bls.n	8003b74 <ADC_Enable+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b86:	2310      	movs	r3, #16
 8003b88:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        return HAL_ERROR;
 8003b8a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	63a3      	str	r3, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003b92:	432b      	orrs	r3, r5
 8003b94:	63e3      	str	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8003b96:	e7cb      	b.n	8003b30 <ADC_Enable+0x1c>
      wait_loop_index--;
 8003b98:	9b01      	ldr	r3, [sp, #4]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	9301      	str	r3, [sp, #4]
 8003b9e:	e7e2      	b.n	8003b66 <ADC_Enable+0x52>
 8003ba0:	80000017 	.word	0x80000017
 8003ba4:	20000004 	.word	0x20000004
 8003ba8:	000f4240 	.word	0x000f4240

08003bac <HAL_ADC_Init>:
{
 8003bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bae:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003bb0:	2001      	movs	r0, #1
  if(hadc == NULL)
 8003bb2:	2c00      	cmp	r4, #0
 8003bb4:	d07e      	beq.n	8003cb4 <HAL_ADC_Init+0x108>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003bb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d106      	bne.n	8003bca <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8003bbc:	0022      	movs	r2, r4
 8003bbe:	3234      	adds	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8003bc0:	63e3      	str	r3, [r4, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8003bc2:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8003bc4:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8003bc6:	f7fe fca7 	bl	8002518 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003bca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bcc:	06db      	lsls	r3, r3, #27
 8003bce:	d500      	bpl.n	8003bd2 <HAL_ADC_Init+0x26>
 8003bd0:	e085      	b.n	8003cde <HAL_ADC_Init+0x132>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003bd2:	2204      	movs	r2, #4
 8003bd4:	6823      	ldr	r3, [r4, #0]
 8003bd6:	6898      	ldr	r0, [r3, #8]
 8003bd8:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8003bda:	d000      	beq.n	8003bde <HAL_ADC_Init+0x32>
 8003bdc:	e07f      	b.n	8003cde <HAL_ADC_Init+0x132>
    ADC_STATE_CLR_SET(hadc->State,
 8003bde:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003be0:	4942      	ldr	r1, [pc, #264]	; (8003cec <HAL_ADC_Init+0x140>)
 8003be2:	4011      	ands	r1, r2
 8003be4:	2202      	movs	r2, #2
 8003be6:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003be8:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 8003bea:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	400a      	ands	r2, r1
 8003bf0:	2a01      	cmp	r2, #1
 8003bf2:	d105      	bne.n	8003c00 <HAL_ADC_Init+0x54>
 8003bf4:	6819      	ldr	r1, [r3, #0]
 8003bf6:	4211      	tst	r1, r2
 8003bf8:	d10e      	bne.n	8003c18 <HAL_ADC_Init+0x6c>
 8003bfa:	68da      	ldr	r2, [r3, #12]
 8003bfc:	0412      	lsls	r2, r2, #16
 8003bfe:	d40b      	bmi.n	8003c18 <HAL_ADC_Init+0x6c>
      MODIFY_REG(hadc->Instance->CFGR1,
 8003c00:	2118      	movs	r1, #24
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	438a      	bics	r2, r1
 8003c06:	68a1      	ldr	r1, [r4, #8]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003c0c:	6919      	ldr	r1, [r3, #16]
 8003c0e:	6862      	ldr	r2, [r4, #4]
 8003c10:	0089      	lsls	r1, r1, #2
 8003c12:	0889      	lsrs	r1, r1, #2
 8003c14:	4311      	orrs	r1, r2
 8003c16:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	4935      	ldr	r1, [pc, #212]	; (8003cf0 <HAL_ADC_Init+0x144>)
 8003c1c:	400a      	ands	r2, r1
 8003c1e:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c20:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003c22:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c24:	03ad      	lsls	r5, r5, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003c26:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c28:	4315      	orrs	r5, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003c2a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003c2c:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003c2e:	3a01      	subs	r2, #1
 8003c30:	1e56      	subs	r6, r2, #1
 8003c32:	41b2      	sbcs	r2, r6
 8003c34:	0316      	lsls	r6, r2, #12
 8003c36:	68e2      	ldr	r2, [r4, #12]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003c38:	034f      	lsls	r7, r1, #13
 8003c3a:	4315      	orrs	r5, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003c3c:	6922      	ldr	r2, [r4, #16]
 8003c3e:	432f      	orrs	r7, r5
 8003c40:	2a02      	cmp	r2, #2
 8003c42:	d100      	bne.n	8003c46 <HAL_ADC_Init+0x9a>
 8003c44:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003c46:	1d62      	adds	r2, r4, #5
 8003c48:	7fd2      	ldrb	r2, [r2, #31]
 8003c4a:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003c4c:	433a      	orrs	r2, r7
 8003c4e:	4332      	orrs	r2, r6
 8003c50:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c52:	7ee0      	ldrb	r0, [r4, #27]
 8003c54:	2801      	cmp	r0, #1
 8003c56:	d104      	bne.n	8003c62 <HAL_ADC_Init+0xb6>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003c58:	2900      	cmp	r1, #0
 8003c5a:	d12c      	bne.n	8003cb6 <HAL_ADC_Init+0x10a>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003c5c:	2180      	movs	r1, #128	; 0x80
 8003c5e:	0249      	lsls	r1, r1, #9
 8003c60:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c62:	20c2      	movs	r0, #194	; 0xc2
 8003c64:	69e1      	ldr	r1, [r4, #28]
 8003c66:	30ff      	adds	r0, #255	; 0xff
 8003c68:	4281      	cmp	r1, r0
 8003c6a:	d002      	beq.n	8003c72 <HAL_ADC_Init+0xc6>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003c6c:	6a20      	ldr	r0, [r4, #32]
 8003c6e:	4301      	orrs	r1, r0
 8003c70:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003c72:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003c74:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003c76:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003c78:	4311      	orrs	r1, r2
 8003c7a:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003c7c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003c7e:	4281      	cmp	r1, r0
 8003c80:	d002      	beq.n	8003c88 <HAL_ADC_Init+0xdc>
 8003c82:	1e48      	subs	r0, r1, #1
 8003c84:	2806      	cmp	r0, #6
 8003c86:	d807      	bhi.n	8003c98 <HAL_ADC_Init+0xec>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003c88:	2507      	movs	r5, #7
 8003c8a:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003c8c:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003c8e:	43a8      	bics	r0, r5
 8003c90:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003c92:	6958      	ldr	r0, [r3, #20]
 8003c94:	4301      	orrs	r1, r0
 8003c96:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	4916      	ldr	r1, [pc, #88]	; (8003cf4 <HAL_ADC_Init+0x148>)
 8003c9c:	400b      	ands	r3, r1
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d111      	bne.n	8003cc6 <HAL_ADC_Init+0x11a>
      ADC_CLEAR_ERRORCODE(hadc);
 8003ca2:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8003ca4:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8003ca6:	63e0      	str	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8003ca8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003caa:	4393      	bics	r3, r2
 8003cac:	001a      	movs	r2, r3
 8003cae:	2301      	movs	r3, #1
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8003cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cb6:	2120      	movs	r1, #32
 8003cb8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8003cba:	4329      	orrs	r1, r5
 8003cbc:	63a1      	str	r1, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cbe:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003cc0:	4308      	orrs	r0, r1
 8003cc2:	63e0      	str	r0, [r4, #60]	; 0x3c
 8003cc4:	e7cd      	b.n	8003c62 <HAL_ADC_Init+0xb6>
      ADC_STATE_CLR_SET(hadc->State,
 8003cc6:	2212      	movs	r2, #18
 8003cc8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cca:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8003ccc:	4393      	bics	r3, r2
 8003cce:	001a      	movs	r2, r3
 8003cd0:	2310      	movs	r3, #16
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cd6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003cd8:	4303      	orrs	r3, r0
 8003cda:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003cdc:	e7ea      	b.n	8003cb4 <HAL_ADC_Init+0x108>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cde:	2310      	movs	r3, #16
 8003ce0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8003ce2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	63a3      	str	r3, [r4, #56]	; 0x38
 8003ce8:	e7e4      	b.n	8003cb4 <HAL_ADC_Init+0x108>
 8003cea:	46c0      	nop			; (mov r8, r8)
 8003cec:	fffffefd 	.word	0xfffffefd
 8003cf0:	fffe0219 	.word	0xfffe0219
 8003cf4:	833fffe7 	.word	0x833fffe7

08003cf8 <HAL_ADC_Start_DMA>:
{
 8003cf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003cfa:	6803      	ldr	r3, [r0, #0]
{
 8003cfc:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003cfe:	689b      	ldr	r3, [r3, #8]
{
 8003d00:	000f      	movs	r7, r1
 8003d02:	9201      	str	r2, [sp, #4]
    tmp_hal_status = HAL_BUSY;
 8003d04:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003d06:	075b      	lsls	r3, r3, #29
 8003d08:	d430      	bmi.n	8003d6c <HAL_ADC_Start_DMA+0x74>
    __HAL_LOCK(hadc);
 8003d0a:	0026      	movs	r6, r4
 8003d0c:	3634      	adds	r6, #52	; 0x34
 8003d0e:	7833      	ldrb	r3, [r6, #0]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d02b      	beq.n	8003d6c <HAL_ADC_Start_DMA+0x74>
 8003d14:	2301      	movs	r3, #1
 8003d16:	7033      	strb	r3, [r6, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003d18:	7e63      	ldrb	r3, [r4, #25]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d127      	bne.n	8003d6e <HAL_ADC_Start_DMA+0x76>
      ADC_STATE_CLR_SET(hadc->State,
 8003d1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d20:	4a16      	ldr	r2, [pc, #88]	; (8003d7c <HAL_ADC_Start_DMA+0x84>)
      ADC_CLEAR_ERRORCODE(hadc);
 8003d22:	2500      	movs	r5, #0
      ADC_STATE_CLR_SET(hadc->State,
 8003d24:	401a      	ands	r2, r3
 8003d26:	2380      	movs	r3, #128	; 0x80
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	63a3      	str	r3, [r4, #56]	; 0x38
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d2e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003d30:	4b13      	ldr	r3, [pc, #76]	; (8003d80 <HAL_ADC_Start_DMA+0x88>)
      ADC_CLEAR_ERRORCODE(hadc);
 8003d32:	63e5      	str	r5, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hadc);
 8003d34:	7035      	strb	r5, [r6, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d36:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d38:	4b12      	ldr	r3, [pc, #72]	; (8003d84 <HAL_ADC_Start_DMA+0x8c>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d3a:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d3c:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d3e:	4b12      	ldr	r3, [pc, #72]	; (8003d88 <HAL_ADC_Start_DMA+0x90>)
 8003d40:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d42:	231c      	movs	r3, #28
 8003d44:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d46:	684a      	ldr	r2, [r1, #4]
 8003d48:	3b0c      	subs	r3, #12
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	68ca      	ldr	r2, [r1, #12]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d56:	003a      	movs	r2, r7
 8003d58:	3140      	adds	r1, #64	; 0x40
 8003d5a:	9b01      	ldr	r3, [sp, #4]
 8003d5c:	f000 f9d6 	bl	800410c <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003d60:	2304      	movs	r3, #4
 8003d62:	0028      	movs	r0, r5
 8003d64:	6822      	ldr	r2, [r4, #0]
 8003d66:	6891      	ldr	r1, [r2, #8]
 8003d68:	430b      	orrs	r3, r1
 8003d6a:	6093      	str	r3, [r2, #8]
}
 8003d6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8003d6e:	0020      	movs	r0, r4
 8003d70:	f7ff fed0 	bl	8003b14 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003d74:	2800      	cmp	r0, #0
 8003d76:	d0d2      	beq.n	8003d1e <HAL_ADC_Start_DMA+0x26>
 8003d78:	e7f8      	b.n	8003d6c <HAL_ADC_Start_DMA+0x74>
 8003d7a:	46c0      	nop			; (mov r8, r8)
 8003d7c:	fffff0fe 	.word	0xfffff0fe
 8003d80:	08003d91 	.word	0x08003d91
 8003d84:	08003e03 	.word	0x08003e03
 8003d88:	08003e11 	.word	0x08003e11

08003d8c <HAL_ADC_ConvCpltCallback>:
 8003d8c:	4770      	bx	lr
	...

08003d90 <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003d90:	2250      	movs	r2, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d92:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8003d94:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003d96:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003d98:	4211      	tst	r1, r2
 8003d9a:	d12a      	bne.n	8003df2 <ADC_DMAConvCplt+0x62>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003d9c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003d9e:	32b1      	adds	r2, #177	; 0xb1
 8003da0:	32ff      	adds	r2, #255	; 0xff
 8003da2:	430a      	orrs	r2, r1
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003da4:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003da6:	639a      	str	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	0109      	lsls	r1, r1, #4
 8003dac:	68d0      	ldr	r0, [r2, #12]
 8003dae:	4208      	tst	r0, r1
 8003db0:	d112      	bne.n	8003dd8 <ADC_DMAConvCplt+0x48>
 8003db2:	7e99      	ldrb	r1, [r3, #26]
 8003db4:	2900      	cmp	r1, #0
 8003db6:	d10f      	bne.n	8003dd8 <ADC_DMAConvCplt+0x48>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003db8:	6811      	ldr	r1, [r2, #0]
 8003dba:	0709      	lsls	r1, r1, #28
 8003dbc:	d50c      	bpl.n	8003dd8 <ADC_DMAConvCplt+0x48>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003dbe:	6891      	ldr	r1, [r2, #8]
 8003dc0:	0749      	lsls	r1, r1, #29
 8003dc2:	d40d      	bmi.n	8003de0 <ADC_DMAConvCplt+0x50>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003dc4:	200c      	movs	r0, #12
 8003dc6:	6851      	ldr	r1, [r2, #4]
 8003dc8:	4381      	bics	r1, r0
 8003dca:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003dcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dce:	490b      	ldr	r1, [pc, #44]	; (8003dfc <ADC_DMAConvCplt+0x6c>)
 8003dd0:	4011      	ands	r1, r2
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f7ff ffd7 	bl	8003d8c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8003dde:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003de0:	2220      	movs	r2, #32
 8003de2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003de4:	430a      	orrs	r2, r1
 8003de6:	639a      	str	r2, [r3, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003de8:	2201      	movs	r2, #1
 8003dea:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003dec:	430a      	orrs	r2, r1
 8003dee:	63da      	str	r2, [r3, #60]	; 0x3c
 8003df0:	e7f2      	b.n	8003dd8 <ADC_DMAConvCplt+0x48>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	4798      	blx	r3
}
 8003df8:	e7f1      	b.n	8003dde <ADC_DMAConvCplt+0x4e>
 8003dfa:	46c0      	nop			; (mov r8, r8)
 8003dfc:	fffffefe 	.word	0xfffffefe

08003e00 <HAL_ADC_ConvHalfCpltCallback>:
 8003e00:	4770      	bx	lr

08003e02 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003e02:	b510      	push	{r4, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8003e04:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003e06:	f7ff fffb 	bl	8003e00 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e0a:	bd10      	pop	{r4, pc}

08003e0c <HAL_ADC_LevelOutOfWindowCallback>:
 8003e0c:	4770      	bx	lr

08003e0e <HAL_ADC_ErrorCallback>:
 8003e0e:	4770      	bx	lr

08003e10 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003e10:	2340      	movs	r3, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e12:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8003e14:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003e16:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	6383      	str	r3, [r0, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003e1c:	2304      	movs	r3, #4
 8003e1e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003e20:	4313      	orrs	r3, r2
 8003e22:	63c3      	str	r3, [r0, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8003e24:	f7ff fff3 	bl	8003e0e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e28:	bd10      	pop	{r4, pc}
	...

08003e2c <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	6803      	ldr	r3, [r0, #0]
{
 8003e30:	b570      	push	{r4, r5, r6, lr}
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8003e32:	6819      	ldr	r1, [r3, #0]
{
 8003e34:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8003e36:	4211      	tst	r1, r2
 8003e38:	d002      	beq.n	8003e40 <HAL_ADC_IRQHandler+0x14>
 8003e3a:	6859      	ldr	r1, [r3, #4]
 8003e3c:	4211      	tst	r1, r2
 8003e3e:	d106      	bne.n	8003e4e <HAL_ADC_IRQHandler+0x22>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8003e40:	2208      	movs	r2, #8
 8003e42:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8003e44:	4211      	tst	r1, r2
 8003e46:	d028      	beq.n	8003e9a <HAL_ADC_IRQHandler+0x6e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8003e48:	6859      	ldr	r1, [r3, #4]
 8003e4a:	4211      	tst	r1, r2
 8003e4c:	d025      	beq.n	8003e9a <HAL_ADC_IRQHandler+0x6e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e4e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003e50:	06d2      	lsls	r2, r2, #27
 8003e52:	d404      	bmi.n	8003e5e <HAL_ADC_IRQHandler+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003e54:	2280      	movs	r2, #128	; 0x80
 8003e56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003e58:	0092      	lsls	r2, r2, #2
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	63a2      	str	r2, [r4, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003e5e:	22c0      	movs	r2, #192	; 0xc0
 8003e60:	68d9      	ldr	r1, [r3, #12]
 8003e62:	0112      	lsls	r2, r2, #4
 8003e64:	4211      	tst	r1, r2
 8003e66:	d112      	bne.n	8003e8e <HAL_ADC_IRQHandler+0x62>
 8003e68:	7ea2      	ldrb	r2, [r4, #26]
 8003e6a:	2a00      	cmp	r2, #0
 8003e6c:	d10f      	bne.n	8003e8e <HAL_ADC_IRQHandler+0x62>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	0712      	lsls	r2, r2, #28
 8003e72:	d50c      	bpl.n	8003e8e <HAL_ADC_IRQHandler+0x62>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003e74:	689a      	ldr	r2, [r3, #8]
 8003e76:	0752      	lsls	r2, r2, #29
 8003e78:	d43c      	bmi.n	8003ef4 <HAL_ADC_IRQHandler+0xc8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003e7a:	210c      	movs	r1, #12
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	438a      	bics	r2, r1
 8003e80:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8003e82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e84:	4a20      	ldr	r2, [pc, #128]	; (8003f08 <HAL_ADC_IRQHandler+0xdc>)
 8003e86:	401a      	ands	r2, r3
 8003e88:	2301      	movs	r3, #1
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	63a3      	str	r3, [r4, #56]	; 0x38
    HAL_ADC_ConvCpltCallback(hadc);
 8003e8e:	0020      	movs	r0, r4
 8003e90:	f7ff ff7c 	bl	8003d8c <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003e94:	220c      	movs	r2, #12
 8003e96:	6823      	ldr	r3, [r4, #0]
 8003e98:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8003e9a:	2580      	movs	r5, #128	; 0x80
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	422a      	tst	r2, r5
 8003ea2:	d00c      	beq.n	8003ebe <HAL_ADC_IRQHandler+0x92>
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	422b      	tst	r3, r5
 8003ea8:	d009      	beq.n	8003ebe <HAL_ADC_IRQHandler+0x92>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003eaa:	2380      	movs	r3, #128	; 0x80
 8003eac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003eae:	025b      	lsls	r3, r3, #9
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	63a3      	str	r3, [r4, #56]	; 0x38
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003eb4:	0020      	movs	r0, r4
 8003eb6:	f7ff ffa9 	bl	8003e0c <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003eba:	6823      	ldr	r3, [r4, #0]
 8003ebc:	601d      	str	r5, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8003ebe:	2210      	movs	r2, #16
 8003ec0:	6823      	ldr	r3, [r4, #0]
 8003ec2:	6819      	ldr	r1, [r3, #0]
 8003ec4:	4211      	tst	r1, r2
 8003ec6:	d014      	beq.n	8003ef2 <HAL_ADC_IRQHandler+0xc6>
 8003ec8:	6859      	ldr	r1, [r3, #4]
 8003eca:	4211      	tst	r1, r2
 8003ecc:	d011      	beq.n	8003ef2 <HAL_ADC_IRQHandler+0xc6>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8003ece:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003ed0:	2a01      	cmp	r2, #1
 8003ed2:	d002      	beq.n	8003eda <HAL_ADC_IRQHandler+0xae>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8003ed4:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8003ed6:	07d2      	lsls	r2, r2, #31
 8003ed8:	d508      	bpl.n	8003eec <HAL_ADC_IRQHandler+0xc0>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003eda:	2202      	movs	r2, #2
 8003edc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
      HAL_ADC_ErrorCallback(hadc);
 8003ede:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	63e2      	str	r2, [r4, #60]	; 0x3c
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003ee4:	2210      	movs	r2, #16
 8003ee6:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8003ee8:	f7ff ff91 	bl	8003e0e <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003eec:	2210      	movs	r2, #16
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	601a      	str	r2, [r3, #0]
}
 8003ef2:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ef4:	2320      	movs	r3, #32
 8003ef6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003efc:	2301      	movs	r3, #1
 8003efe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003f00:	4313      	orrs	r3, r2
 8003f02:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003f04:	e7c3      	b.n	8003e8e <HAL_ADC_IRQHandler+0x62>
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	fffffefe 	.word	0xfffffefe

08003f0c <HAL_ADC_ConfigChannel>:
{
 8003f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 8003f0e:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 8003f10:	0004      	movs	r4, r0
{
 8003f12:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0U;
 8003f14:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hadc);
 8003f16:	3434      	adds	r4, #52	; 0x34
 8003f18:	7823      	ldrb	r3, [r4, #0]
{
 8003f1a:	0002      	movs	r2, r0
  __HAL_LOCK(hadc);
 8003f1c:	2002      	movs	r0, #2
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d02f      	beq.n	8003f82 <HAL_ADC_ConfigChannel+0x76>
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003f22:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003f24:	6817      	ldr	r7, [r2, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003f26:	469c      	mov	ip, r3
  __HAL_LOCK(hadc);
 8003f28:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003f2a:	68bd      	ldr	r5, [r7, #8]
 8003f2c:	1800      	adds	r0, r0, r0
  __HAL_LOCK(hadc);
 8003f2e:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003f30:	4005      	ands	r5, r0
 8003f32:	d159      	bne.n	8003fe8 <HAL_ADC_ConfigChannel+0xdc>
 8003f34:	680e      	ldr	r6, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 8003f36:	482f      	ldr	r0, [pc, #188]	; (8003ff4 <HAL_ADC_ConfigChannel+0xe8>)
 8003f38:	40b3      	lsls	r3, r6
 8003f3a:	0032      	movs	r2, r6
 8003f3c:	9301      	str	r3, [sp, #4]
 8003f3e:	684b      	ldr	r3, [r1, #4]
 8003f40:	3a10      	subs	r2, #16
 8003f42:	4283      	cmp	r3, r0
 8003f44:	d03d      	beq.n	8003fc2 <HAL_ADC_ConfigChannel+0xb6>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f48:	9801      	ldr	r0, [sp, #4]
 8003f4a:	4318      	orrs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003f4c:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003f4e:	62b8      	str	r0, [r7, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003f50:	055b      	lsls	r3, r3, #21
 8003f52:	459c      	cmp	ip, r3
 8003f54:	d010      	beq.n	8003f78 <HAL_ADC_ConfigChannel+0x6c>
 8003f56:	4663      	mov	r3, ip
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	2b06      	cmp	r3, #6
 8003f5c:	d90c      	bls.n	8003f78 <HAL_ADC_ConfigChannel+0x6c>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003f5e:	688b      	ldr	r3, [r1, #8]
 8003f60:	2107      	movs	r1, #7
 8003f62:	6978      	ldr	r0, [r7, #20]
 8003f64:	4008      	ands	r0, r1
 8003f66:	4283      	cmp	r3, r0
 8003f68:	d006      	beq.n	8003f78 <HAL_ADC_ConfigChannel+0x6c>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003f6a:	6978      	ldr	r0, [r7, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003f6c:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003f6e:	4388      	bics	r0, r1
 8003f70:	6178      	str	r0, [r7, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003f72:	6978      	ldr	r0, [r7, #20]
 8003f74:	4303      	orrs	r3, r0
 8003f76:	617b      	str	r3, [r7, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003f78:	2a01      	cmp	r2, #1
 8003f7a:	d904      	bls.n	8003f86 <HAL_ADC_ConfigChannel+0x7a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f7c:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8003f7e:	2300      	movs	r3, #0
 8003f80:	7023      	strb	r3, [r4, #0]
}
 8003f82:	b005      	add	sp, #20
 8003f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003f86:	0033      	movs	r3, r6
 8003f88:	3b10      	subs	r3, #16
 8003f8a:	1e58      	subs	r0, r3, #1
 8003f8c:	4183      	sbcs	r3, r0
 8003f8e:	2080      	movs	r0, #128	; 0x80
 8003f90:	4919      	ldr	r1, [pc, #100]	; (8003ff8 <HAL_ADC_ConfigChannel+0xec>)
 8003f92:	425b      	negs	r3, r3
 8003f94:	680a      	ldr	r2, [r1, #0]
 8003f96:	059b      	lsls	r3, r3, #22
 8003f98:	0400      	lsls	r0, r0, #16
 8003f9a:	181b      	adds	r3, r3, r0
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	600b      	str	r3, [r1, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003fa0:	2e10      	cmp	r6, #16
 8003fa2:	d1eb      	bne.n	8003f7c <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003fa4:	4b15      	ldr	r3, [pc, #84]	; (8003ffc <HAL_ADC_ConfigChannel+0xf0>)
 8003fa6:	4916      	ldr	r1, [pc, #88]	; (8004000 <HAL_ADC_ConfigChannel+0xf4>)
 8003fa8:	6818      	ldr	r0, [r3, #0]
 8003faa:	f7fc f8c1 	bl	8000130 <__udivsi3>
 8003fae:	230a      	movs	r3, #10
 8003fb0:	4358      	muls	r0, r3
 8003fb2:	9003      	str	r0, [sp, #12]
          while(wait_loop_index != 0U)
 8003fb4:	9b03      	ldr	r3, [sp, #12]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0e0      	beq.n	8003f7c <HAL_ADC_ConfigChannel+0x70>
            wait_loop_index--;
 8003fba:	9b03      	ldr	r3, [sp, #12]
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	9303      	str	r3, [sp, #12]
 8003fc0:	e7f8      	b.n	8003fb4 <HAL_ADC_ConfigChannel+0xa8>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003fc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fc4:	9b01      	ldr	r3, [sp, #4]
 8003fc6:	4399      	bics	r1, r3
 8003fc8:	62b9      	str	r1, [r7, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003fca:	2a01      	cmp	r2, #1
 8003fcc:	d8d6      	bhi.n	8003f7c <HAL_ADC_ConfigChannel+0x70>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003fce:	1e53      	subs	r3, r2, #1
 8003fd0:	419a      	sbcs	r2, r3
 8003fd2:	4253      	negs	r3, r2
 8003fd4:	2280      	movs	r2, #128	; 0x80
 8003fd6:	4908      	ldr	r1, [pc, #32]	; (8003ff8 <HAL_ADC_ConfigChannel+0xec>)
 8003fd8:	03d2      	lsls	r2, r2, #15
 8003fda:	4013      	ands	r3, r2
 8003fdc:	4a09      	ldr	r2, [pc, #36]	; (8004004 <HAL_ADC_ConfigChannel+0xf8>)
 8003fde:	6808      	ldr	r0, [r1, #0]
 8003fe0:	189b      	adds	r3, r3, r2
 8003fe2:	4003      	ands	r3, r0
 8003fe4:	600b      	str	r3, [r1, #0]
 8003fe6:	e7c9      	b.n	8003f7c <HAL_ADC_ConfigChannel+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fe8:	2120      	movs	r1, #32
 8003fea:	6b90      	ldr	r0, [r2, #56]	; 0x38
 8003fec:	4301      	orrs	r1, r0
 8003fee:	6391      	str	r1, [r2, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	e7c4      	b.n	8003f7e <HAL_ADC_ConfigChannel+0x72>
 8003ff4:	00001001 	.word	0x00001001
 8003ff8:	40012708 	.word	0x40012708
 8003ffc:	20000004 	.word	0x20000004
 8004000:	000f4240 	.word	0x000f4240
 8004004:	ff7fffff 	.word	0xff7fffff

08004008 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004008:	b530      	push	{r4, r5, lr}
 800400a:	25ff      	movs	r5, #255	; 0xff
 800400c:	2403      	movs	r4, #3
 800400e:	002a      	movs	r2, r5
 8004010:	b2c3      	uxtb	r3, r0
 8004012:	401c      	ands	r4, r3
 8004014:	00e4      	lsls	r4, r4, #3
 8004016:	40a2      	lsls	r2, r4
 8004018:	0189      	lsls	r1, r1, #6
 800401a:	4029      	ands	r1, r5
 800401c:	43d2      	mvns	r2, r2
 800401e:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8004020:	2800      	cmp	r0, #0
 8004022:	db0a      	blt.n	800403a <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004024:	24c0      	movs	r4, #192	; 0xc0
 8004026:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <HAL_NVIC_SetPriority+0x4c>)
 8004028:	0880      	lsrs	r0, r0, #2
 800402a:	0080      	lsls	r0, r0, #2
 800402c:	18c0      	adds	r0, r0, r3
 800402e:	00a4      	lsls	r4, r4, #2
 8004030:	5903      	ldr	r3, [r0, r4]
 8004032:	401a      	ands	r2, r3
 8004034:	4311      	orrs	r1, r2
 8004036:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8004038:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800403a:	200f      	movs	r0, #15
 800403c:	4003      	ands	r3, r0
 800403e:	3b08      	subs	r3, #8
 8004040:	4805      	ldr	r0, [pc, #20]	; (8004058 <HAL_NVIC_SetPriority+0x50>)
 8004042:	089b      	lsrs	r3, r3, #2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	181b      	adds	r3, r3, r0
 8004048:	69d8      	ldr	r0, [r3, #28]
 800404a:	4002      	ands	r2, r0
 800404c:	4311      	orrs	r1, r2
 800404e:	61d9      	str	r1, [r3, #28]
 8004050:	e7f2      	b.n	8004038 <HAL_NVIC_SetPriority+0x30>
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	e000e100 	.word	0xe000e100
 8004058:	e000ed00 	.word	0xe000ed00

0800405c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800405c:	2800      	cmp	r0, #0
 800405e:	db05      	blt.n	800406c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004060:	231f      	movs	r3, #31
 8004062:	4018      	ands	r0, r3
 8004064:	3b1e      	subs	r3, #30
 8004066:	4083      	lsls	r3, r0
 8004068:	4a01      	ldr	r2, [pc, #4]	; (8004070 <HAL_NVIC_EnableIRQ+0x14>)
 800406a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800406c:	4770      	bx	lr
 800406e:	46c0      	nop			; (mov r8, r8)
 8004070:	e000e100 	.word	0xe000e100

08004074 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004074:	4a09      	ldr	r2, [pc, #36]	; (800409c <HAL_SYSTICK_Config+0x28>)
 8004076:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8004078:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800407a:	4293      	cmp	r3, r2
 800407c:	d80d      	bhi.n	800409a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800407e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004080:	4a07      	ldr	r2, [pc, #28]	; (80040a0 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004082:	4808      	ldr	r0, [pc, #32]	; (80040a4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004084:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004086:	6a03      	ldr	r3, [r0, #32]
 8004088:	0609      	lsls	r1, r1, #24
 800408a:	021b      	lsls	r3, r3, #8
 800408c:	0a1b      	lsrs	r3, r3, #8
 800408e:	430b      	orrs	r3, r1
 8004090:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004092:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004094:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004096:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004098:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800409a:	4770      	bx	lr
 800409c:	00ffffff 	.word	0x00ffffff
 80040a0:	e000e010 	.word	0xe000e010
 80040a4:	e000ed00 	.word	0xe000ed00

080040a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80040a8:	b570      	push	{r4, r5, r6, lr}
 80040aa:	0004      	movs	r4, r0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
  {
    return HAL_ERROR;
 80040ac:	2501      	movs	r5, #1
  if(NULL == hdma)
 80040ae:	2800      	cmp	r0, #0
 80040b0:	d024      	beq.n	80040fc <HAL_DMA_Init+0x54>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040b2:	2302      	movs	r3, #2
 80040b4:	1c86      	adds	r6, r0, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80040b6:	6800      	ldr	r0, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80040b8:	77f3      	strb	r3, [r6, #31]
  tmp = hdma->Instance->CCR;
 80040ba:	6802      	ldr	r2, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80040bc:	4b10      	ldr	r3, [pc, #64]	; (8004100 <HAL_DMA_Init+0x58>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80040be:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80040c0:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 80040c2:	6863      	ldr	r3, [r4, #4]
 80040c4:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040c6:	68e1      	ldr	r1, [r4, #12]
 80040c8:	430b      	orrs	r3, r1
 80040ca:	6921      	ldr	r1, [r4, #16]
 80040cc:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040ce:	6961      	ldr	r1, [r4, #20]
 80040d0:	430b      	orrs	r3, r1
 80040d2:	69a1      	ldr	r1, [r4, #24]
 80040d4:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80040d6:	69e1      	ldr	r1, [r4, #28]
 80040d8:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 80040da:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80040dc:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80040de:	4b09      	ldr	r3, [pc, #36]	; (8004104 <HAL_DMA_Init+0x5c>)
 80040e0:	2114      	movs	r1, #20
 80040e2:	18c0      	adds	r0, r0, r3
 80040e4:	f7fc f824 	bl	8000130 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 80040e8:	4b07      	ldr	r3, [pc, #28]	; (8004108 <HAL_DMA_Init+0x60>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80040ea:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 80040ec:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040ee:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80040f0:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040f2:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 80040f4:	77f5      	strb	r5, [r6, #31]
  hdma->Lock = HAL_UNLOCKED;
 80040f6:	1964      	adds	r4, r4, r5
  return HAL_OK;
 80040f8:	001d      	movs	r5, r3
  hdma->Lock = HAL_UNLOCKED;
 80040fa:	77e3      	strb	r3, [r4, #31]
}  
 80040fc:	0028      	movs	r0, r5
 80040fe:	bd70      	pop	{r4, r5, r6, pc}
 8004100:	ffffc00f 	.word	0xffffc00f
 8004104:	bffdfff8 	.word	0xbffdfff8
 8004108:	40020000 	.word	0x40020000

0800410c <HAL_DMA_Start_IT>:
{
 800410c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 800410e:	1c44      	adds	r4, r0, #1
 8004110:	7fe6      	ldrb	r6, [r4, #31]
{
 8004112:	0005      	movs	r5, r0
  __HAL_LOCK(hdma);
 8004114:	2002      	movs	r0, #2
 8004116:	2e01      	cmp	r6, #1
 8004118:	d027      	beq.n	800416a <HAL_DMA_Start_IT+0x5e>
 800411a:	3801      	subs	r0, #1
 800411c:	77e0      	strb	r0, [r4, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 800411e:	1ca8      	adds	r0, r5, #2
 8004120:	7fc6      	ldrb	r6, [r0, #31]
 8004122:	4684      	mov	ip, r0
 8004124:	b2f6      	uxtb	r6, r6
 8004126:	2002      	movs	r0, #2
 8004128:	2700      	movs	r7, #0
 800412a:	2e01      	cmp	r6, #1
 800412c:	d128      	bne.n	8004180 <HAL_DMA_Start_IT+0x74>
  	hdma->State = HAL_DMA_STATE_BUSY;
 800412e:	4664      	mov	r4, ip
 8004130:	77e0      	strb	r0, [r4, #31]
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004132:	682c      	ldr	r4, [r5, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004134:	63af      	str	r7, [r5, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004136:	6820      	ldr	r0, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004138:	6c2f      	ldr	r7, [r5, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800413a:	43b0      	bics	r0, r6
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800413c:	40be      	lsls	r6, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800413e:	6020      	str	r0, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004140:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8004142:	6046      	str	r6, [r0, #4]
  hdma->Instance->CNDTR = DataLength;
 8004144:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004146:	686b      	ldr	r3, [r5, #4]
 8004148:	6828      	ldr	r0, [r5, #0]
 800414a:	2b10      	cmp	r3, #16
 800414c:	d10e      	bne.n	800416c <HAL_DMA_Start_IT+0x60>
    hdma->Instance->CPAR = DstAddress;
 800414e:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004150:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8004152:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004154:	6822      	ldr	r2, [r4, #0]
    if(NULL != hdma->XferHalfCpltCallback )
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00b      	beq.n	8004172 <HAL_DMA_Start_IT+0x66>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800415a:	230e      	movs	r3, #14
 800415c:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800415e:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004160:	2301      	movs	r3, #1
 8004162:	6802      	ldr	r2, [r0, #0]
 8004164:	4313      	orrs	r3, r2
 8004166:	6003      	str	r3, [r0, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004168:	2000      	movs	r0, #0
} 
 800416a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 800416c:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 800416e:	60e2      	str	r2, [r4, #12]
 8004170:	e7ef      	b.n	8004152 <HAL_DMA_Start_IT+0x46>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004172:	230a      	movs	r3, #10
 8004174:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004176:	2204      	movs	r2, #4
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004178:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	4393      	bics	r3, r2
 800417e:	e7ee      	b.n	800415e <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 8004180:	77e7      	strb	r7, [r4, #31]
 8004182:	e7f2      	b.n	800416a <HAL_DMA_Start_IT+0x5e>

08004184 <HAL_DMA_Abort>:
{
 8004184:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004186:	1c85      	adds	r5, r0, #2
 8004188:	7feb      	ldrb	r3, [r5, #31]
 800418a:	1c44      	adds	r4, r0, #1
 800418c:	2b02      	cmp	r3, #2
 800418e:	d005      	beq.n	800419c <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004190:	2304      	movs	r3, #4
 8004192:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8004194:	2300      	movs	r3, #0
    return HAL_ERROR;
 8004196:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8004198:	77e3      	strb	r3, [r4, #31]
}
 800419a:	bd30      	pop	{r4, r5, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800419c:	210e      	movs	r1, #14
 800419e:	6803      	ldr	r3, [r0, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	438a      	bics	r2, r1
 80041a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80041a6:	2201      	movs	r2, #1
 80041a8:	6819      	ldr	r1, [r3, #0]
 80041aa:	4391      	bics	r1, r2
 80041ac:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80041ae:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80041b0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80041b2:	0010      	movs	r0, r2
 80041b4:	4088      	lsls	r0, r1
 80041b6:	6058      	str	r0, [r3, #4]
  __HAL_UNLOCK(hdma);
 80041b8:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY; 
 80041ba:	77ea      	strb	r2, [r5, #31]
  __HAL_UNLOCK(hdma);
 80041bc:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 80041be:	e7ec      	b.n	800419a <HAL_DMA_Abort+0x16>

080041c0 <HAL_DMA_Abort_IT>:
{  
 80041c0:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80041c2:	1c84      	adds	r4, r0, #2
 80041c4:	7fe3      	ldrb	r3, [r4, #31]
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d004      	beq.n	80041d4 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041ca:	2304      	movs	r3, #4
 80041cc:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80041ce:	3b03      	subs	r3, #3
}
 80041d0:	0018      	movs	r0, r3
 80041d2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80041d4:	210e      	movs	r1, #14
 80041d6:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80041d8:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	438a      	bics	r2, r1
 80041de:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80041e0:	2201      	movs	r2, #1
 80041e2:	6819      	ldr	r1, [r3, #0]
 80041e4:	4391      	bics	r1, r2
 80041e6:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80041e8:	0011      	movs	r1, r2
 80041ea:	40a9      	lsls	r1, r5
 80041ec:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80041ee:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80041f0:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 80041f2:	2400      	movs	r4, #0
 80041f4:	1883      	adds	r3, r0, r2
    if(hdma->XferAbortCallback != NULL)
 80041f6:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80041f8:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 80041fa:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 80041fc:	42a2      	cmp	r2, r4
 80041fe:	d0e7      	beq.n	80041d0 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8004200:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8004202:	0023      	movs	r3, r4
 8004204:	e7e4      	b.n	80041d0 <HAL_DMA_Abort_IT+0x10>

08004206 <HAL_DMA_IRQHandler>:
{
 8004206:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004208:	2704      	movs	r7, #4
 800420a:	003e      	movs	r6, r7
 800420c:	6c01      	ldr	r1, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800420e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004210:	408e      	lsls	r6, r1
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004212:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004214:	6803      	ldr	r3, [r0, #0]
 8004216:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004218:	4235      	tst	r5, r6
 800421a:	d00d      	beq.n	8004238 <HAL_DMA_IRQHandler+0x32>
 800421c:	423c      	tst	r4, r7
 800421e:	d00b      	beq.n	8004238 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004220:	6819      	ldr	r1, [r3, #0]
 8004222:	0689      	lsls	r1, r1, #26
 8004224:	d402      	bmi.n	800422c <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004226:	6819      	ldr	r1, [r3, #0]
 8004228:	43b9      	bics	r1, r7
 800422a:	6019      	str	r1, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 800422c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800422e:	6056      	str	r6, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8004230:	2b00      	cmp	r3, #0
 8004232:	d019      	beq.n	8004268 <HAL_DMA_IRQHandler+0x62>
    	hdma->XferErrorCallback(hdma);
 8004234:	4798      	blx	r3
}  
 8004236:	e017      	b.n	8004268 <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004238:	2702      	movs	r7, #2
 800423a:	003e      	movs	r6, r7
 800423c:	408e      	lsls	r6, r1
 800423e:	4235      	tst	r5, r6
 8004240:	d013      	beq.n	800426a <HAL_DMA_IRQHandler+0x64>
 8004242:	423c      	tst	r4, r7
 8004244:	d011      	beq.n	800426a <HAL_DMA_IRQHandler+0x64>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004246:	6819      	ldr	r1, [r3, #0]
 8004248:	0689      	lsls	r1, r1, #26
 800424a:	d406      	bmi.n	800425a <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800424c:	240a      	movs	r4, #10
 800424e:	6819      	ldr	r1, [r3, #0]
 8004250:	43a1      	bics	r1, r4
 8004252:	6019      	str	r1, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8004254:	2101      	movs	r1, #1
 8004256:	19c3      	adds	r3, r0, r7
 8004258:	77d9      	strb	r1, [r3, #31]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800425a:	6056      	str	r6, [r2, #4]
  	__HAL_UNLOCK(hdma);
 800425c:	2200      	movs	r2, #0
 800425e:	1c43      	adds	r3, r0, #1
 8004260:	77da      	strb	r2, [r3, #31]
  	if(hdma->XferCpltCallback != NULL)
 8004262:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if(hdma->XferErrorCallback != NULL)
 8004264:	4293      	cmp	r3, r2
 8004266:	d1e5      	bne.n	8004234 <HAL_DMA_IRQHandler+0x2e>
}  
 8004268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800426a:	2608      	movs	r6, #8
 800426c:	0037      	movs	r7, r6
 800426e:	408f      	lsls	r7, r1
 8004270:	423d      	tst	r5, r7
 8004272:	d0f9      	beq.n	8004268 <HAL_DMA_IRQHandler+0x62>
 8004274:	4234      	tst	r4, r6
 8004276:	d0f7      	beq.n	8004268 <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004278:	250e      	movs	r5, #14
 800427a:	681c      	ldr	r4, [r3, #0]
 800427c:	43ac      	bics	r4, r5
 800427e:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004280:	2301      	movs	r3, #1
 8004282:	001c      	movs	r4, r3
 8004284:	408c      	lsls	r4, r1
 8004286:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;    
 8004288:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800428a:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 800428c:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma); 
 800428e:	2200      	movs	r2, #0
 8004290:	18c3      	adds	r3, r0, r3
 8004292:	77da      	strb	r2, [r3, #31]
    if(hdma->XferErrorCallback != NULL)
 8004294:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004296:	e7e5      	b.n	8004264 <HAL_DMA_IRQHandler+0x5e>

08004298 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8004298:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800429a:	680b      	ldr	r3, [r1, #0]
{ 
 800429c:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800429e:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00u;
 80042a0:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042a2:	9a03      	ldr	r2, [sp, #12]
 80042a4:	40da      	lsrs	r2, r3
 80042a6:	d101      	bne.n	80042ac <HAL_GPIO_Init+0x14>
      }
    }

    position++;
  } 
}
 80042a8:	b007      	add	sp, #28
 80042aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80042ac:	2201      	movs	r2, #1
 80042ae:	409a      	lsls	r2, r3
 80042b0:	4694      	mov	ip, r2
 80042b2:	4664      	mov	r4, ip
 80042b4:	9a03      	ldr	r2, [sp, #12]
 80042b6:	4022      	ands	r2, r4
 80042b8:	9201      	str	r2, [sp, #4]
    if (iocurrent != 0x00u)
 80042ba:	d100      	bne.n	80042be <HAL_GPIO_Init+0x26>
 80042bc:	e092      	b.n	80043e4 <HAL_GPIO_Init+0x14c>
 80042be:	2503      	movs	r5, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042c0:	684a      	ldr	r2, [r1, #4]
 80042c2:	005e      	lsls	r6, r3, #1
 80042c4:	0017      	movs	r7, r2
 80042c6:	9200      	str	r2, [sp, #0]
 80042c8:	40b5      	lsls	r5, r6
 80042ca:	2210      	movs	r2, #16
 80042cc:	4397      	bics	r7, r2
 80042ce:	43ea      	mvns	r2, r5
 80042d0:	9202      	str	r2, [sp, #8]
 80042d2:	1e7a      	subs	r2, r7, #1
 80042d4:	2a01      	cmp	r2, #1
 80042d6:	d810      	bhi.n	80042fa <HAL_GPIO_Init+0x62>
        temp = GPIOx->OSPEEDR;
 80042d8:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80042da:	9a02      	ldr	r2, [sp, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80042dc:	2501      	movs	r5, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80042de:	4014      	ands	r4, r2
        temp |= (GPIO_Init->Speed << (position * 2u));
 80042e0:	68ca      	ldr	r2, [r1, #12]
 80042e2:	40b2      	lsls	r2, r6
 80042e4:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 80042e6:	6082      	str	r2, [r0, #8]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042e8:	4662      	mov	r2, ip
        temp = GPIOx->OTYPER;
 80042ea:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042ec:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80042ee:	9a00      	ldr	r2, [sp, #0]
 80042f0:	0912      	lsrs	r2, r2, #4
 80042f2:	402a      	ands	r2, r5
 80042f4:	409a      	lsls	r2, r3
 80042f6:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80042f8:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80042fa:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80042fc:	9a02      	ldr	r2, [sp, #8]
 80042fe:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004300:	688a      	ldr	r2, [r1, #8]
 8004302:	40b2      	lsls	r2, r6
 8004304:	4322      	orrs	r2, r4
      GPIOx->PUPDR = temp;
 8004306:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004308:	2f02      	cmp	r7, #2
 800430a:	d10d      	bne.n	8004328 <HAL_GPIO_Init+0x90>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800430c:	2407      	movs	r4, #7
 800430e:	250f      	movs	r5, #15
 8004310:	401c      	ands	r4, r3
 8004312:	00a4      	lsls	r4, r4, #2
 8004314:	40a5      	lsls	r5, r4
        temp = GPIOx->AFR[position >> 3u];
 8004316:	08da      	lsrs	r2, r3, #3
 8004318:	0092      	lsls	r2, r2, #2
 800431a:	1882      	adds	r2, r0, r2
 800431c:	6a17      	ldr	r7, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800431e:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004320:	690d      	ldr	r5, [r1, #16]
 8004322:	40a5      	lsls	r5, r4
 8004324:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 8004326:	6217      	str	r7, [r2, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004328:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 800432a:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800432c:	9d02      	ldr	r5, [sp, #8]
 800432e:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004330:	9a00      	ldr	r2, [sp, #0]
 8004332:	4022      	ands	r2, r4
 8004334:	40b2      	lsls	r2, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004336:	2480      	movs	r4, #128	; 0x80
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004338:	4315      	orrs	r5, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800433a:	9a00      	ldr	r2, [sp, #0]
 800433c:	0564      	lsls	r4, r4, #21
      GPIOx->MODER = temp;
 800433e:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004340:	4222      	tst	r2, r4
 8004342:	d04f      	beq.n	80043e4 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004344:	2501      	movs	r5, #1
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004346:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004348:	4a27      	ldr	r2, [pc, #156]	; (80043e8 <HAL_GPIO_Init+0x150>)
 800434a:	6994      	ldr	r4, [r2, #24]
 800434c:	432c      	orrs	r4, r5
 800434e:	6194      	str	r4, [r2, #24]
 8004350:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8004352:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004354:	402a      	ands	r2, r5
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004356:	3502      	adds	r5, #2
 8004358:	401d      	ands	r5, r3
 800435a:	00ad      	lsls	r5, r5, #2
 800435c:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800435e:	9205      	str	r2, [sp, #20]
 8004360:	9a05      	ldr	r2, [sp, #20]
 8004362:	4a22      	ldr	r2, [pc, #136]	; (80043ec <HAL_GPIO_Init+0x154>)
 8004364:	00a4      	lsls	r4, r4, #2
 8004366:	18a4      	adds	r4, r4, r2
        temp = SYSCFG->EXTICR[position >> 2u];
 8004368:	68a6      	ldr	r6, [r4, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800436a:	2200      	movs	r2, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800436c:	43be      	bics	r6, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800436e:	2790      	movs	r7, #144	; 0x90
 8004370:	05ff      	lsls	r7, r7, #23
 8004372:	42b8      	cmp	r0, r7
 8004374:	d00c      	beq.n	8004390 <HAL_GPIO_Init+0xf8>
 8004376:	4f1e      	ldr	r7, [pc, #120]	; (80043f0 <HAL_GPIO_Init+0x158>)
 8004378:	3201      	adds	r2, #1
 800437a:	42b8      	cmp	r0, r7
 800437c:	d008      	beq.n	8004390 <HAL_GPIO_Init+0xf8>
 800437e:	4f1d      	ldr	r7, [pc, #116]	; (80043f4 <HAL_GPIO_Init+0x15c>)
 8004380:	3201      	adds	r2, #1
 8004382:	42b8      	cmp	r0, r7
 8004384:	d004      	beq.n	8004390 <HAL_GPIO_Init+0xf8>
 8004386:	4f1c      	ldr	r7, [pc, #112]	; (80043f8 <HAL_GPIO_Init+0x160>)
 8004388:	3203      	adds	r2, #3
 800438a:	42b8      	cmp	r0, r7
 800438c:	d100      	bne.n	8004390 <HAL_GPIO_Init+0xf8>
 800438e:	3a02      	subs	r2, #2
 8004390:	40aa      	lsls	r2, r5
 8004392:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004394:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8004396:	4a19      	ldr	r2, [pc, #100]	; (80043fc <HAL_GPIO_Init+0x164>)
        temp &= ~(iocurrent);
 8004398:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR;
 800439a:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 800439c:	9d01      	ldr	r5, [sp, #4]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800439e:	9f00      	ldr	r7, [sp, #0]
        temp &= ~(iocurrent);
 80043a0:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80043a2:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043a4:	03ff      	lsls	r7, r7, #15
 80043a6:	d401      	bmi.n	80043ac <HAL_GPIO_Init+0x114>
        temp &= ~(iocurrent);
 80043a8:	0035      	movs	r5, r6
 80043aa:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 80043ac:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80043ae:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80043b0:	9d01      	ldr	r5, [sp, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043b2:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 80043b4:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043b6:	03bf      	lsls	r7, r7, #14
 80043b8:	d401      	bmi.n	80043be <HAL_GPIO_Init+0x126>
        temp &= ~(iocurrent);
 80043ba:	0035      	movs	r5, r6
 80043bc:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 80043be:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80043c0:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80043c2:	9d01      	ldr	r5, [sp, #4]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80043c4:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 80043c6:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80043c8:	02ff      	lsls	r7, r7, #11
 80043ca:	d401      	bmi.n	80043d0 <HAL_GPIO_Init+0x138>
        temp &= ~(iocurrent);
 80043cc:	0035      	movs	r5, r6
 80043ce:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 80043d0:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80043d2:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 80043d4:	9e01      	ldr	r6, [sp, #4]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043d6:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 80043d8:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043da:	02bf      	lsls	r7, r7, #10
 80043dc:	d401      	bmi.n	80043e2 <HAL_GPIO_Init+0x14a>
        temp &= ~(iocurrent);
 80043de:	4025      	ands	r5, r4
 80043e0:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 80043e2:	60d6      	str	r6, [r2, #12]
    position++;
 80043e4:	3301      	adds	r3, #1
 80043e6:	e75c      	b.n	80042a2 <HAL_GPIO_Init+0xa>
 80043e8:	40021000 	.word	0x40021000
 80043ec:	40010000 	.word	0x40010000
 80043f0:	48000400 	.word	0x48000400
 80043f4:	48000800 	.word	0x48000800
 80043f8:	48000c00 	.word	0x48000c00
 80043fc:	40010400 	.word	0x40010400

08004400 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004400:	2a00      	cmp	r2, #0
 8004402:	d001      	beq.n	8004408 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004404:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004406:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004408:	6281      	str	r1, [r0, #40]	; 0x28
}
 800440a:	e7fc      	b.n	8004406 <HAL_GPIO_WritePin+0x6>

0800440c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800440c:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800440e:	0013      	movs	r3, r2
 8004410:	400b      	ands	r3, r1
 8004412:	041b      	lsls	r3, r3, #16
 8004414:	4391      	bics	r1, r2
 8004416:	4319      	orrs	r1, r3
 8004418:	6181      	str	r1, [r0, #24]
}
 800441a:	4770      	bx	lr

0800441c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800441c:	6803      	ldr	r3, [r0, #0]
 800441e:	699a      	ldr	r2, [r3, #24]
 8004420:	0792      	lsls	r2, r2, #30
 8004422:	d501      	bpl.n	8004428 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004424:	2200      	movs	r2, #0
 8004426:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004428:	2201      	movs	r2, #1
 800442a:	6999      	ldr	r1, [r3, #24]
 800442c:	4211      	tst	r1, r2
 800442e:	d102      	bne.n	8004436 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004430:	6999      	ldr	r1, [r3, #24]
 8004432:	430a      	orrs	r2, r1
 8004434:	619a      	str	r2, [r3, #24]
  }
}
 8004436:	4770      	bx	lr

08004438 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004438:	b530      	push	{r4, r5, lr}
 800443a:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800443c:	0412      	lsls	r2, r2, #16
 800443e:	6800      	ldr	r0, [r0, #0]
 8004440:	4322      	orrs	r2, r4
 8004442:	4313      	orrs	r3, r2
 8004444:	4a05      	ldr	r2, [pc, #20]	; (800445c <I2C_TransferConfig+0x24>)
 8004446:	6845      	ldr	r5, [r0, #4]
 8004448:	0589      	lsls	r1, r1, #22
 800444a:	0d64      	lsrs	r4, r4, #21
 800444c:	0d89      	lsrs	r1, r1, #22
 800444e:	4314      	orrs	r4, r2
 8004450:	43a5      	bics	r5, r4
 8004452:	430b      	orrs	r3, r1
 8004454:	432b      	orrs	r3, r5
 8004456:	6043      	str	r3, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004458:	bd30      	pop	{r4, r5, pc}
 800445a:	46c0      	nop			; (mov r8, r8)
 800445c:	03ff63ff 	.word	0x03ff63ff

08004460 <I2C_IsAcknowledgeFailed>:
{
 8004460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004462:	6803      	ldr	r3, [r0, #0]
{
 8004464:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004466:	6998      	ldr	r0, [r3, #24]
 8004468:	2310      	movs	r3, #16
{
 800446a:	000e      	movs	r6, r1
 800446c:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800446e:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004470:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004472:	2800      	cmp	r0, #0
 8004474:	d118      	bne.n	80044a8 <I2C_IsAcknowledgeFailed+0x48>
}
 8004476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 8004478:	1c72      	adds	r2, r6, #1
 800447a:	d016      	beq.n	80044aa <I2C_IsAcknowledgeFailed+0x4a>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800447c:	f7ff fb32 	bl	8003ae4 <HAL_GetTick>
 8004480:	1bc0      	subs	r0, r0, r7
 8004482:	42b0      	cmp	r0, r6
 8004484:	d801      	bhi.n	800448a <I2C_IsAcknowledgeFailed+0x2a>
 8004486:	2e00      	cmp	r6, #0
 8004488:	d10e      	bne.n	80044a8 <I2C_IsAcknowledgeFailed+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800448a:	2220      	movs	r2, #32
 800448c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800448e:	4313      	orrs	r3, r2
 8004490:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004492:	0023      	movs	r3, r4
 8004494:	3341      	adds	r3, #65	; 0x41
 8004496:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004498:	0022      	movs	r2, r4
 800449a:	2300      	movs	r3, #0
 800449c:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 800449e:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a0:	7013      	strb	r3, [r2, #0]
    return HAL_ERROR;
 80044a2:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 80044a4:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 80044a6:	e7e6      	b.n	8004476 <I2C_IsAcknowledgeFailed+0x16>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044a8:	6823      	ldr	r3, [r4, #0]
 80044aa:	699a      	ldr	r2, [r3, #24]
 80044ac:	422a      	tst	r2, r5
 80044ae:	d0e3      	beq.n	8004478 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044b0:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 80044b2:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044b4:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044b6:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80044b8:	f7ff ffb0 	bl	800441c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80044bc:	6822      	ldr	r2, [r4, #0]
 80044be:	4906      	ldr	r1, [pc, #24]	; (80044d8 <I2C_IsAcknowledgeFailed+0x78>)
 80044c0:	6853      	ldr	r3, [r2, #4]
 80044c2:	400b      	ands	r3, r1
 80044c4:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044c6:	2304      	movs	r3, #4
 80044c8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80044ca:	4313      	orrs	r3, r2
 80044cc:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80044ce:	0023      	movs	r3, r4
 80044d0:	3341      	adds	r3, #65	; 0x41
 80044d2:	701d      	strb	r5, [r3, #0]
 80044d4:	e7e0      	b.n	8004498 <I2C_IsAcknowledgeFailed+0x38>
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	fe00e800 	.word	0xfe00e800

080044dc <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80044dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044de:	0004      	movs	r4, r0
 80044e0:	000d      	movs	r5, r1
 80044e2:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044e4:	2604      	movs	r6, #4
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	4233      	tst	r3, r6
 80044ec:	d111      	bne.n	8004512 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ee:	003a      	movs	r2, r7
 80044f0:	0029      	movs	r1, r5
 80044f2:	0020      	movs	r0, r4
 80044f4:	f7ff ffb4 	bl	8004460 <I2C_IsAcknowledgeFailed>
 80044f8:	2800      	cmp	r0, #0
 80044fa:	d11a      	bne.n	8004532 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044fc:	2120      	movs	r1, #32
 80044fe:	6823      	ldr	r3, [r4, #0]
 8004500:	699a      	ldr	r2, [r3, #24]
 8004502:	420a      	tst	r2, r1
 8004504:	d017      	beq.n	8004536 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004506:	699a      	ldr	r2, [r3, #24]
 8004508:	4232      	tst	r2, r6
 800450a:	d004      	beq.n	8004516 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 800450c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800450e:	2a00      	cmp	r2, #0
 8004510:	d001      	beq.n	8004516 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
        return HAL_OK;
 8004512:	2000      	movs	r0, #0
}
 8004514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004516:	2120      	movs	r1, #32
 8004518:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	480e      	ldr	r0, [pc, #56]	; (8004558 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>)
 800451e:	4002      	ands	r2, r0
 8004520:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8004522:	0022      	movs	r2, r4
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004524:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8004526:	3241      	adds	r2, #65	; 0x41
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004528:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800452a:	7011      	strb	r1, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800452c:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800452e:	7053      	strb	r3, [r2, #1]
      __HAL_UNLOCK(hi2c);
 8004530:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8004532:	2001      	movs	r0, #1
 8004534:	e7ee      	b.n	8004514 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004536:	f7ff fad5 	bl	8003ae4 <HAL_GetTick>
 800453a:	1bc0      	subs	r0, r0, r7
 800453c:	42a8      	cmp	r0, r5
 800453e:	d801      	bhi.n	8004544 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
 8004540:	2d00      	cmp	r5, #0
 8004542:	d1d0      	bne.n	80044e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004544:	2220      	movs	r2, #32
 8004546:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004548:	4313      	orrs	r3, r2
 800454a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800454c:	0023      	movs	r3, r4
 800454e:	3341      	adds	r3, #65	; 0x41
 8004550:	701a      	strb	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);
 8004552:	3440      	adds	r4, #64	; 0x40
 8004554:	2300      	movs	r3, #0
 8004556:	e7eb      	b.n	8004530 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8004558:	fe00e800 	.word	0xfe00e800

0800455c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800455c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455e:	0004      	movs	r4, r0
 8004560:	000d      	movs	r5, r1
 8004562:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004564:	2720      	movs	r7, #32
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	423b      	tst	r3, r7
 800456c:	d001      	beq.n	8004572 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800456e:	2000      	movs	r0, #0
}
 8004570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004572:	0032      	movs	r2, r6
 8004574:	0029      	movs	r1, r5
 8004576:	0020      	movs	r0, r4
 8004578:	f7ff ff72 	bl	8004460 <I2C_IsAcknowledgeFailed>
 800457c:	2800      	cmp	r0, #0
 800457e:	d113      	bne.n	80045a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004580:	f7ff fab0 	bl	8003ae4 <HAL_GetTick>
 8004584:	1b80      	subs	r0, r0, r6
 8004586:	42a8      	cmp	r0, r5
 8004588:	d801      	bhi.n	800458e <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 800458a:	2d00      	cmp	r5, #0
 800458c:	d1eb      	bne.n	8004566 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800458e:	2220      	movs	r2, #32
 8004590:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004592:	4313      	orrs	r3, r2
 8004594:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004596:	0023      	movs	r3, r4
 8004598:	3341      	adds	r3, #65	; 0x41
 800459a:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800459c:	0022      	movs	r2, r4
 800459e:	2300      	movs	r3, #0
 80045a0:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 80045a2:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a4:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 80045a6:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 80045a8:	2001      	movs	r0, #1
 80045aa:	e7e1      	b.n	8004570 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

080045ac <I2C_WaitOnFlagUntilTimeout>:
{
 80045ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ae:	0004      	movs	r4, r0
 80045b0:	000e      	movs	r6, r1
 80045b2:	0017      	movs	r7, r2
 80045b4:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045b6:	6822      	ldr	r2, [r4, #0]
 80045b8:	6993      	ldr	r3, [r2, #24]
 80045ba:	4033      	ands	r3, r6
 80045bc:	1b9b      	subs	r3, r3, r6
 80045be:	4259      	negs	r1, r3
 80045c0:	414b      	adcs	r3, r1
 80045c2:	42bb      	cmp	r3, r7
 80045c4:	d001      	beq.n	80045ca <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80045c6:	2000      	movs	r0, #0
 80045c8:	e017      	b.n	80045fa <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80045ca:	1c6b      	adds	r3, r5, #1
 80045cc:	d0f4      	beq.n	80045b8 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ce:	f7ff fa89 	bl	8003ae4 <HAL_GetTick>
 80045d2:	9b06      	ldr	r3, [sp, #24]
 80045d4:	1ac0      	subs	r0, r0, r3
 80045d6:	42a8      	cmp	r0, r5
 80045d8:	d801      	bhi.n	80045de <I2C_WaitOnFlagUntilTimeout+0x32>
 80045da:	2d00      	cmp	r5, #0
 80045dc:	d1eb      	bne.n	80045b6 <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045de:	2220      	movs	r2, #32
 80045e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 80045e2:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045e4:	4313      	orrs	r3, r2
 80045e6:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80045e8:	0023      	movs	r3, r4
 80045ea:	3341      	adds	r3, #65	; 0x41
 80045ec:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ee:	0022      	movs	r2, r4
 80045f0:	2300      	movs	r3, #0
 80045f2:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 80045f4:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f6:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 80045f8:	7023      	strb	r3, [r4, #0]
}
 80045fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080045fc <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80045fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fe:	0004      	movs	r4, r0
 8004600:	000d      	movs	r5, r1
 8004602:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004604:	2702      	movs	r7, #2
 8004606:	6823      	ldr	r3, [r4, #0]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	423b      	tst	r3, r7
 800460c:	d001      	beq.n	8004612 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 800460e:	2000      	movs	r0, #0
}
 8004610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004612:	0032      	movs	r2, r6
 8004614:	0029      	movs	r1, r5
 8004616:	0020      	movs	r0, r4
 8004618:	f7ff ff22 	bl	8004460 <I2C_IsAcknowledgeFailed>
 800461c:	2800      	cmp	r0, #0
 800461e:	d115      	bne.n	800464c <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8004620:	1c6b      	adds	r3, r5, #1
 8004622:	d0f0      	beq.n	8004606 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004624:	f7ff fa5e 	bl	8003ae4 <HAL_GetTick>
 8004628:	1b80      	subs	r0, r0, r6
 800462a:	42a8      	cmp	r0, r5
 800462c:	d801      	bhi.n	8004632 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 800462e:	2d00      	cmp	r5, #0
 8004630:	d1e9      	bne.n	8004606 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004632:	2220      	movs	r2, #32
 8004634:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004636:	4313      	orrs	r3, r2
 8004638:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800463a:	0023      	movs	r3, r4
 800463c:	3341      	adds	r3, #65	; 0x41
 800463e:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004640:	0022      	movs	r2, r4
 8004642:	2300      	movs	r3, #0
 8004644:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 8004646:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004648:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 800464a:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 800464c:	2001      	movs	r0, #1
 800464e:	e7df      	b.n	8004610 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

08004650 <I2C_RequestMemoryWrite>:
{
 8004650:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004652:	0014      	movs	r4, r2
 8004654:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004656:	b2da      	uxtb	r2, r3
 8004658:	4b15      	ldr	r3, [pc, #84]	; (80046b0 <I2C_RequestMemoryWrite+0x60>)
{
 800465a:	0005      	movs	r5, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	2380      	movs	r3, #128	; 0x80
 8004660:	045b      	lsls	r3, r3, #17
 8004662:	f7ff fee9 	bl	8004438 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004666:	9a07      	ldr	r2, [sp, #28]
 8004668:	9906      	ldr	r1, [sp, #24]
 800466a:	0028      	movs	r0, r5
 800466c:	f7ff ffc6 	bl	80045fc <I2C_WaitOnTXISFlagUntilTimeout>
 8004670:	2800      	cmp	r0, #0
 8004672:	d001      	beq.n	8004678 <I2C_RequestMemoryWrite+0x28>
    return HAL_ERROR;
 8004674:	2001      	movs	r0, #1
}
 8004676:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8004678:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800467a:	2e01      	cmp	r6, #1
 800467c:	d10d      	bne.n	800469a <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800467e:	b2e4      	uxtb	r4, r4
 8004680:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004682:	9b07      	ldr	r3, [sp, #28]
 8004684:	2200      	movs	r2, #0
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	2180      	movs	r1, #128	; 0x80
 800468a:	9b06      	ldr	r3, [sp, #24]
 800468c:	0028      	movs	r0, r5
 800468e:	f7ff ff8d 	bl	80045ac <I2C_WaitOnFlagUntilTimeout>
 8004692:	1e43      	subs	r3, r0, #1
 8004694:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8004696:	b2c0      	uxtb	r0, r0
 8004698:	e7ed      	b.n	8004676 <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800469a:	0a22      	lsrs	r2, r4, #8
 800469c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800469e:	9906      	ldr	r1, [sp, #24]
 80046a0:	9a07      	ldr	r2, [sp, #28]
 80046a2:	0028      	movs	r0, r5
 80046a4:	f7ff ffaa 	bl	80045fc <I2C_WaitOnTXISFlagUntilTimeout>
 80046a8:	2800      	cmp	r0, #0
 80046aa:	d1e3      	bne.n	8004674 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046ac:	682b      	ldr	r3, [r5, #0]
 80046ae:	e7e6      	b.n	800467e <I2C_RequestMemoryWrite+0x2e>
 80046b0:	80002000 	.word	0x80002000

080046b4 <HAL_I2C_Init>:
{
 80046b4:	b570      	push	{r4, r5, r6, lr}
 80046b6:	0004      	movs	r4, r0
    return HAL_ERROR;
 80046b8:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80046ba:	2c00      	cmp	r4, #0
 80046bc:	d03f      	beq.n	800473e <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046be:	0025      	movs	r5, r4
 80046c0:	3541      	adds	r5, #65	; 0x41
 80046c2:	782b      	ldrb	r3, [r5, #0]
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d105      	bne.n	80046d6 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 80046ca:	0022      	movs	r2, r4
 80046cc:	3240      	adds	r2, #64	; 0x40
 80046ce:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 80046d0:	0020      	movs	r0, r4
 80046d2:	f7fe f805 	bl	80026e0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80046d6:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80046d8:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80046da:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80046dc:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046de:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68a6      	ldr	r6, [r4, #8]
 80046e4:	438a      	bics	r2, r1
 80046e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80046e8:	6861      	ldr	r1, [r4, #4]
 80046ea:	4a1a      	ldr	r2, [pc, #104]	; (8004754 <HAL_I2C_Init+0xa0>)
 80046ec:	400a      	ands	r2, r1
 80046ee:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80046f0:	6899      	ldr	r1, [r3, #8]
 80046f2:	4a19      	ldr	r2, [pc, #100]	; (8004758 <HAL_I2C_Init+0xa4>)
 80046f4:	4011      	ands	r1, r2
 80046f6:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046f8:	2801      	cmp	r0, #1
 80046fa:	d121      	bne.n	8004740 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80046fc:	2180      	movs	r1, #128	; 0x80
 80046fe:	0209      	lsls	r1, r1, #8
 8004700:	4331      	orrs	r1, r6
 8004702:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004704:	6858      	ldr	r0, [r3, #4]
 8004706:	4915      	ldr	r1, [pc, #84]	; (800475c <HAL_I2C_Init+0xa8>)
 8004708:	4301      	orrs	r1, r0
 800470a:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800470c:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800470e:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004710:	400a      	ands	r2, r1
 8004712:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004714:	6961      	ldr	r1, [r4, #20]
 8004716:	6922      	ldr	r2, [r4, #16]
 8004718:	430a      	orrs	r2, r1
 800471a:	69a1      	ldr	r1, [r4, #24]
 800471c:	0209      	lsls	r1, r1, #8
 800471e:	430a      	orrs	r2, r1
 8004720:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004722:	6a21      	ldr	r1, [r4, #32]
 8004724:	69e2      	ldr	r2, [r4, #28]
 8004726:	430a      	orrs	r2, r1
 8004728:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800472a:	2201      	movs	r2, #1
 800472c:	6819      	ldr	r1, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8004732:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004734:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004736:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004738:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800473a:	3442      	adds	r4, #66	; 0x42
 800473c:	7020      	strb	r0, [r4, #0]
}
 800473e:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004740:	2184      	movs	r1, #132	; 0x84
 8004742:	0209      	lsls	r1, r1, #8
 8004744:	4331      	orrs	r1, r6
 8004746:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004748:	2802      	cmp	r0, #2
 800474a:	d1db      	bne.n	8004704 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800474c:	2180      	movs	r1, #128	; 0x80
 800474e:	0109      	lsls	r1, r1, #4
 8004750:	6059      	str	r1, [r3, #4]
 8004752:	e7d7      	b.n	8004704 <HAL_I2C_Init+0x50>
 8004754:	f0ffffff 	.word	0xf0ffffff
 8004758:	ffff7fff 	.word	0xffff7fff
 800475c:	02008000 	.word	0x02008000

08004760 <HAL_I2C_Master_Transmit>:
{
 8004760:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004762:	0005      	movs	r5, r0
{
 8004764:	b087      	sub	sp, #28
 8004766:	9103      	str	r1, [sp, #12]
 8004768:	9204      	str	r2, [sp, #16]
 800476a:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800476c:	3541      	adds	r5, #65	; 0x41
 800476e:	782b      	ldrb	r3, [r5, #0]
{
 8004770:	0004      	movs	r4, r0
    return HAL_BUSY;
 8004772:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004774:	2b20      	cmp	r3, #32
 8004776:	d114      	bne.n	80047a2 <HAL_I2C_Master_Transmit+0x42>
    __HAL_LOCK(hi2c);
 8004778:	0023      	movs	r3, r4
 800477a:	3340      	adds	r3, #64	; 0x40
 800477c:	781a      	ldrb	r2, [r3, #0]
 800477e:	2a01      	cmp	r2, #1
 8004780:	d00f      	beq.n	80047a2 <HAL_I2C_Master_Transmit+0x42>
 8004782:	2601      	movs	r6, #1
 8004784:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8004786:	f7ff f9ad 	bl	8003ae4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800478a:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 800478c:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800478e:	9000      	str	r0, [sp, #0]
 8004790:	2319      	movs	r3, #25
 8004792:	0032      	movs	r2, r6
 8004794:	0209      	lsls	r1, r1, #8
 8004796:	0020      	movs	r0, r4
 8004798:	f7ff ff08 	bl	80045ac <I2C_WaitOnFlagUntilTimeout>
 800479c:	2800      	cmp	r0, #0
 800479e:	d002      	beq.n	80047a6 <HAL_I2C_Master_Transmit+0x46>
      return HAL_ERROR;
 80047a0:	2001      	movs	r0, #1
}
 80047a2:	b007      	add	sp, #28
 80047a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80047a6:	2321      	movs	r3, #33	; 0x21
 80047a8:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80047aa:	0025      	movs	r5, r4
 80047ac:	3b11      	subs	r3, #17
 80047ae:	3542      	adds	r5, #66	; 0x42
 80047b0:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 80047b2:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047b4:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80047b6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80047b8:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 80047ba:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80047bc:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047be:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80047c0:	4b30      	ldr	r3, [pc, #192]	; (8004884 <HAL_I2C_Master_Transmit+0x124>)
 80047c2:	2aff      	cmp	r2, #255	; 0xff
 80047c4:	d921      	bls.n	800480a <HAL_I2C_Master_Transmit+0xaa>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80047c6:	22ff      	movs	r2, #255	; 0xff
 80047c8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	2380      	movs	r3, #128	; 0x80
 80047ce:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80047d0:	9903      	ldr	r1, [sp, #12]
 80047d2:	0020      	movs	r0, r4
 80047d4:	f7ff fe30 	bl	8004438 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047d8:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 80047da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047dc:	003a      	movs	r2, r7
 80047de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80047e0:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d119      	bne.n	800481a <HAL_I2C_Master_Transmit+0xba>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047e6:	f7ff feb9 	bl	800455c <I2C_WaitOnSTOPFlagUntilTimeout>
 80047ea:	2800      	cmp	r0, #0
 80047ec:	d1d8      	bne.n	80047a0 <HAL_I2C_Master_Transmit+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047ee:	2120      	movs	r1, #32
 80047f0:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80047f2:	4e25      	ldr	r6, [pc, #148]	; (8004888 <HAL_I2C_Master_Transmit+0x128>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047f4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	4032      	ands	r2, r6
 80047fa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80047fc:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 80047fe:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8004800:	3341      	adds	r3, #65	; 0x41
 8004802:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004804:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8004806:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8004808:	e7cb      	b.n	80047a2 <HAL_I2C_Master_Transmit+0x42>
      hi2c->XferSize = hi2c->XferCount;
 800480a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800480c:	b292      	uxth	r2, r2
 800480e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	2380      	movs	r3, #128	; 0x80
 8004814:	b2d2      	uxtb	r2, r2
 8004816:	049b      	lsls	r3, r3, #18
 8004818:	e7da      	b.n	80047d0 <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800481a:	f7ff feef 	bl	80045fc <I2C_WaitOnTXISFlagUntilTimeout>
 800481e:	2800      	cmp	r0, #0
 8004820:	d1be      	bne.n	80047a0 <HAL_I2C_Master_Transmit+0x40>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004822:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004824:	6822      	ldr	r2, [r4, #0]
 8004826:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8004828:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800482a:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800482c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800482e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004830:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004832:	3b01      	subs	r3, #1
 8004834:	b29b      	uxth	r3, r3
 8004836:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004838:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800483a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800483c:	b292      	uxth	r2, r2
 800483e:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0ca      	beq.n	80047da <HAL_I2C_Master_Transmit+0x7a>
 8004844:	2a00      	cmp	r2, #0
 8004846:	d1c8      	bne.n	80047da <HAL_I2C_Master_Transmit+0x7a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004848:	9700      	str	r7, [sp, #0]
 800484a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800484c:	2180      	movs	r1, #128	; 0x80
 800484e:	0020      	movs	r0, r4
 8004850:	f7ff feac 	bl	80045ac <I2C_WaitOnFlagUntilTimeout>
 8004854:	2800      	cmp	r0, #0
 8004856:	d1a3      	bne.n	80047a0 <HAL_I2C_Master_Transmit+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004858:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800485a:	2bff      	cmp	r3, #255	; 0xff
 800485c:	d909      	bls.n	8004872 <HAL_I2C_Master_Transmit+0x112>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800485e:	2380      	movs	r3, #128	; 0x80
 8004860:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004862:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004864:	045b      	lsls	r3, r3, #17
 8004866:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004868:	9903      	ldr	r1, [sp, #12]
 800486a:	0020      	movs	r0, r4
 800486c:	f7ff fde4 	bl	8004438 <I2C_TransferConfig>
 8004870:	e7b3      	b.n	80047da <HAL_I2C_Master_Transmit+0x7a>
 8004872:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8004874:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004876:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8004878:	b292      	uxth	r2, r2
 800487a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	9000      	str	r0, [sp, #0]
 8004880:	e7f2      	b.n	8004868 <HAL_I2C_Master_Transmit+0x108>
 8004882:	46c0      	nop			; (mov r8, r8)
 8004884:	80002000 	.word	0x80002000
 8004888:	fe00e800 	.word	0xfe00e800

0800488c <HAL_I2C_Master_Receive>:
{
 800488c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800488e:	0005      	movs	r5, r0
{
 8004890:	b087      	sub	sp, #28
 8004892:	9103      	str	r1, [sp, #12]
 8004894:	9204      	str	r2, [sp, #16]
 8004896:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004898:	3541      	adds	r5, #65	; 0x41
 800489a:	782b      	ldrb	r3, [r5, #0]
{
 800489c:	0004      	movs	r4, r0
    return HAL_BUSY;
 800489e:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80048a0:	2b20      	cmp	r3, #32
 80048a2:	d114      	bne.n	80048ce <HAL_I2C_Master_Receive+0x42>
    __HAL_LOCK(hi2c);
 80048a4:	0023      	movs	r3, r4
 80048a6:	3340      	adds	r3, #64	; 0x40
 80048a8:	781a      	ldrb	r2, [r3, #0]
 80048aa:	2a01      	cmp	r2, #1
 80048ac:	d00f      	beq.n	80048ce <HAL_I2C_Master_Receive+0x42>
 80048ae:	2601      	movs	r6, #1
 80048b0:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 80048b2:	f7ff f917 	bl	8003ae4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80048b6:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 80048b8:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80048ba:	9000      	str	r0, [sp, #0]
 80048bc:	2319      	movs	r3, #25
 80048be:	0032      	movs	r2, r6
 80048c0:	0209      	lsls	r1, r1, #8
 80048c2:	0020      	movs	r0, r4
 80048c4:	f7ff fe72 	bl	80045ac <I2C_WaitOnFlagUntilTimeout>
 80048c8:	2800      	cmp	r0, #0
 80048ca:	d002      	beq.n	80048d2 <HAL_I2C_Master_Receive+0x46>
      return HAL_ERROR;
 80048cc:	2001      	movs	r0, #1
}
 80048ce:	b007      	add	sp, #28
 80048d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80048d2:	2322      	movs	r3, #34	; 0x22
 80048d4:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80048d6:	0025      	movs	r5, r4
 80048d8:	3b12      	subs	r3, #18
 80048da:	3542      	adds	r5, #66	; 0x42
 80048dc:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 80048de:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048e0:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80048e2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80048e4:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 80048e6:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80048e8:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048ea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80048ec:	4b30      	ldr	r3, [pc, #192]	; (80049b0 <HAL_I2C_Master_Receive+0x124>)
 80048ee:	2aff      	cmp	r2, #255	; 0xff
 80048f0:	d921      	bls.n	8004936 <HAL_I2C_Master_Receive+0xaa>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80048f2:	22ff      	movs	r2, #255	; 0xff
 80048f4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	2380      	movs	r3, #128	; 0x80
 80048fa:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80048fc:	9903      	ldr	r1, [sp, #12]
 80048fe:	0020      	movs	r0, r4
 8004900:	f7ff fd9a 	bl	8004438 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004904:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 8004906:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004908:	003a      	movs	r2, r7
 800490a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800490c:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 800490e:	2b00      	cmp	r3, #0
 8004910:	d119      	bne.n	8004946 <HAL_I2C_Master_Receive+0xba>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004912:	f7ff fe23 	bl	800455c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004916:	2800      	cmp	r0, #0
 8004918:	d1d8      	bne.n	80048cc <HAL_I2C_Master_Receive+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800491a:	2120      	movs	r1, #32
 800491c:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800491e:	4e25      	ldr	r6, [pc, #148]	; (80049b4 <HAL_I2C_Master_Receive+0x128>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004920:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	4032      	ands	r2, r6
 8004926:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004928:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 800492a:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800492c:	3341      	adds	r3, #65	; 0x41
 800492e:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004930:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8004932:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8004934:	e7cb      	b.n	80048ce <HAL_I2C_Master_Receive+0x42>
      hi2c->XferSize = hi2c->XferCount;
 8004936:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004938:	b292      	uxth	r2, r2
 800493a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	2380      	movs	r3, #128	; 0x80
 8004940:	b2d2      	uxtb	r2, r2
 8004942:	049b      	lsls	r3, r3, #18
 8004944:	e7da      	b.n	80048fc <HAL_I2C_Master_Receive+0x70>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004946:	f7ff fdc9 	bl	80044dc <I2C_WaitOnRXNEFlagUntilTimeout>
 800494a:	2800      	cmp	r0, #0
 800494c:	d1be      	bne.n	80048cc <HAL_I2C_Master_Receive+0x40>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800494e:	6823      	ldr	r3, [r4, #0]
 8004950:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8004956:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004958:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800495a:	3301      	adds	r3, #1
 800495c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800495e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004960:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8004962:	3b01      	subs	r3, #1
 8004964:	b29b      	uxth	r3, r3
 8004966:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004968:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800496a:	b292      	uxth	r2, r2
 800496c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0c9      	beq.n	8004906 <HAL_I2C_Master_Receive+0x7a>
 8004972:	2a00      	cmp	r2, #0
 8004974:	d1c7      	bne.n	8004906 <HAL_I2C_Master_Receive+0x7a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004976:	9700      	str	r7, [sp, #0]
 8004978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800497a:	2180      	movs	r1, #128	; 0x80
 800497c:	0020      	movs	r0, r4
 800497e:	f7ff fe15 	bl	80045ac <I2C_WaitOnFlagUntilTimeout>
 8004982:	2800      	cmp	r0, #0
 8004984:	d1a2      	bne.n	80048cc <HAL_I2C_Master_Receive+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004986:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004988:	2bff      	cmp	r3, #255	; 0xff
 800498a:	d909      	bls.n	80049a0 <HAL_I2C_Master_Receive+0x114>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800498c:	2380      	movs	r3, #128	; 0x80
 800498e:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004990:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004992:	045b      	lsls	r3, r3, #17
 8004994:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004996:	9903      	ldr	r1, [sp, #12]
 8004998:	0020      	movs	r0, r4
 800499a:	f7ff fd4d 	bl	8004438 <I2C_TransferConfig>
 800499e:	e7b2      	b.n	8004906 <HAL_I2C_Master_Receive+0x7a>
 80049a0:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 80049a2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80049a4:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 80049a6:	b292      	uxth	r2, r2
 80049a8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	9000      	str	r0, [sp, #0]
 80049ae:	e7f2      	b.n	8004996 <HAL_I2C_Master_Receive+0x10a>
 80049b0:	80002400 	.word	0x80002400
 80049b4:	fe00e800 	.word	0xfe00e800

080049b8 <HAL_I2C_Mem_Write>:
{
 80049b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80049ba:	0007      	movs	r7, r0
{
 80049bc:	b089      	sub	sp, #36	; 0x24
 80049be:	9307      	str	r3, [sp, #28]
 80049c0:	ab0e      	add	r3, sp, #56	; 0x38
 80049c2:	9206      	str	r2, [sp, #24]
 80049c4:	cb04      	ldmia	r3!, {r2}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80049c6:	3741      	adds	r7, #65	; 0x41
{
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	9204      	str	r2, [sp, #16]
 80049cc:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80049ce:	783b      	ldrb	r3, [r7, #0]
{
 80049d0:	0004      	movs	r4, r0
 80049d2:	000d      	movs	r5, r1
    return HAL_BUSY;
 80049d4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80049d6:	2b20      	cmp	r3, #32
 80049d8:	d108      	bne.n	80049ec <HAL_I2C_Mem_Write+0x34>
    if ((pData == NULL) || (Size == 0U))
 80049da:	2a00      	cmp	r2, #0
 80049dc:	d002      	beq.n	80049e4 <HAL_I2C_Mem_Write+0x2c>
 80049de:	9b05      	ldr	r3, [sp, #20]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d105      	bne.n	80049f0 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80049e4:	2380      	movs	r3, #128	; 0x80
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80049ea:	2001      	movs	r0, #1
}
 80049ec:	b009      	add	sp, #36	; 0x24
 80049ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80049f0:	0023      	movs	r3, r4
 80049f2:	3340      	adds	r3, #64	; 0x40
 80049f4:	9303      	str	r3, [sp, #12]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d0f7      	beq.n	80049ec <HAL_I2C_Mem_Write+0x34>
 80049fc:	2201      	movs	r2, #1
 80049fe:	9b03      	ldr	r3, [sp, #12]
 8004a00:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004a02:	f7ff f86f 	bl	8003ae4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a06:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8004a08:	9002      	str	r0, [sp, #8]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a0a:	9000      	str	r0, [sp, #0]
 8004a0c:	2319      	movs	r3, #25
 8004a0e:	2201      	movs	r2, #1
 8004a10:	0209      	lsls	r1, r1, #8
 8004a12:	0020      	movs	r0, r4
 8004a14:	f7ff fdca 	bl	80045ac <I2C_WaitOnFlagUntilTimeout>
 8004a18:	1e06      	subs	r6, r0, #0
 8004a1a:	d1e6      	bne.n	80049ea <HAL_I2C_Mem_Write+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a1c:	2321      	movs	r3, #33	; 0x21
 8004a1e:	703b      	strb	r3, [r7, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a20:	0027      	movs	r7, r4
 8004a22:	331f      	adds	r3, #31
 8004a24:	3742      	adds	r7, #66	; 0x42
 8004a26:	703b      	strb	r3, [r7, #0]
    hi2c->pBuffPtr  = pData;
 8004a28:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a2a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004a2c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a2e:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 8004a30:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8004a32:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a34:	9b02      	ldr	r3, [sp, #8]
 8004a36:	9a06      	ldr	r2, [sp, #24]
 8004a38:	9301      	str	r3, [sp, #4]
 8004a3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004a3c:	0029      	movs	r1, r5
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	0020      	movs	r0, r4
 8004a42:	9b07      	ldr	r3, [sp, #28]
 8004a44:	f7ff fe04 	bl	8004650 <I2C_RequestMemoryWrite>
 8004a48:	2800      	cmp	r0, #0
 8004a4a:	d002      	beq.n	8004a52 <HAL_I2C_Mem_Write+0x9a>
      __HAL_UNLOCK(hi2c);
 8004a4c:	9b03      	ldr	r3, [sp, #12]
 8004a4e:	701e      	strb	r6, [r3, #0]
 8004a50:	e7cb      	b.n	80049ea <HAL_I2C_Mem_Write+0x32>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a52:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004a54:	2bff      	cmp	r3, #255	; 0xff
 8004a56:	d953      	bls.n	8004b00 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a58:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a5a:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a5c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a5e:	045b      	lsls	r3, r3, #17
 8004a60:	9000      	str	r0, [sp, #0]
 8004a62:	0029      	movs	r1, r5
 8004a64:	0020      	movs	r0, r4
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a66:	2680      	movs	r6, #128	; 0x80
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a68:	f7ff fce6 	bl	8004438 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a6c:	04b6      	lsls	r6, r6, #18
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a6e:	9a02      	ldr	r2, [sp, #8]
 8004a70:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004a72:	0020      	movs	r0, r4
 8004a74:	f7ff fdc2 	bl	80045fc <I2C_WaitOnTXISFlagUntilTimeout>
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	d1b6      	bne.n	80049ea <HAL_I2C_Mem_Write+0x32>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a7e:	6822      	ldr	r2, [r4, #0]
 8004a80:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8004a82:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a84:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004a86:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004a88:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004a8a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004a92:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a94:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004a96:	b292      	uxth	r2, r2
 8004a98:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d017      	beq.n	8004ace <HAL_I2C_Mem_Write+0x116>
 8004a9e:	2a00      	cmp	r2, #0
 8004aa0:	d115      	bne.n	8004ace <HAL_I2C_Mem_Write+0x116>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004aa2:	9b02      	ldr	r3, [sp, #8]
 8004aa4:	2180      	movs	r1, #128	; 0x80
 8004aa6:	9300      	str	r3, [sp, #0]
 8004aa8:	0020      	movs	r0, r4
 8004aaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004aac:	f7ff fd7e 	bl	80045ac <I2C_WaitOnFlagUntilTimeout>
 8004ab0:	2800      	cmp	r0, #0
 8004ab2:	d19a      	bne.n	80049ea <HAL_I2C_Mem_Write+0x32>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ab4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004ab6:	2bff      	cmp	r3, #255	; 0xff
 8004ab8:	d92a      	bls.n	8004b10 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004aba:	23ff      	movs	r3, #255	; 0xff
 8004abc:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004abe:	2380      	movs	r3, #128	; 0x80
 8004ac0:	22ff      	movs	r2, #255	; 0xff
 8004ac2:	9000      	str	r0, [sp, #0]
 8004ac4:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004ac6:	0029      	movs	r1, r5
 8004ac8:	0020      	movs	r0, r4
 8004aca:	f7ff fcb5 	bl	8004438 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004ace:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1cc      	bne.n	8004a6e <HAL_I2C_Mem_Write+0xb6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ad4:	9a02      	ldr	r2, [sp, #8]
 8004ad6:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004ad8:	0020      	movs	r0, r4
 8004ada:	f7ff fd3f 	bl	800455c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ade:	2800      	cmp	r0, #0
 8004ae0:	d000      	beq.n	8004ae4 <HAL_I2C_Mem_Write+0x12c>
 8004ae2:	e782      	b.n	80049ea <HAL_I2C_Mem_Write+0x32>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ae4:	2120      	movs	r1, #32
 8004ae6:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8004ae8:	4d0d      	ldr	r5, [pc, #52]	; (8004b20 <HAL_I2C_Mem_Write+0x168>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004aea:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	402a      	ands	r2, r5
 8004af0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004af2:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8004af4:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8004af6:	3341      	adds	r3, #65	; 0x41
 8004af8:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004afa:	7038      	strb	r0, [r7, #0]
    __HAL_UNLOCK(hi2c);
 8004afc:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8004afe:	e775      	b.n	80049ec <HAL_I2C_Mem_Write+0x34>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b00:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 8004b02:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b04:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 8004b06:	b292      	uxth	r2, r2
 8004b08:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b0a:	b2d2      	uxtb	r2, r2
 8004b0c:	9000      	str	r0, [sp, #0]
 8004b0e:	e7a8      	b.n	8004a62 <HAL_I2C_Mem_Write+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8004b10:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b12:	0033      	movs	r3, r6
          hi2c->XferSize = hi2c->XferCount;
 8004b14:	b292      	uxth	r2, r2
 8004b16:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b18:	b2d2      	uxtb	r2, r2
 8004b1a:	9000      	str	r0, [sp, #0]
 8004b1c:	e7d3      	b.n	8004ac6 <HAL_I2C_Mem_Write+0x10e>
 8004b1e:	46c0      	nop			; (mov r8, r8)
 8004b20:	fe00e800 	.word	0xfe00e800

08004b24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b24:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b26:	0004      	movs	r4, r0
 8004b28:	3441      	adds	r4, #65	; 0x41
 8004b2a:	7822      	ldrb	r2, [r4, #0]
{
 8004b2c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b2e:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8004b30:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b32:	2a20      	cmp	r2, #32
 8004b34:	d118      	bne.n	8004b68 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8004b36:	001d      	movs	r5, r3
 8004b38:	3540      	adds	r5, #64	; 0x40
 8004b3a:	782e      	ldrb	r6, [r5, #0]
 8004b3c:	2e01      	cmp	r6, #1
 8004b3e:	d013      	beq.n	8004b68 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8004b40:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b42:	3022      	adds	r0, #34	; 0x22
 8004b44:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8004b46:	681e      	ldr	r6, [r3, #0]
 8004b48:	3823      	subs	r0, #35	; 0x23
 8004b4a:	4386      	bics	r6, r0
 8004b4c:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b4e:	681e      	ldr	r6, [r3, #0]
 8004b50:	4f06      	ldr	r7, [pc, #24]	; (8004b6c <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8004b52:	403e      	ands	r6, r7
 8004b54:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b56:	681e      	ldr	r6, [r3, #0]
 8004b58:	4331      	orrs	r1, r6
 8004b5a:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8004b5c:	6819      	ldr	r1, [r3, #0]
 8004b5e:	4308      	orrs	r0, r1
 8004b60:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8004b62:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004b64:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8004b66:	7028      	strb	r0, [r5, #0]
  }
}
 8004b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b6a:	46c0      	nop			; (mov r8, r8)
 8004b6c:	ffffefff 	.word	0xffffefff

08004b70 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b70:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b72:	0005      	movs	r5, r0
 8004b74:	3541      	adds	r5, #65	; 0x41
 8004b76:	782a      	ldrb	r2, [r5, #0]
{
 8004b78:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b7a:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8004b7c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b7e:	2a20      	cmp	r2, #32
 8004b80:	d117      	bne.n	8004bb2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8004b82:	001c      	movs	r4, r3
 8004b84:	3440      	adds	r4, #64	; 0x40
 8004b86:	7826      	ldrb	r6, [r4, #0]
 8004b88:	2e01      	cmp	r6, #1
 8004b8a:	d012      	beq.n	8004bb2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8004b8c:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b8e:	3022      	adds	r0, #34	; 0x22
 8004b90:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8004b92:	681e      	ldr	r6, [r3, #0]
 8004b94:	3823      	subs	r0, #35	; 0x23
 8004b96:	4386      	bics	r6, r0
 8004b98:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8004b9a:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8004b9c:	4f05      	ldr	r7, [pc, #20]	; (8004bb4 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8004b9e:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8004ba0:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8004ba2:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8004ba4:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8004ba6:	6819      	ldr	r1, [r3, #0]
 8004ba8:	4308      	orrs	r0, r1
 8004baa:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8004bac:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004bae:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8004bb0:	7020      	strb	r0, [r4, #0]
  }
}
 8004bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bb4:	fffff0ff 	.word	0xfffff0ff

08004bb8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004bb8:	b570      	push	{r4, r5, r6, lr}
 8004bba:	0004      	movs	r4, r0
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
  {
    return HAL_ERROR;
 8004bbc:	2001      	movs	r0, #1
  if (hiwdg == NULL)
 8004bbe:	2c00      	cmp	r4, #0
 8004bc0:	d014      	beq.n	8004bec <HAL_IWDG_Init+0x34>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	4a0f      	ldr	r2, [pc, #60]	; (8004c04 <HAL_IWDG_Init+0x4c>)
 8004bc6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004bc8:	4a0f      	ldr	r2, [pc, #60]	; (8004c08 <HAL_IWDG_Init+0x50>)
 8004bca:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004bcc:	6862      	ldr	r2, [r4, #4]
 8004bce:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004bd0:	68a2      	ldr	r2, [r4, #8]
 8004bd2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004bd4:	f7fe ff86 	bl	8003ae4 <HAL_GetTick>
 8004bd8:	0005      	movs	r5, r0

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	68d8      	ldr	r0, [r3, #12]
 8004bde:	2800      	cmp	r0, #0
 8004be0:	d105      	bne.n	8004bee <HAL_IWDG_Init+0x36>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8004be2:	6919      	ldr	r1, [r3, #16]
 8004be4:	68e2      	ldr	r2, [r4, #12]
 8004be6:	4291      	cmp	r1, r2
 8004be8:	d008      	beq.n	8004bfc <HAL_IWDG_Init+0x44>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8004bea:	611a      	str	r2, [r3, #16]
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
}
 8004bec:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004bee:	f7fe ff79 	bl	8003ae4 <HAL_GetTick>
 8004bf2:	1b40      	subs	r0, r0, r5
 8004bf4:	2826      	cmp	r0, #38	; 0x26
 8004bf6:	d9f0      	bls.n	8004bda <HAL_IWDG_Init+0x22>
      return HAL_TIMEOUT;
 8004bf8:	2003      	movs	r0, #3
 8004bfa:	e7f7      	b.n	8004bec <HAL_IWDG_Init+0x34>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004bfc:	4a03      	ldr	r2, [pc, #12]	; (8004c0c <HAL_IWDG_Init+0x54>)
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	e7f4      	b.n	8004bec <HAL_IWDG_Init+0x34>
 8004c02:	46c0      	nop			; (mov r8, r8)
 8004c04:	0000cccc 	.word	0x0000cccc
 8004c08:	00005555 	.word	0x00005555
 8004c0c:	0000aaaa 	.word	0x0000aaaa

08004c10 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004c10:	6803      	ldr	r3, [r0, #0]
 8004c12:	4a02      	ldr	r2, [pc, #8]	; (8004c1c <HAL_IWDG_Refresh+0xc>)

  /* Return function status */
  return HAL_OK;
}
 8004c14:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004c16:	601a      	str	r2, [r3, #0]
}
 8004c18:	4770      	bx	lr
 8004c1a:	46c0      	nop			; (mov r8, r8)
 8004c1c:	0000aaaa 	.word	0x0000aaaa

08004c20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c20:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004c22:	4c14      	ldr	r4, [pc, #80]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8004c24:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004c26:	2210      	movs	r2, #16
 8004c28:	0021      	movs	r1, r4
 8004c2a:	4668      	mov	r0, sp
 8004c2c:	f000 fe8c 	bl	8005948 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004c30:	0021      	movs	r1, r4
 8004c32:	ad04      	add	r5, sp, #16
 8004c34:	2210      	movs	r2, #16
 8004c36:	3110      	adds	r1, #16
 8004c38:	0028      	movs	r0, r5
 8004c3a:	f000 fe85 	bl	8005948 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c3e:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8004c40:	4e0d      	ldr	r6, [pc, #52]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x58>)
 8004c42:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004c44:	401a      	ands	r2, r3
 8004c46:	2a08      	cmp	r2, #8
 8004c48:	d111      	bne.n	8004c6e <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004c4a:	200f      	movs	r0, #15
 8004c4c:	466a      	mov	r2, sp
 8004c4e:	0c99      	lsrs	r1, r3, #18
 8004c50:	4001      	ands	r1, r0
 8004c52:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004c54:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8004c56:	4002      	ands	r2, r0
 8004c58:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c5a:	03db      	lsls	r3, r3, #15
 8004c5c:	d505      	bpl.n	8004c6a <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c5e:	4807      	ldr	r0, [pc, #28]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x5c>)
 8004c60:	f7fb fa66 	bl	8000130 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004c64:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004c66:	b008      	add	sp, #32
 8004c68:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004c6a:	4805      	ldr	r0, [pc, #20]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x60>)
 8004c6c:	e7fa      	b.n	8004c64 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8004c6e:	4803      	ldr	r0, [pc, #12]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8004c70:	e7f9      	b.n	8004c66 <HAL_RCC_GetSysClockFreq+0x46>
 8004c72:	46c0      	nop			; (mov r8, r8)
 8004c74:	08005984 	.word	0x08005984
 8004c78:	40021000 	.word	0x40021000
 8004c7c:	007a1200 	.word	0x007a1200
 8004c80:	003d0900 	.word	0x003d0900

08004c84 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004c84:	4b04      	ldr	r3, [pc, #16]	; (8004c98 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004c86:	4a05      	ldr	r2, [pc, #20]	; (8004c9c <HAL_RCC_GetPCLK1Freq+0x18>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	055b      	lsls	r3, r3, #21
 8004c8c:	0f5b      	lsrs	r3, r3, #29
 8004c8e:	5cd3      	ldrb	r3, [r2, r3]
 8004c90:	4a03      	ldr	r2, [pc, #12]	; (8004ca0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004c92:	6810      	ldr	r0, [r2, #0]
 8004c94:	40d8      	lsrs	r0, r3
}    
 8004c96:	4770      	bx	lr
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	08005b04 	.word	0x08005b04
 8004ca0:	20000004 	.word	0x20000004

08004ca4 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004ca4:	21a0      	movs	r1, #160	; 0xa0
 8004ca6:	6802      	ldr	r2, [r0, #0]
{
 8004ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004caa:	68d3      	ldr	r3, [r2, #12]
{
 8004cac:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004cae:	438b      	bics	r3, r1
 8004cb0:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004cb2:	f7fe ff17 	bl	8003ae4 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004cb6:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8004cb8:	0006      	movs	r6, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004cba:	2520      	movs	r5, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004cbc:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004cbe:	6823      	ldr	r3, [r4, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	422b      	tst	r3, r5
 8004cc4:	d001      	beq.n	8004cca <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8004cc6:	2000      	movs	r0, #0
}
 8004cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004cca:	f7fe ff0b 	bl	8003ae4 <HAL_GetTick>
 8004cce:	1b80      	subs	r0, r0, r6
 8004cd0:	42b8      	cmp	r0, r7
 8004cd2:	d9f4      	bls.n	8004cbe <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8004cd4:	2003      	movs	r0, #3
 8004cd6:	e7f7      	b.n	8004cc8 <HAL_RTC_WaitForSynchro+0x24>

08004cd8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004cda:	2440      	movs	r4, #64	; 0x40
 8004cdc:	6803      	ldr	r3, [r0, #0]
{
 8004cde:	0005      	movs	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004ce0:	68da      	ldr	r2, [r3, #12]
 8004ce2:	4222      	tst	r2, r4
 8004ce4:	d001      	beq.n	8004cea <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8004ce6:	2000      	movs	r0, #0
}
 8004ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004cea:	2201      	movs	r2, #1
 8004cec:	4252      	negs	r2, r2
 8004cee:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8004cf0:	f7fe fef8 	bl	8003ae4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004cf4:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8004cf6:	0006      	movs	r6, r0
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004cf8:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004cfa:	682b      	ldr	r3, [r5, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	4223      	tst	r3, r4
 8004d00:	d1f1      	bne.n	8004ce6 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d02:	f7fe feef 	bl	8003ae4 <HAL_GetTick>
 8004d06:	1b80      	subs	r0, r0, r6
 8004d08:	42b8      	cmp	r0, r7
 8004d0a:	d9f6      	bls.n	8004cfa <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8004d0c:	2003      	movs	r0, #3
 8004d0e:	e7eb      	b.n	8004ce8 <RTC_EnterInitMode+0x10>

08004d10 <HAL_RTC_Init>:
{
 8004d10:	b570      	push	{r4, r5, r6, lr}
 8004d12:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004d14:	2501      	movs	r5, #1
  if (hrtc == NULL)
 8004d16:	2800      	cmp	r0, #0
 8004d18:	d018      	beq.n	8004d4c <HAL_RTC_Init+0x3c>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004d1a:	7f43      	ldrb	r3, [r0, #29]
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d102      	bne.n	8004d28 <HAL_RTC_Init+0x18>
    hrtc->Lock = HAL_UNLOCKED;
 8004d22:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8004d24:	f7fe f806 	bl	8002d34 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d28:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d2a:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d2c:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d2e:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d30:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d32:	625a      	str	r2, [r3, #36]	; 0x24
 8004d34:	3a77      	subs	r2, #119	; 0x77
 8004d36:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d38:	f7ff ffce 	bl	8004cd8 <RTC_EnterInitMode>
 8004d3c:	6823      	ldr	r3, [r4, #0]
 8004d3e:	1e05      	subs	r5, r0, #0
 8004d40:	d006      	beq.n	8004d50 <HAL_RTC_Init+0x40>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d42:	22ff      	movs	r2, #255	; 0xff
 8004d44:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d46:	2304      	movs	r3, #4
        return HAL_ERROR;
 8004d48:	2501      	movs	r5, #1
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d4a:	7763      	strb	r3, [r4, #29]
}
 8004d4c:	0028      	movs	r0, r5
 8004d4e:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004d50:	689a      	ldr	r2, [r3, #8]
 8004d52:	4917      	ldr	r1, [pc, #92]	; (8004db0 <HAL_RTC_Init+0xa0>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004d54:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004d56:	400a      	ands	r2, r1
 8004d58:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004d5a:	6862      	ldr	r2, [r4, #4]
 8004d5c:	6899      	ldr	r1, [r3, #8]
 8004d5e:	4302      	orrs	r2, r0
 8004d60:	6960      	ldr	r0, [r4, #20]
 8004d62:	4302      	orrs	r2, r0
 8004d64:	430a      	orrs	r2, r1
 8004d66:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004d68:	68e2      	ldr	r2, [r4, #12]
 8004d6a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004d6c:	68a2      	ldr	r2, [r4, #8]
 8004d6e:	6919      	ldr	r1, [r3, #16]
 8004d70:	0412      	lsls	r2, r2, #16
 8004d72:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004d74:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004d76:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	438a      	bics	r2, r1
 8004d7c:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	069b      	lsls	r3, r3, #26
 8004d82:	d406      	bmi.n	8004d92 <HAL_RTC_Init+0x82>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d84:	0020      	movs	r0, r4
 8004d86:	f7ff ff8d 	bl	8004ca4 <HAL_RTC_WaitForSynchro>
 8004d8a:	2800      	cmp	r0, #0
 8004d8c:	d001      	beq.n	8004d92 <HAL_RTC_Init+0x82>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	e7d7      	b.n	8004d42 <HAL_RTC_Init+0x32>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	4907      	ldr	r1, [pc, #28]	; (8004db4 <HAL_RTC_Init+0xa4>)
 8004d96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d98:	400a      	ands	r2, r1
 8004d9a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d9e:	69a1      	ldr	r1, [r4, #24]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004da4:	22ff      	movs	r2, #255	; 0xff
 8004da6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8004da8:	2301      	movs	r3, #1
 8004daa:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8004dac:	e7ce      	b.n	8004d4c <HAL_RTC_Init+0x3c>
 8004dae:	46c0      	nop			; (mov r8, r8)
 8004db0:	ff8fffbf 	.word	0xff8fffbf
 8004db4:	fffbffff 	.word	0xfffbffff

08004db8 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8004db8:	2300      	movs	r3, #0

  while (Value >= 10U)
 8004dba:	2809      	cmp	r0, #9
 8004dbc:	d803      	bhi.n	8004dc6 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	4318      	orrs	r0, r3
 8004dc2:	b2c0      	uxtb	r0, r0
}
 8004dc4:	4770      	bx	lr
    Value -= 10U;
 8004dc6:	380a      	subs	r0, #10
    bcdhigh++;
 8004dc8:	3301      	adds	r3, #1
    Value -= 10U;
 8004dca:	b2c0      	uxtb	r0, r0
 8004dcc:	e7f5      	b.n	8004dba <RTC_ByteToBcd2+0x2>
	...

08004dd0 <HAL_RTC_SetTime>:
{
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dd4:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8004dd6:	7f01      	ldrb	r1, [r0, #28]
{
 8004dd8:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8004dda:	001e      	movs	r6, r3
 8004ddc:	2901      	cmp	r1, #1
 8004dde:	d033      	beq.n	8004e48 <HAL_RTC_SetTime+0x78>
 8004de0:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004de2:	7743      	strb	r3, [r0, #29]
  __HAL_LOCK(hrtc);
 8004de4:	7701      	strb	r1, [r0, #28]
 8004de6:	6806      	ldr	r6, [r0, #0]
 8004de8:	78ab      	ldrb	r3, [r5, #2]
 8004dea:	313f      	adds	r1, #63	; 0x3f
 8004dec:	9300      	str	r3, [sp, #0]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004dee:	68b3      	ldr	r3, [r6, #8]
 8004df0:	7828      	ldrb	r0, [r5, #0]
 8004df2:	786f      	ldrb	r7, [r5, #1]
 8004df4:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 8004df6:	2a00      	cmp	r2, #0
 8004df8:	d128      	bne.n	8004e4c <HAL_RTC_SetTime+0x7c>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d100      	bne.n	8004e00 <HAL_RTC_SetTime+0x30>
      sTime->TimeFormat = 0x00U;
 8004dfe:	70eb      	strb	r3, [r5, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004e00:	f7ff ffda 	bl	8004db8 <RTC_ByteToBcd2>
 8004e04:	9001      	str	r0, [sp, #4]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004e06:	0038      	movs	r0, r7
 8004e08:	f7ff ffd6 	bl	8004db8 <RTC_ByteToBcd2>
 8004e0c:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004e0e:	9800      	ldr	r0, [sp, #0]
 8004e10:	f7ff ffd2 	bl	8004db8 <RTC_ByteToBcd2>
 8004e14:	0003      	movs	r3, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004e16:	78e8      	ldrb	r0, [r5, #3]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004e18:	023f      	lsls	r7, r7, #8
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004e1a:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004e1c:	4318      	orrs	r0, r3
 8004e1e:	9b01      	ldr	r3, [sp, #4]
 8004e20:	041b      	lsls	r3, r3, #16
 8004e22:	4318      	orrs	r0, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e24:	23ca      	movs	r3, #202	; 0xca
 8004e26:	6273      	str	r3, [r6, #36]	; 0x24
 8004e28:	3b77      	subs	r3, #119	; 0x77
 8004e2a:	6273      	str	r3, [r6, #36]	; 0x24
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004e2c:	4307      	orrs	r7, r0
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004e2e:	0020      	movs	r0, r4
 8004e30:	f7ff ff52 	bl	8004cd8 <RTC_EnterInitMode>
 8004e34:	6823      	ldr	r3, [r4, #0]
 8004e36:	1e06      	subs	r6, r0, #0
 8004e38:	d013      	beq.n	8004e62 <HAL_RTC_SetTime+0x92>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e3a:	22ff      	movs	r2, #255	; 0xff
 8004e3c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004e3e:	2304      	movs	r3, #4
 8004e40:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8004e42:	2300      	movs	r3, #0
 8004e44:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8004e46:	2601      	movs	r6, #1
}
 8004e48:	0030      	movs	r0, r6
 8004e4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d100      	bne.n	8004e52 <HAL_RTC_SetTime+0x82>
      sTime->TimeFormat = 0x00U;
 8004e50:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004e52:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004e54:	023f      	lsls	r7, r7, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004e56:	4307      	orrs	r7, r0
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004e58:	9b00      	ldr	r3, [sp, #0]
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004e5a:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004e5c:	431f      	orrs	r7, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004e5e:	0400      	lsls	r0, r0, #16
 8004e60:	e7e0      	b.n	8004e24 <HAL_RTC_SetTime+0x54>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004e62:	4814      	ldr	r0, [pc, #80]	; (8004eb4 <HAL_RTC_SetTime+0xe4>)
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004e64:	4914      	ldr	r1, [pc, #80]	; (8004eb8 <HAL_RTC_SetTime+0xe8>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004e66:	4007      	ands	r7, r0
 8004e68:	601f      	str	r7, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004e6a:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004e6c:	6928      	ldr	r0, [r5, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004e6e:	400a      	ands	r2, r1
 8004e70:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004e72:	68ea      	ldr	r2, [r5, #12]
 8004e74:	6899      	ldr	r1, [r3, #8]
 8004e76:	4302      	orrs	r2, r0
 8004e78:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004e7a:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004e7c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004e7e:	68da      	ldr	r2, [r3, #12]
 8004e80:	438a      	bics	r2, r1
 8004e82:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	069b      	lsls	r3, r3, #26
 8004e88:	d40b      	bmi.n	8004ea2 <HAL_RTC_SetTime+0xd2>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e8a:	0020      	movs	r0, r4
 8004e8c:	f7ff ff0a 	bl	8004ca4 <HAL_RTC_WaitForSynchro>
 8004e90:	2800      	cmp	r0, #0
 8004e92:	d006      	beq.n	8004ea2 <HAL_RTC_SetTime+0xd2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e94:	22ff      	movs	r2, #255	; 0xff
 8004e96:	6823      	ldr	r3, [r4, #0]
 8004e98:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004e9a:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8004e9c:	7726      	strb	r6, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004e9e:	7763      	strb	r3, [r4, #29]
 8004ea0:	e7d1      	b.n	8004e46 <HAL_RTC_SetTime+0x76>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ea2:	22ff      	movs	r2, #255	; 0xff
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8004eac:	2300      	movs	r3, #0
 8004eae:	7723      	strb	r3, [r4, #28]
    return HAL_OK;
 8004eb0:	e7ca      	b.n	8004e48 <HAL_RTC_SetTime+0x78>
 8004eb2:	46c0      	nop			; (mov r8, r8)
 8004eb4:	007f7f7f 	.word	0x007f7f7f
 8004eb8:	fffbffff 	.word	0xfffbffff

08004ebc <HAL_RTC_SetDate>:
{
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ec0:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8004ec2:	7f01      	ldrb	r1, [r0, #28]
{
 8004ec4:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 8004ec6:	001c      	movs	r4, r3
 8004ec8:	2901      	cmp	r1, #1
 8004eca:	d032      	beq.n	8004f32 <HAL_RTC_SetDate+0x76>
 8004ecc:	2101      	movs	r1, #1
 8004ece:	7834      	ldrb	r4, [r6, #0]
 8004ed0:	7701      	strb	r1, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ed2:	7743      	strb	r3, [r0, #29]
 8004ed4:	0361      	lsls	r1, r4, #13
 8004ed6:	78f0      	ldrb	r0, [r6, #3]
 8004ed8:	7873      	ldrb	r3, [r6, #1]
 8004eda:	78b7      	ldrb	r7, [r6, #2]
 8004edc:	9101      	str	r1, [sp, #4]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004ede:	2a00      	cmp	r2, #0
 8004ee0:	d147      	bne.n	8004f72 <HAL_RTC_SetDate+0xb6>
 8004ee2:	3210      	adds	r2, #16
 8004ee4:	4213      	tst	r3, r2
 8004ee6:	d002      	beq.n	8004eee <HAL_RTC_SetDate+0x32>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004ee8:	4393      	bics	r3, r2
 8004eea:	330a      	adds	r3, #10
 8004eec:	7073      	strb	r3, [r6, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004eee:	f7ff ff63 	bl	8004db8 <RTC_ByteToBcd2>
 8004ef2:	0004      	movs	r4, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004ef4:	7870      	ldrb	r0, [r6, #1]
 8004ef6:	f7ff ff5f 	bl	8004db8 <RTC_ByteToBcd2>
 8004efa:	0006      	movs	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004efc:	0038      	movs	r0, r7
 8004efe:	f7ff ff5b 	bl	8004db8 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004f02:	9b01      	ldr	r3, [sp, #4]
 8004f04:	0424      	lsls	r4, r4, #16
 8004f06:	4318      	orrs	r0, r3
 8004f08:	4304      	orrs	r4, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004f0a:	0236      	lsls	r6, r6, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004f0c:	4326      	orrs	r6, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f0e:	22ca      	movs	r2, #202	; 0xca
 8004f10:	682b      	ldr	r3, [r5, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004f12:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f14:	625a      	str	r2, [r3, #36]	; 0x24
 8004f16:	3a77      	subs	r2, #119	; 0x77
 8004f18:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004f1a:	f7ff fedd 	bl	8004cd8 <RTC_EnterInitMode>
 8004f1e:	682b      	ldr	r3, [r5, #0]
 8004f20:	1e04      	subs	r4, r0, #0
 8004f22:	d008      	beq.n	8004f36 <HAL_RTC_SetDate+0x7a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f24:	22ff      	movs	r2, #255	; 0xff
 8004f26:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004f28:	2304      	movs	r3, #4
 8004f2a:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	772b      	strb	r3, [r5, #28]
        return HAL_ERROR;
 8004f30:	2401      	movs	r4, #1
}
 8004f32:	0020      	movs	r0, r4
 8004f34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004f36:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004f38:	4f11      	ldr	r7, [pc, #68]	; (8004f80 <HAL_RTC_SetDate+0xc4>)
 8004f3a:	403e      	ands	r6, r7
 8004f3c:	605e      	str	r6, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	438a      	bics	r2, r1
 8004f42:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	069b      	lsls	r3, r3, #26
 8004f48:	d40b      	bmi.n	8004f62 <HAL_RTC_SetDate+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f4a:	0028      	movs	r0, r5
 8004f4c:	f7ff feaa 	bl	8004ca4 <HAL_RTC_WaitForSynchro>
 8004f50:	2800      	cmp	r0, #0
 8004f52:	d006      	beq.n	8004f62 <HAL_RTC_SetDate+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f54:	22ff      	movs	r2, #255	; 0xff
 8004f56:	682b      	ldr	r3, [r5, #0]
 8004f58:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004f5a:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8004f5c:	772c      	strb	r4, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004f5e:	776b      	strb	r3, [r5, #29]
 8004f60:	e7e6      	b.n	8004f30 <HAL_RTC_SetDate+0x74>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f62:	22ff      	movs	r2, #255	; 0xff
 8004f64:	682b      	ldr	r3, [r5, #0]
 8004f66:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	772b      	strb	r3, [r5, #28]
    return HAL_OK;
 8004f70:	e7df      	b.n	8004f32 <HAL_RTC_SetDate+0x76>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004f72:	9a01      	ldr	r2, [sp, #4]
 8004f74:	0400      	lsls	r0, r0, #16
 8004f76:	4310      	orrs	r0, r2
 8004f78:	4307      	orrs	r7, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 8004f7a:	021e      	lsls	r6, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004f7c:	433e      	orrs	r6, r7
 8004f7e:	e7c6      	b.n	8004f0e <HAL_RTC_SetDate+0x52>
 8004f80:	00ffff3f 	.word	0x00ffff3f

08004f84 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8004f84:	230a      	movs	r3, #10
 8004f86:	0902      	lsrs	r2, r0, #4
 8004f88:	4353      	muls	r3, r2
  return (tmp + (Value & (uint8_t)0x0FU));
 8004f8a:	220f      	movs	r2, #15
 8004f8c:	4010      	ands	r0, r2
 8004f8e:	1818      	adds	r0, r3, r0
 8004f90:	b2c0      	uxtb	r0, r0
}
 8004f92:	4770      	bx	lr

08004f94 <HAL_RTC_GetTime>:
{
 8004f94:	b570      	push	{r4, r5, r6, lr}
 8004f96:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004f98:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004f9a:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004f9c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8004f9e:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004fa0:	690b      	ldr	r3, [r1, #16]
 8004fa2:	045b      	lsls	r3, r3, #17
 8004fa4:	0c5b      	lsrs	r3, r3, #17
 8004fa6:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004fa8:	680b      	ldr	r3, [r1, #0]
 8004faa:	490e      	ldr	r1, [pc, #56]	; (8004fe4 <HAL_RTC_GetTime+0x50>)
 8004fac:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004fae:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004fb0:	0a1e      	lsrs	r6, r3, #8
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004fb2:	b2dd      	uxtb	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004fb4:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004fb6:	4008      	ands	r0, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004fb8:	b2f6      	uxtb	r6, r6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004fba:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004fbc:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004fbe:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004fc0:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004fc2:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 8004fc4:	2a00      	cmp	r2, #0
 8004fc6:	d10a      	bne.n	8004fde <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004fc8:	f7ff ffdc 	bl	8004f84 <RTC_Bcd2ToByte>
 8004fcc:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004fce:	0030      	movs	r0, r6
 8004fd0:	f7ff ffd8 	bl	8004f84 <RTC_Bcd2ToByte>
 8004fd4:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004fd6:	0028      	movs	r0, r5
 8004fd8:	f7ff ffd4 	bl	8004f84 <RTC_Bcd2ToByte>
 8004fdc:	70a0      	strb	r0, [r4, #2]
}
 8004fde:	2000      	movs	r0, #0
 8004fe0:	bd70      	pop	{r4, r5, r6, pc}
 8004fe2:	46c0      	nop			; (mov r8, r8)
 8004fe4:	007f7f7f 	.word	0x007f7f7f

08004fe8 <HAL_RTC_GetDate>:
{
 8004fe8:	b570      	push	{r4, r5, r6, lr}
 8004fea:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004fec:	6803      	ldr	r3, [r0, #0]
 8004fee:	490e      	ldr	r1, [pc, #56]	; (8005028 <HAL_RTC_GetDate+0x40>)
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004ff4:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004ff6:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004ff8:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004ffa:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004ffc:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004ffe:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005000:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005002:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005004:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005006:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 8005008:	2a00      	cmp	r2, #0
 800500a:	d10a      	bne.n	8005022 <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800500c:	f7ff ffba 	bl	8004f84 <RTC_Bcd2ToByte>
 8005010:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005012:	0028      	movs	r0, r5
 8005014:	f7ff ffb6 	bl	8004f84 <RTC_Bcd2ToByte>
 8005018:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800501a:	0030      	movs	r0, r6
 800501c:	f7ff ffb2 	bl	8004f84 <RTC_Bcd2ToByte>
 8005020:	70a0      	strb	r0, [r4, #2]
}
 8005022:	2000      	movs	r0, #0
 8005024:	bd70      	pop	{r4, r5, r6, pc}
 8005026:	46c0      	nop			; (mov r8, r8)
 8005028:	00ffff3f 	.word	0x00ffff3f

0800502c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800502c:	6803      	ldr	r3, [r0, #0]
 800502e:	490b      	ldr	r1, [pc, #44]	; (800505c <UART_EndRxTransfer+0x30>)
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	400a      	ands	r2, r1
 8005034:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	3123      	adds	r1, #35	; 0x23
 800503a:	31ff      	adds	r1, #255	; 0xff
 800503c:	438a      	bics	r2, r1
 800503e:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005040:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8005042:	428a      	cmp	r2, r1
 8005044:	d103      	bne.n	800504e <UART_EndRxTransfer+0x22>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	310f      	adds	r1, #15
 800504a:	438a      	bics	r2, r1
 800504c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800504e:	2320      	movs	r3, #32
 8005050:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005052:	2300      	movs	r3, #0
 8005054:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005056:	6643      	str	r3, [r0, #100]	; 0x64
}
 8005058:	4770      	bx	lr
 800505a:	46c0      	nop			; (mov r8, r8)
 800505c:	fffffedf 	.word	0xfffffedf

08005060 <HAL_UART_TxCpltCallback>:
 8005060:	4770      	bx	lr

08005062 <HAL_UART_ErrorCallback>:
 8005062:	4770      	bx	lr

08005064 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005064:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	0002      	movs	r2, r0
{
 800506a:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 800506c:	325a      	adds	r2, #90	; 0x5a
 800506e:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8005070:	3a08      	subs	r2, #8
 8005072:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005074:	f7ff fff5 	bl	8005062 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005078:	bd10      	pop	{r4, pc}

0800507a <HAL_UARTEx_RxEventCallback>:
}
 800507a:	4770      	bx	lr

0800507c <HAL_UART_IRQHandler>:
{
 800507c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800507e:	6803      	ldr	r3, [r0, #0]
{
 8005080:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005082:	69da      	ldr	r2, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005084:	4879      	ldr	r0, [pc, #484]	; (800526c <HAL_UART_IRQHandler+0x1f0>)
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005086:	6819      	ldr	r1, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005088:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 800508a:	4202      	tst	r2, r0
 800508c:	d10b      	bne.n	80050a6 <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800508e:	2020      	movs	r0, #32
 8005090:	4202      	tst	r2, r0
 8005092:	d100      	bne.n	8005096 <HAL_UART_IRQHandler+0x1a>
 8005094:	e075      	b.n	8005182 <HAL_UART_IRQHandler+0x106>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005096:	4201      	tst	r1, r0
 8005098:	d100      	bne.n	800509c <HAL_UART_IRQHandler+0x20>
 800509a:	e072      	b.n	8005182 <HAL_UART_IRQHandler+0x106>
      if (huart->RxISR != NULL)
 800509c:	6e63      	ldr	r3, [r4, #100]	; 0x64
      huart->TxISR(huart);
 800509e:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d164      	bne.n	800516e <HAL_UART_IRQHandler+0xf2>
 80050a4:	e064      	b.n	8005170 <HAL_UART_IRQHandler+0xf4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80050a6:	2001      	movs	r0, #1
 80050a8:	4006      	ands	r6, r0
 80050aa:	d102      	bne.n	80050b2 <HAL_UART_IRQHandler+0x36>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80050ac:	4d70      	ldr	r5, [pc, #448]	; (8005270 <HAL_UART_IRQHandler+0x1f4>)
 80050ae:	4229      	tst	r1, r5
 80050b0:	d067      	beq.n	8005182 <HAL_UART_IRQHandler+0x106>
 80050b2:	1d25      	adds	r5, r4, #4
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80050b4:	4202      	tst	r2, r0
 80050b6:	d005      	beq.n	80050c4 <HAL_UART_IRQHandler+0x48>
 80050b8:	05cf      	lsls	r7, r1, #23
 80050ba:	d503      	bpl.n	80050c4 <HAL_UART_IRQHandler+0x48>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050bc:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050be:	6fef      	ldr	r7, [r5, #124]	; 0x7c
 80050c0:	4338      	orrs	r0, r7
 80050c2:	67e8      	str	r0, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050c4:	2002      	movs	r0, #2
 80050c6:	4202      	tst	r2, r0
 80050c8:	d006      	beq.n	80050d8 <HAL_UART_IRQHandler+0x5c>
 80050ca:	2e00      	cmp	r6, #0
 80050cc:	d004      	beq.n	80050d8 <HAL_UART_IRQHandler+0x5c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050ce:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050d0:	6fef      	ldr	r7, [r5, #124]	; 0x7c
 80050d2:	1800      	adds	r0, r0, r0
 80050d4:	4338      	orrs	r0, r7
 80050d6:	67e8      	str	r0, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050d8:	2004      	movs	r0, #4
 80050da:	4202      	tst	r2, r0
 80050dc:	d006      	beq.n	80050ec <HAL_UART_IRQHandler+0x70>
 80050de:	2e00      	cmp	r6, #0
 80050e0:	d004      	beq.n	80050ec <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80050e2:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050e4:	6fef      	ldr	r7, [r5, #124]	; 0x7c
 80050e6:	3802      	subs	r0, #2
 80050e8:	4338      	orrs	r0, r7
 80050ea:	67e8      	str	r0, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80050ec:	0710      	lsls	r0, r2, #28
 80050ee:	d508      	bpl.n	8005102 <HAL_UART_IRQHandler+0x86>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80050f0:	0688      	lsls	r0, r1, #26
 80050f2:	d401      	bmi.n	80050f8 <HAL_UART_IRQHandler+0x7c>
 80050f4:	2e00      	cmp	r6, #0
 80050f6:	d004      	beq.n	8005102 <HAL_UART_IRQHandler+0x86>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050f8:	2008      	movs	r0, #8
 80050fa:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050fc:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 80050fe:	4330      	orrs	r0, r6
 8005100:	67e8      	str	r0, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005102:	2080      	movs	r0, #128	; 0x80
 8005104:	0100      	lsls	r0, r0, #4
 8005106:	4202      	tst	r2, r0
 8005108:	d006      	beq.n	8005118 <HAL_UART_IRQHandler+0x9c>
 800510a:	014e      	lsls	r6, r1, #5
 800510c:	d504      	bpl.n	8005118 <HAL_UART_IRQHandler+0x9c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800510e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005110:	2320      	movs	r3, #32
 8005112:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 8005114:	4303      	orrs	r3, r0
 8005116:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005118:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800511a:	2b00      	cmp	r3, #0
 800511c:	d028      	beq.n	8005170 <HAL_UART_IRQHandler+0xf4>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800511e:	2320      	movs	r3, #32
 8005120:	421a      	tst	r2, r3
 8005122:	d006      	beq.n	8005132 <HAL_UART_IRQHandler+0xb6>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005124:	4219      	tst	r1, r3
 8005126:	d004      	beq.n	8005132 <HAL_UART_IRQHandler+0xb6>
        if (huart->RxISR != NULL)
 8005128:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <HAL_UART_IRQHandler+0xb6>
          huart->RxISR(huart);
 800512e:	0020      	movs	r0, r4
 8005130:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005132:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8005134:	6fee      	ldr	r6, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005136:	689b      	ldr	r3, [r3, #8]
        UART_EndRxTransfer(huart);
 8005138:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800513a:	065b      	lsls	r3, r3, #25
 800513c:	d402      	bmi.n	8005144 <HAL_UART_IRQHandler+0xc8>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800513e:	2328      	movs	r3, #40	; 0x28
 8005140:	401e      	ands	r6, r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005142:	d01a      	beq.n	800517a <HAL_UART_IRQHandler+0xfe>
        UART_EndRxTransfer(huart);
 8005144:	f7ff ff72 	bl	800502c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005148:	2140      	movs	r1, #64	; 0x40
 800514a:	6823      	ldr	r3, [r4, #0]
 800514c:	689a      	ldr	r2, [r3, #8]
 800514e:	420a      	tst	r2, r1
 8005150:	d00f      	beq.n	8005172 <HAL_UART_IRQHandler+0xf6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005152:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8005154:	6f20      	ldr	r0, [r4, #112]	; 0x70
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005156:	438a      	bics	r2, r1
 8005158:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800515a:	2800      	cmp	r0, #0
 800515c:	d009      	beq.n	8005172 <HAL_UART_IRQHandler+0xf6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800515e:	4b45      	ldr	r3, [pc, #276]	; (8005274 <HAL_UART_IRQHandler+0x1f8>)
 8005160:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005162:	f7ff f82d 	bl	80041c0 <HAL_DMA_Abort_IT>
 8005166:	2800      	cmp	r0, #0
 8005168:	d002      	beq.n	8005170 <HAL_UART_IRQHandler+0xf4>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800516a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800516c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800516e:	4798      	blx	r3
}
 8005170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8005172:	0020      	movs	r0, r4
 8005174:	f7ff ff75 	bl	8005062 <HAL_UART_ErrorCallback>
 8005178:	e7fa      	b.n	8005170 <HAL_UART_IRQHandler+0xf4>
        HAL_UART_ErrorCallback(huart);
 800517a:	f7ff ff72 	bl	8005062 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800517e:	67ee      	str	r6, [r5, #124]	; 0x7c
 8005180:	e7f6      	b.n	8005170 <HAL_UART_IRQHandler+0xf4>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005182:	6e27      	ldr	r7, [r4, #96]	; 0x60
 8005184:	2f01      	cmp	r7, #1
 8005186:	d158      	bne.n	800523a <HAL_UART_IRQHandler+0x1be>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005188:	2510      	movs	r5, #16
 800518a:	422a      	tst	r2, r5
 800518c:	d055      	beq.n	800523a <HAL_UART_IRQHandler+0x1be>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800518e:	4229      	tst	r1, r5
 8005190:	d053      	beq.n	800523a <HAL_UART_IRQHandler+0x1be>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005192:	2140      	movs	r1, #64	; 0x40
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005194:	621d      	str	r5, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	400a      	ands	r2, r1
 800519a:	d031      	beq.n	8005200 <HAL_UART_IRQHandler+0x184>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800519c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800519e:	6802      	ldr	r2, [r0, #0]
 80051a0:	6852      	ldr	r2, [r2, #4]
 80051a2:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 80051a4:	2a00      	cmp	r2, #0
 80051a6:	d0e3      	beq.n	8005170 <HAL_UART_IRQHandler+0xf4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80051a8:	0026      	movs	r6, r4
 80051aa:	3658      	adds	r6, #88	; 0x58
 80051ac:	8831      	ldrh	r1, [r6, #0]
 80051ae:	4291      	cmp	r1, r2
 80051b0:	d9de      	bls.n	8005170 <HAL_UART_IRQHandler+0xf4>
        huart->RxXferCount = nb_remaining_rx_data;
 80051b2:	215a      	movs	r1, #90	; 0x5a
 80051b4:	468c      	mov	ip, r1
 80051b6:	44a4      	add	ip, r4
 80051b8:	4661      	mov	r1, ip
 80051ba:	800a      	strh	r2, [r1, #0]
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051bc:	6982      	ldr	r2, [r0, #24]
 80051be:	2a20      	cmp	r2, #32
 80051c0:	d014      	beq.n	80051ec <HAL_UART_IRQHandler+0x170>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	492c      	ldr	r1, [pc, #176]	; (8005278 <HAL_UART_IRQHandler+0x1fc>)
 80051c6:	400a      	ands	r2, r1
 80051c8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ca:	689a      	ldr	r2, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051cc:	3142      	adds	r1, #66	; 0x42
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ce:	43ba      	bics	r2, r7
 80051d0:	609a      	str	r2, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	31ff      	adds	r1, #255	; 0xff
 80051d6:	438a      	bics	r2, r1
 80051d8:	609a      	str	r2, [r3, #8]
          huart->RxState = HAL_UART_STATE_READY;
 80051da:	2220      	movs	r2, #32
 80051dc:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051de:	2200      	movs	r2, #0
 80051e0:	6622      	str	r2, [r4, #96]	; 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	43aa      	bics	r2, r5
 80051e6:	601a      	str	r2, [r3, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051e8:	f7fe ffcc 	bl	8004184 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051ec:	0023      	movs	r3, r4
 80051ee:	335a      	adds	r3, #90	; 0x5a
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	8831      	ldrh	r1, [r6, #0]
 80051f4:	1ac9      	subs	r1, r1, r3
 80051f6:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051f8:	0020      	movs	r0, r4
 80051fa:	f7ff ff3e 	bl	800507a <HAL_UARTEx_RxEventCallback>
 80051fe:	e7b7      	b.n	8005170 <HAL_UART_IRQHandler+0xf4>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005200:	0026      	movs	r6, r4
 8005202:	365a      	adds	r6, #90	; 0x5a
 8005204:	8830      	ldrh	r0, [r6, #0]
      if (  (huart->RxXferCount > 0U)
 8005206:	8831      	ldrh	r1, [r6, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005208:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 800520a:	2900      	cmp	r1, #0
 800520c:	d0b0      	beq.n	8005170 <HAL_UART_IRQHandler+0xf4>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800520e:	0021      	movs	r1, r4
 8005210:	3158      	adds	r1, #88	; 0x58
 8005212:	8809      	ldrh	r1, [r1, #0]
 8005214:	1a09      	subs	r1, r1, r0
 8005216:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 8005218:	2900      	cmp	r1, #0
 800521a:	d0a9      	beq.n	8005170 <HAL_UART_IRQHandler+0xf4>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800521c:	6818      	ldr	r0, [r3, #0]
 800521e:	4e17      	ldr	r6, [pc, #92]	; (800527c <HAL_UART_IRQHandler+0x200>)
 8005220:	4030      	ands	r0, r6
 8005222:	6018      	str	r0, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005224:	6898      	ldr	r0, [r3, #8]
 8005226:	43b8      	bics	r0, r7
 8005228:	6098      	str	r0, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800522a:	2020      	movs	r0, #32
 800522c:	67e0      	str	r0, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800522e:	6622      	str	r2, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 8005230:	6662      	str	r2, [r4, #100]	; 0x64
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	43aa      	bics	r2, r5
 8005236:	601a      	str	r2, [r3, #0]
 8005238:	e7de      	b.n	80051f8 <HAL_UART_IRQHandler+0x17c>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800523a:	2080      	movs	r0, #128	; 0x80
 800523c:	4202      	tst	r2, r0
 800523e:	d003      	beq.n	8005248 <HAL_UART_IRQHandler+0x1cc>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005240:	4201      	tst	r1, r0
 8005242:	d001      	beq.n	8005248 <HAL_UART_IRQHandler+0x1cc>
    if (huart->TxISR != NULL)
 8005244:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005246:	e72a      	b.n	800509e <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005248:	2040      	movs	r0, #64	; 0x40
 800524a:	4202      	tst	r2, r0
 800524c:	d100      	bne.n	8005250 <HAL_UART_IRQHandler+0x1d4>
 800524e:	e78f      	b.n	8005170 <HAL_UART_IRQHandler+0xf4>
 8005250:	4201      	tst	r1, r0
 8005252:	d100      	bne.n	8005256 <HAL_UART_IRQHandler+0x1da>
 8005254:	e78c      	b.n	8005170 <HAL_UART_IRQHandler+0xf4>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	4382      	bics	r2, r0
 800525a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800525c:	2320      	movs	r3, #32
 800525e:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005260:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005262:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8005264:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 8005266:	f7ff fefb 	bl	8005060 <HAL_UART_TxCpltCallback>
 800526a:	e781      	b.n	8005170 <HAL_UART_IRQHandler+0xf4>
 800526c:	0000080f 	.word	0x0000080f
 8005270:	04000120 	.word	0x04000120
 8005274:	08005065 	.word	0x08005065
 8005278:	fffffeff 	.word	0xfffffeff
 800527c:	fffffedf 	.word	0xfffffedf

08005280 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005280:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 8005282:	b510      	push	{r4, lr}
 8005284:	6803      	ldr	r3, [r0, #0]
 8005286:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005288:	2a22      	cmp	r2, #34	; 0x22
 800528a:	d134      	bne.n	80052f6 <UART_RxISR_8BIT+0x76>
  uint16_t uhMask = huart->Mask;
 800528c:	0002      	movs	r2, r0
 800528e:	325c      	adds	r2, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005290:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005292:	8812      	ldrh	r2, [r2, #0]
 8005294:	4013      	ands	r3, r2
 8005296:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8005298:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 800529a:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 800529c:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800529e:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 80052a0:	3301      	adds	r3, #1
 80052a2:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80052a4:	8813      	ldrh	r3, [r2, #0]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 80052ac:	8812      	ldrh	r2, [r2, #0]
 80052ae:	b292      	uxth	r2, r2
 80052b0:	2a00      	cmp	r2, #0
 80052b2:	d11b      	bne.n	80052ec <UART_RxISR_8BIT+0x6c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052b4:	6803      	ldr	r3, [r0, #0]
 80052b6:	4812      	ldr	r0, [pc, #72]	; (8005300 <UART_RxISR_8BIT+0x80>)
 80052b8:	6819      	ldr	r1, [r3, #0]
 80052ba:	4001      	ands	r1, r0
 80052bc:	6019      	str	r1, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052be:	6899      	ldr	r1, [r3, #8]
 80052c0:	3023      	adds	r0, #35	; 0x23
 80052c2:	30ff      	adds	r0, #255	; 0xff
 80052c4:	4381      	bics	r1, r0
 80052c6:	6099      	str	r1, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052c8:	2120      	movs	r1, #32
 80052ca:	67e1      	str	r1, [r4, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80052cc:	6662      	str	r2, [r4, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ce:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80052d0:	4282      	cmp	r2, r0
 80052d2:	d10c      	bne.n	80052ee <UART_RxISR_8BIT+0x6e>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	3910      	subs	r1, #16
 80052d8:	438a      	bics	r2, r1
 80052da:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052dc:	0023      	movs	r3, r4
 80052de:	3358      	adds	r3, #88	; 0x58
 80052e0:	8819      	ldrh	r1, [r3, #0]
 80052e2:	0020      	movs	r0, r4
 80052e4:	f7ff fec9 	bl	800507a <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e8:	2300      	movs	r3, #0
 80052ea:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052ec:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 80052ee:	0020      	movs	r0, r4
 80052f0:	f7fd fcca 	bl	8002c88 <HAL_UART_RxCpltCallback>
 80052f4:	e7f8      	b.n	80052e8 <UART_RxISR_8BIT+0x68>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052f6:	2208      	movs	r2, #8
 80052f8:	6999      	ldr	r1, [r3, #24]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	619a      	str	r2, [r3, #24]
}
 80052fe:	e7f5      	b.n	80052ec <UART_RxISR_8BIT+0x6c>
 8005300:	fffffedf 	.word	0xfffffedf

08005304 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005304:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 8005306:	b510      	push	{r4, lr}
 8005308:	6803      	ldr	r3, [r0, #0]
 800530a:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800530c:	2a22      	cmp	r2, #34	; 0x22
 800530e:	d132      	bne.n	8005376 <UART_RxISR_16BIT+0x72>
  uint16_t uhMask = huart->Mask;
 8005310:	0021      	movs	r1, r4
 8005312:	315c      	adds	r1, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005314:	8c98      	ldrh	r0, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8005316:	8809      	ldrh	r1, [r1, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005318:	6d62      	ldr	r2, [r4, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 800531a:	4001      	ands	r1, r0
 800531c:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 800531e:	0021      	movs	r1, r4
    huart->pRxBuffPtr += 2U;
 8005320:	3202      	adds	r2, #2
 8005322:	6562      	str	r2, [r4, #84]	; 0x54
    huart->RxXferCount--;
 8005324:	315a      	adds	r1, #90	; 0x5a
 8005326:	880a      	ldrh	r2, [r1, #0]
 8005328:	3a01      	subs	r2, #1
 800532a:	b292      	uxth	r2, r2
 800532c:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 800532e:	880a      	ldrh	r2, [r1, #0]
 8005330:	b292      	uxth	r2, r2
 8005332:	2a00      	cmp	r2, #0
 8005334:	d11a      	bne.n	800536c <UART_RxISR_16BIT+0x68>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005336:	6819      	ldr	r1, [r3, #0]
 8005338:	4811      	ldr	r0, [pc, #68]	; (8005380 <UART_RxISR_16BIT+0x7c>)
 800533a:	4001      	ands	r1, r0
 800533c:	6019      	str	r1, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800533e:	6899      	ldr	r1, [r3, #8]
 8005340:	3023      	adds	r0, #35	; 0x23
 8005342:	30ff      	adds	r0, #255	; 0xff
 8005344:	4381      	bics	r1, r0
 8005346:	6099      	str	r1, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005348:	2120      	movs	r1, #32
 800534a:	67e1      	str	r1, [r4, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800534c:	6662      	str	r2, [r4, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800534e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005350:	4282      	cmp	r2, r0
 8005352:	d10c      	bne.n	800536e <UART_RxISR_16BIT+0x6a>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	3910      	subs	r1, #16
 8005358:	438a      	bics	r2, r1
 800535a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800535c:	0023      	movs	r3, r4
 800535e:	3358      	adds	r3, #88	; 0x58
 8005360:	8819      	ldrh	r1, [r3, #0]
 8005362:	0020      	movs	r0, r4
 8005364:	f7ff fe89 	bl	800507a <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005368:	2300      	movs	r3, #0
 800536a:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800536c:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 800536e:	0020      	movs	r0, r4
 8005370:	f7fd fc8a 	bl	8002c88 <HAL_UART_RxCpltCallback>
 8005374:	e7f8      	b.n	8005368 <UART_RxISR_16BIT+0x64>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005376:	2208      	movs	r2, #8
 8005378:	6999      	ldr	r1, [r3, #24]
 800537a:	430a      	orrs	r2, r1
 800537c:	619a      	str	r2, [r3, #24]
}
 800537e:	e7f5      	b.n	800536c <UART_RxISR_16BIT+0x68>
 8005380:	fffffedf 	.word	0xfffffedf

08005384 <UART_SetConfig>:
{
 8005384:	b570      	push	{r4, r5, r6, lr}
 8005386:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005388:	6925      	ldr	r5, [r4, #16]
 800538a:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800538c:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800538e:	432b      	orrs	r3, r5
 8005390:	6965      	ldr	r5, [r4, #20]
 8005392:	69c1      	ldr	r1, [r0, #28]
 8005394:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005396:	6810      	ldr	r0, [r2, #0]
 8005398:	4d38      	ldr	r5, [pc, #224]	; (800547c <UART_SetConfig+0xf8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800539a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800539c:	4028      	ands	r0, r5
 800539e:	4303      	orrs	r3, r0
 80053a0:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053a2:	6853      	ldr	r3, [r2, #4]
 80053a4:	4836      	ldr	r0, [pc, #216]	; (8005480 <UART_SetConfig+0xfc>)
  tmpreg |= huart->Init.OneBitSampling;
 80053a6:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053a8:	4003      	ands	r3, r0
 80053aa:	68e0      	ldr	r0, [r4, #12]
 80053ac:	4303      	orrs	r3, r0
 80053ae:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 80053b0:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053b2:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80053b4:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053b6:	4d33      	ldr	r5, [pc, #204]	; (8005484 <UART_SetConfig+0x100>)
 80053b8:	4028      	ands	r0, r5
 80053ba:	4303      	orrs	r3, r0
 80053bc:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053be:	2203      	movs	r2, #3
 80053c0:	4b31      	ldr	r3, [pc, #196]	; (8005488 <UART_SetConfig+0x104>)
 80053c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c4:	4013      	ands	r3, r2
 80053c6:	4a31      	ldr	r2, [pc, #196]	; (800548c <UART_SetConfig+0x108>)
 80053c8:	5cd0      	ldrb	r0, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053ca:	2380      	movs	r3, #128	; 0x80
 80053cc:	021b      	lsls	r3, r3, #8
 80053ce:	4299      	cmp	r1, r3
 80053d0:	d130      	bne.n	8005434 <UART_SetConfig+0xb0>
    switch (clocksource)
 80053d2:	2808      	cmp	r0, #8
 80053d4:	d820      	bhi.n	8005418 <UART_SetConfig+0x94>
 80053d6:	f7fa fea1 	bl	800011c <__gnu_thumb1_case_uqi>
 80053da:	1f05      	.short	0x1f05
 80053dc:	1f0e1f11 	.word	0x1f0e1f11
 80053e0:	1f1f      	.short	0x1f1f
 80053e2:	21          	.byte	0x21
 80053e3:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 80053e4:	f7ff fc4e 	bl	8004c84 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80053e8:	2800      	cmp	r0, #0
 80053ea:	d108      	bne.n	80053fe <UART_SetConfig+0x7a>
 80053ec:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 80053f2:	66a3      	str	r3, [r4, #104]	; 0x68
}
 80053f4:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetSysClockFreq();
 80053f6:	f7ff fc13 	bl	8004c20 <HAL_RCC_GetSysClockFreq>
        break;
 80053fa:	e7f5      	b.n	80053e8 <UART_SetConfig+0x64>
        pclk = (uint32_t) HSI_VALUE;
 80053fc:	4824      	ldr	r0, [pc, #144]	; (8005490 <UART_SetConfig+0x10c>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053fe:	6863      	ldr	r3, [r4, #4]
 8005400:	0040      	lsls	r0, r0, #1
 8005402:	085b      	lsrs	r3, r3, #1
 8005404:	18c0      	adds	r0, r0, r3
 8005406:	6861      	ldr	r1, [r4, #4]
 8005408:	f7fa fe92 	bl	8000130 <__udivsi3>
 800540c:	0403      	lsls	r3, r0, #16
 800540e:	0c1a      	lsrs	r2, r3, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005410:	4920      	ldr	r1, [pc, #128]	; (8005494 <UART_SetConfig+0x110>)
 8005412:	3a10      	subs	r2, #16
 8005414:	428a      	cmp	r2, r1
 8005416:	d904      	bls.n	8005422 <UART_SetConfig+0x9e>
        ret = HAL_ERROR;
 8005418:	2001      	movs	r0, #1
 800541a:	e7e8      	b.n	80053ee <UART_SetConfig+0x6a>
        pclk = (uint32_t) LSE_VALUE;
 800541c:	2080      	movs	r0, #128	; 0x80
 800541e:	0200      	lsls	r0, r0, #8
 8005420:	e7ed      	b.n	80053fe <UART_SetConfig+0x7a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005422:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005424:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005426:	4390      	bics	r0, r2
 8005428:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 800542a:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800542c:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 800542e:	4318      	orrs	r0, r3
 8005430:	60d0      	str	r0, [r2, #12]
 8005432:	e7db      	b.n	80053ec <UART_SetConfig+0x68>
    switch (clocksource)
 8005434:	2808      	cmp	r0, #8
 8005436:	d8ef      	bhi.n	8005418 <UART_SetConfig+0x94>
 8005438:	f7fa fe66 	bl	8000108 <__gnu_thumb1_case_sqi>
 800543c:	ee1eee16 	.word	0xee1eee16
 8005440:	eeeeee1b 	.word	0xeeeeee1b
 8005444:	05          	.byte	0x05
 8005445:	00          	.byte	0x00
        pclk = (uint32_t) LSE_VALUE;
 8005446:	2080      	movs	r0, #128	; 0x80
 8005448:	0200      	lsls	r0, r0, #8
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800544a:	6863      	ldr	r3, [r4, #4]
 800544c:	6861      	ldr	r1, [r4, #4]
 800544e:	085b      	lsrs	r3, r3, #1
 8005450:	1818      	adds	r0, r3, r0
 8005452:	f7fa fe6d 	bl	8000130 <__udivsi3>
 8005456:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005458:	0002      	movs	r2, r0
 800545a:	4b0e      	ldr	r3, [pc, #56]	; (8005494 <UART_SetConfig+0x110>)
 800545c:	3a10      	subs	r2, #16
 800545e:	429a      	cmp	r2, r3
 8005460:	d8da      	bhi.n	8005418 <UART_SetConfig+0x94>
        huart->Instance->BRR = usartdiv;
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	60d8      	str	r0, [r3, #12]
 8005466:	e7c1      	b.n	80053ec <UART_SetConfig+0x68>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005468:	f7ff fc0c 	bl	8004c84 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800546c:	2800      	cmp	r0, #0
 800546e:	d1ec      	bne.n	800544a <UART_SetConfig+0xc6>
 8005470:	e7bc      	b.n	80053ec <UART_SetConfig+0x68>
        pclk = HAL_RCC_GetSysClockFreq();
 8005472:	f7ff fbd5 	bl	8004c20 <HAL_RCC_GetSysClockFreq>
        break;
 8005476:	e7f9      	b.n	800546c <UART_SetConfig+0xe8>
        pclk = (uint32_t) HSI_VALUE;
 8005478:	4805      	ldr	r0, [pc, #20]	; (8005490 <UART_SetConfig+0x10c>)
 800547a:	e7e6      	b.n	800544a <UART_SetConfig+0xc6>
 800547c:	ffff69f3 	.word	0xffff69f3
 8005480:	ffffcfff 	.word	0xffffcfff
 8005484:	fffff4ff 	.word	0xfffff4ff
 8005488:	40021000 	.word	0x40021000
 800548c:	080061d4 	.word	0x080061d4
 8005490:	007a1200 	.word	0x007a1200
 8005494:	0000ffef 	.word	0x0000ffef

08005498 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005498:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800549a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800549c:	07da      	lsls	r2, r3, #31
 800549e:	d506      	bpl.n	80054ae <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054a0:	6801      	ldr	r1, [r0, #0]
 80054a2:	4c28      	ldr	r4, [pc, #160]	; (8005544 <UART_AdvFeatureConfig+0xac>)
 80054a4:	684a      	ldr	r2, [r1, #4]
 80054a6:	4022      	ands	r2, r4
 80054a8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80054aa:	4322      	orrs	r2, r4
 80054ac:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054ae:	079a      	lsls	r2, r3, #30
 80054b0:	d506      	bpl.n	80054c0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054b2:	6801      	ldr	r1, [r0, #0]
 80054b4:	4c24      	ldr	r4, [pc, #144]	; (8005548 <UART_AdvFeatureConfig+0xb0>)
 80054b6:	684a      	ldr	r2, [r1, #4]
 80054b8:	4022      	ands	r2, r4
 80054ba:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80054bc:	4322      	orrs	r2, r4
 80054be:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054c0:	075a      	lsls	r2, r3, #29
 80054c2:	d506      	bpl.n	80054d2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054c4:	6801      	ldr	r1, [r0, #0]
 80054c6:	4c21      	ldr	r4, [pc, #132]	; (800554c <UART_AdvFeatureConfig+0xb4>)
 80054c8:	684a      	ldr	r2, [r1, #4]
 80054ca:	4022      	ands	r2, r4
 80054cc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80054ce:	4322      	orrs	r2, r4
 80054d0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054d2:	071a      	lsls	r2, r3, #28
 80054d4:	d506      	bpl.n	80054e4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054d6:	6801      	ldr	r1, [r0, #0]
 80054d8:	4c1d      	ldr	r4, [pc, #116]	; (8005550 <UART_AdvFeatureConfig+0xb8>)
 80054da:	684a      	ldr	r2, [r1, #4]
 80054dc:	4022      	ands	r2, r4
 80054de:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80054e0:	4322      	orrs	r2, r4
 80054e2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054e4:	06da      	lsls	r2, r3, #27
 80054e6:	d506      	bpl.n	80054f6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054e8:	6801      	ldr	r1, [r0, #0]
 80054ea:	4c1a      	ldr	r4, [pc, #104]	; (8005554 <UART_AdvFeatureConfig+0xbc>)
 80054ec:	688a      	ldr	r2, [r1, #8]
 80054ee:	4022      	ands	r2, r4
 80054f0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80054f2:	4322      	orrs	r2, r4
 80054f4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054f6:	069a      	lsls	r2, r3, #26
 80054f8:	d506      	bpl.n	8005508 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054fa:	6801      	ldr	r1, [r0, #0]
 80054fc:	4c16      	ldr	r4, [pc, #88]	; (8005558 <UART_AdvFeatureConfig+0xc0>)
 80054fe:	688a      	ldr	r2, [r1, #8]
 8005500:	4022      	ands	r2, r4
 8005502:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005504:	4322      	orrs	r2, r4
 8005506:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005508:	065a      	lsls	r2, r3, #25
 800550a:	d510      	bpl.n	800552e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800550c:	6801      	ldr	r1, [r0, #0]
 800550e:	4d13      	ldr	r5, [pc, #76]	; (800555c <UART_AdvFeatureConfig+0xc4>)
 8005510:	684a      	ldr	r2, [r1, #4]
 8005512:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005514:	402a      	ands	r2, r5
 8005516:	4322      	orrs	r2, r4
 8005518:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800551a:	2280      	movs	r2, #128	; 0x80
 800551c:	0352      	lsls	r2, r2, #13
 800551e:	4294      	cmp	r4, r2
 8005520:	d105      	bne.n	800552e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005522:	684a      	ldr	r2, [r1, #4]
 8005524:	4c0e      	ldr	r4, [pc, #56]	; (8005560 <UART_AdvFeatureConfig+0xc8>)
 8005526:	4022      	ands	r2, r4
 8005528:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800552a:	4322      	orrs	r2, r4
 800552c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800552e:	061b      	lsls	r3, r3, #24
 8005530:	d506      	bpl.n	8005540 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005532:	6802      	ldr	r2, [r0, #0]
 8005534:	490b      	ldr	r1, [pc, #44]	; (8005564 <UART_AdvFeatureConfig+0xcc>)
 8005536:	6853      	ldr	r3, [r2, #4]
 8005538:	400b      	ands	r3, r1
 800553a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800553c:	430b      	orrs	r3, r1
 800553e:	6053      	str	r3, [r2, #4]
}
 8005540:	bd30      	pop	{r4, r5, pc}
 8005542:	46c0      	nop			; (mov r8, r8)
 8005544:	fffdffff 	.word	0xfffdffff
 8005548:	fffeffff 	.word	0xfffeffff
 800554c:	fffbffff 	.word	0xfffbffff
 8005550:	ffff7fff 	.word	0xffff7fff
 8005554:	ffffefff 	.word	0xffffefff
 8005558:	ffffdfff 	.word	0xffffdfff
 800555c:	ffefffff 	.word	0xffefffff
 8005560:	ff9fffff 	.word	0xff9fffff
 8005564:	fff7ffff 	.word	0xfff7ffff

08005568 <UART_WaitOnFlagUntilTimeout>:
{
 8005568:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800556a:	2780      	movs	r7, #128	; 0x80
{
 800556c:	0004      	movs	r4, r0
 800556e:	000e      	movs	r6, r1
 8005570:	0015      	movs	r5, r2
 8005572:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005574:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005576:	6822      	ldr	r2, [r4, #0]
 8005578:	69d3      	ldr	r3, [r2, #28]
 800557a:	4033      	ands	r3, r6
 800557c:	1b9b      	subs	r3, r3, r6
 800557e:	4259      	negs	r1, r3
 8005580:	414b      	adcs	r3, r1
 8005582:	42ab      	cmp	r3, r5
 8005584:	d001      	beq.n	800558a <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 8005586:	2000      	movs	r0, #0
 8005588:	e01c      	b.n	80055c4 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 800558a:	9b08      	ldr	r3, [sp, #32]
 800558c:	3301      	adds	r3, #1
 800558e:	d0f3      	beq.n	8005578 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005590:	f7fe faa8 	bl	8003ae4 <HAL_GetTick>
 8005594:	9b01      	ldr	r3, [sp, #4]
 8005596:	9a08      	ldr	r2, [sp, #32]
 8005598:	1ac0      	subs	r0, r0, r3
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	4290      	cmp	r0, r2
 800559e:	d801      	bhi.n	80055a4 <UART_WaitOnFlagUntilTimeout+0x3c>
 80055a0:	2a00      	cmp	r2, #0
 80055a2:	d110      	bne.n	80055c6 <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	4913      	ldr	r1, [pc, #76]	; (80055f4 <UART_WaitOnFlagUntilTimeout+0x8c>)
 80055a8:	400a      	ands	r2, r1
 80055aa:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ac:	689a      	ldr	r2, [r3, #8]
 80055ae:	31a3      	adds	r1, #163	; 0xa3
 80055b0:	31ff      	adds	r1, #255	; 0xff
 80055b2:	438a      	bics	r2, r1
 80055b4:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80055b6:	2320      	movs	r3, #32
 80055b8:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80055ba:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 80055bc:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 80055be:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80055c0:	3474      	adds	r4, #116	; 0x74
 80055c2:	7023      	strb	r3, [r4, #0]
}
 80055c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055c6:	2104      	movs	r1, #4
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	420a      	tst	r2, r1
 80055cc:	d0d3      	beq.n	8005576 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055ce:	69da      	ldr	r2, [r3, #28]
 80055d0:	423a      	tst	r2, r7
 80055d2:	d0d0      	beq.n	8005576 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055d4:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	4906      	ldr	r1, [pc, #24]	; (80055f4 <UART_WaitOnFlagUntilTimeout+0x8c>)
 80055da:	400a      	ands	r2, r1
 80055dc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055de:	689a      	ldr	r2, [r3, #8]
 80055e0:	31a3      	adds	r1, #163	; 0xa3
 80055e2:	31ff      	adds	r1, #255	; 0xff
 80055e4:	438a      	bics	r2, r1
 80055e6:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 80055e8:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055ea:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 80055ec:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80055ee:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055f0:	67d3      	str	r3, [r2, #124]	; 0x7c
 80055f2:	e7e3      	b.n	80055bc <UART_WaitOnFlagUntilTimeout+0x54>
 80055f4:	fffffe5f 	.word	0xfffffe5f

080055f8 <HAL_UART_Transmit>:
{
 80055f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055fa:	b087      	sub	sp, #28
 80055fc:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 80055fe:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8005600:	0004      	movs	r4, r0
 8005602:	000d      	movs	r5, r1
 8005604:	0017      	movs	r7, r2
    return HAL_BUSY;
 8005606:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8005608:	2b20      	cmp	r3, #32
 800560a:	d14b      	bne.n	80056a4 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 800560c:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800560e:	2900      	cmp	r1, #0
 8005610:	d048      	beq.n	80056a4 <HAL_UART_Transmit+0xac>
 8005612:	2a00      	cmp	r2, #0
 8005614:	d046      	beq.n	80056a4 <HAL_UART_Transmit+0xac>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005616:	2380      	movs	r3, #128	; 0x80
 8005618:	68a2      	ldr	r2, [r4, #8]
 800561a:	015b      	lsls	r3, r3, #5
 800561c:	429a      	cmp	r2, r3
 800561e:	d104      	bne.n	800562a <HAL_UART_Transmit+0x32>
 8005620:	6923      	ldr	r3, [r4, #16]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 8005626:	4201      	tst	r1, r0
 8005628:	d13c      	bne.n	80056a4 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 800562a:	0026      	movs	r6, r4
 800562c:	3674      	adds	r6, #116	; 0x74
 800562e:	7833      	ldrb	r3, [r6, #0]
    return HAL_BUSY;
 8005630:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8005632:	2b01      	cmp	r3, #1
 8005634:	d036      	beq.n	80056a4 <HAL_UART_Transmit+0xac>
 8005636:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005638:	2200      	movs	r2, #0
    __HAL_LOCK(huart);
 800563a:	7033      	strb	r3, [r6, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800563c:	1d23      	adds	r3, r4, #4
 800563e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005640:	2321      	movs	r3, #33	; 0x21
 8005642:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 8005644:	f7fe fa4e 	bl	8003ae4 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8005648:	0023      	movs	r3, r4
 800564a:	3350      	adds	r3, #80	; 0x50
 800564c:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 800564e:	3302      	adds	r3, #2
 8005650:	801f      	strh	r7, [r3, #0]
 8005652:	9303      	str	r3, [sp, #12]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005654:	2380      	movs	r3, #128	; 0x80
 8005656:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8005658:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800565a:	015b      	lsls	r3, r3, #5
      pdata16bits = NULL;
 800565c:	2700      	movs	r7, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800565e:	429a      	cmp	r2, r3
 8005660:	d104      	bne.n	800566c <HAL_UART_Transmit+0x74>
 8005662:	6923      	ldr	r3, [r4, #16]
 8005664:	42bb      	cmp	r3, r7
 8005666:	d101      	bne.n	800566c <HAL_UART_Transmit+0x74>
 8005668:	002f      	movs	r7, r5
      pdata8bits  = NULL;
 800566a:	001d      	movs	r5, r3
    __HAL_UNLOCK(huart);
 800566c:	2300      	movs	r3, #0
 800566e:	7033      	strb	r3, [r6, #0]
    while (huart->TxXferCount > 0U)
 8005670:	0023      	movs	r3, r4
 8005672:	3352      	adds	r3, #82	; 0x52
 8005674:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005676:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 8005678:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 800567e:	2a00      	cmp	r2, #0
 8005680:	d108      	bne.n	8005694 <HAL_UART_Transmit+0x9c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005682:	2140      	movs	r1, #64	; 0x40
 8005684:	0020      	movs	r0, r4
 8005686:	f7ff ff6f 	bl	8005568 <UART_WaitOnFlagUntilTimeout>
 800568a:	2800      	cmp	r0, #0
 800568c:	d109      	bne.n	80056a2 <HAL_UART_Transmit+0xaa>
    huart->gState = HAL_UART_STATE_READY;
 800568e:	2320      	movs	r3, #32
 8005690:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8005692:	e007      	b.n	80056a4 <HAL_UART_Transmit+0xac>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005694:	2200      	movs	r2, #0
 8005696:	2180      	movs	r1, #128	; 0x80
 8005698:	0020      	movs	r0, r4
 800569a:	f7ff ff65 	bl	8005568 <UART_WaitOnFlagUntilTimeout>
 800569e:	2800      	cmp	r0, #0
 80056a0:	d002      	beq.n	80056a8 <HAL_UART_Transmit+0xb0>
        return HAL_TIMEOUT;
 80056a2:	2003      	movs	r0, #3
}
 80056a4:	b007      	add	sp, #28
 80056a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056a8:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80056aa:	2d00      	cmp	r5, #0
 80056ac:	d10b      	bne.n	80056c6 <HAL_UART_Transmit+0xce>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056ae:	883b      	ldrh	r3, [r7, #0]
        pdata16bits++;
 80056b0:	3702      	adds	r7, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056b2:	05db      	lsls	r3, r3, #23
 80056b4:	0ddb      	lsrs	r3, r3, #23
 80056b6:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80056b8:	9b03      	ldr	r3, [sp, #12]
 80056ba:	9a03      	ldr	r2, [sp, #12]
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	3b01      	subs	r3, #1
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	8013      	strh	r3, [r2, #0]
 80056c4:	e7d4      	b.n	8005670 <HAL_UART_Transmit+0x78>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056c6:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 80056c8:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056ca:	8513      	strh	r3, [r2, #40]	; 0x28
 80056cc:	e7f4      	b.n	80056b8 <HAL_UART_Transmit+0xc0>
	...

080056d0 <UART_CheckIdleState>:
{
 80056d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056d2:	2600      	movs	r6, #0
{
 80056d4:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056d6:	1d03      	adds	r3, r0, #4
 80056d8:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80056da:	f7fe fa03 	bl	8003ae4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056de:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80056e0:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	071b      	lsls	r3, r3, #28
 80056e6:	d416      	bmi.n	8005716 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056e8:	6823      	ldr	r3, [r4, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	075b      	lsls	r3, r3, #29
 80056ee:	d50a      	bpl.n	8005706 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056f0:	2180      	movs	r1, #128	; 0x80
 80056f2:	4b0f      	ldr	r3, [pc, #60]	; (8005730 <UART_CheckIdleState+0x60>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	03c9      	lsls	r1, r1, #15
 80056fa:	002b      	movs	r3, r5
 80056fc:	0020      	movs	r0, r4
 80056fe:	f7ff ff33 	bl	8005568 <UART_WaitOnFlagUntilTimeout>
 8005702:	2800      	cmp	r0, #0
 8005704:	d112      	bne.n	800572c <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 8005706:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005708:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800570a:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800570c:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800570e:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8005710:	3474      	adds	r4, #116	; 0x74
 8005712:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8005714:	e00b      	b.n	800572e <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005716:	2180      	movs	r1, #128	; 0x80
 8005718:	4b05      	ldr	r3, [pc, #20]	; (8005730 <UART_CheckIdleState+0x60>)
 800571a:	0032      	movs	r2, r6
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	0389      	lsls	r1, r1, #14
 8005720:	0003      	movs	r3, r0
 8005722:	0020      	movs	r0, r4
 8005724:	f7ff ff20 	bl	8005568 <UART_WaitOnFlagUntilTimeout>
 8005728:	2800      	cmp	r0, #0
 800572a:	d0dd      	beq.n	80056e8 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800572c:	2003      	movs	r0, #3
}
 800572e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8005730:	01ffffff 	.word	0x01ffffff

08005734 <HAL_UART_Init>:
{
 8005734:	b510      	push	{r4, lr}
 8005736:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8005738:	d101      	bne.n	800573e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800573a:	2001      	movs	r0, #1
}
 800573c:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800573e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005740:	2b00      	cmp	r3, #0
 8005742:	d104      	bne.n	800574e <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8005744:	0002      	movs	r2, r0
 8005746:	3274      	adds	r2, #116	; 0x74
 8005748:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800574a:	f7fd fb9f 	bl	8002e8c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800574e:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8005750:	2101      	movs	r1, #1
 8005752:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005754:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8005756:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005758:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800575a:	438b      	bics	r3, r1
 800575c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800575e:	f7ff fe11 	bl	8005384 <UART_SetConfig>
 8005762:	2801      	cmp	r0, #1
 8005764:	d0e9      	beq.n	800573a <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005766:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005768:	2b00      	cmp	r3, #0
 800576a:	d002      	beq.n	8005772 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 800576c:	0020      	movs	r0, r4
 800576e:	f7ff fe93 	bl	8005498 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8005772:	6823      	ldr	r3, [r4, #0]
 8005774:	4907      	ldr	r1, [pc, #28]	; (8005794 <HAL_UART_Init+0x60>)
 8005776:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8005778:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800577a:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800577c:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800577e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005780:	689a      	ldr	r2, [r3, #8]
 8005782:	438a      	bics	r2, r1
 8005784:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005786:	2201      	movs	r2, #1
 8005788:	6819      	ldr	r1, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800578e:	f7ff ff9f 	bl	80056d0 <UART_CheckIdleState>
 8005792:	e7d3      	b.n	800573c <HAL_UART_Init+0x8>
 8005794:	fffff7ff 	.word	0xfffff7ff

08005798 <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 8005798:	0003      	movs	r3, r0
 800579a:	3358      	adds	r3, #88	; 0x58
{
 800579c:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 800579e:	6541      	str	r1, [r0, #84]	; 0x54
  UART_MASK_COMPUTATION(huart);
 80057a0:	2480      	movs	r4, #128	; 0x80
  huart->RxXferSize  = Size;
 80057a2:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 80057a4:	805a      	strh	r2, [r3, #2]
  huart->RxISR       = NULL;
 80057a6:	2200      	movs	r2, #0
  UART_MASK_COMPUTATION(huart);
 80057a8:	6881      	ldr	r1, [r0, #8]
  huart->RxISR       = NULL;
 80057aa:	6642      	str	r2, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 80057ac:	0164      	lsls	r4, r4, #5
 80057ae:	3304      	adds	r3, #4
 80057b0:	42a1      	cmp	r1, r4
 80057b2:	d123      	bne.n	80057fc <UART_Start_Receive_IT+0x64>
 80057b4:	6902      	ldr	r2, [r0, #16]
 80057b6:	2a00      	cmp	r2, #0
 80057b8:	d11e      	bne.n	80057f8 <UART_Start_Receive_IT+0x60>
 80057ba:	4a15      	ldr	r2, [pc, #84]	; (8005810 <UART_Start_Receive_IT+0x78>)
 80057bc:	801a      	strh	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057be:	2200      	movs	r2, #0
 80057c0:	1d03      	adds	r3, r0, #4
 80057c2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057c4:	2322      	movs	r3, #34	; 0x22
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c6:	6802      	ldr	r2, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057c8:	67c3      	str	r3, [r0, #124]	; 0x7c
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ca:	6894      	ldr	r4, [r2, #8]
 80057cc:	3b21      	subs	r3, #33	; 0x21
 80057ce:	4323      	orrs	r3, r4
 80057d0:	6093      	str	r3, [r2, #8]
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057d2:	2380      	movs	r3, #128	; 0x80
 80057d4:	015b      	lsls	r3, r3, #5
 80057d6:	4299      	cmp	r1, r3
 80057d8:	d117      	bne.n	800580a <UART_Start_Receive_IT+0x72>
 80057da:	6903      	ldr	r3, [r0, #16]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d114      	bne.n	800580a <UART_Start_Receive_IT+0x72>
    huart->RxISR = UART_RxISR_16BIT;
 80057e0:	4b0c      	ldr	r3, [pc, #48]	; (8005814 <UART_Start_Receive_IT+0x7c>)
    huart->RxISR = UART_RxISR_8BIT;
 80057e2:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 80057e4:	0003      	movs	r3, r0
 80057e6:	2000      	movs	r0, #0
 80057e8:	3374      	adds	r3, #116	; 0x74
 80057ea:	7018      	strb	r0, [r3, #0]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80057ec:	2390      	movs	r3, #144	; 0x90
 80057ee:	6811      	ldr	r1, [r2, #0]
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	430b      	orrs	r3, r1
 80057f4:	6013      	str	r3, [r2, #0]
}
 80057f6:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 80057f8:	22ff      	movs	r2, #255	; 0xff
 80057fa:	e7df      	b.n	80057bc <UART_Start_Receive_IT+0x24>
 80057fc:	2900      	cmp	r1, #0
 80057fe:	d1dd      	bne.n	80057bc <UART_Start_Receive_IT+0x24>
 8005800:	6902      	ldr	r2, [r0, #16]
 8005802:	2a00      	cmp	r2, #0
 8005804:	d0f8      	beq.n	80057f8 <UART_Start_Receive_IT+0x60>
 8005806:	227f      	movs	r2, #127	; 0x7f
 8005808:	e7d8      	b.n	80057bc <UART_Start_Receive_IT+0x24>
    huart->RxISR = UART_RxISR_8BIT;
 800580a:	4b03      	ldr	r3, [pc, #12]	; (8005818 <UART_Start_Receive_IT+0x80>)
 800580c:	e7e9      	b.n	80057e2 <UART_Start_Receive_IT+0x4a>
 800580e:	46c0      	nop			; (mov r8, r8)
 8005810:	000001ff 	.word	0x000001ff
 8005814:	08005305 	.word	0x08005305
 8005818:	08005281 	.word	0x08005281

0800581c <HAL_UART_Receive_IT>:
{
 800581c:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800581e:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
{
 8005820:	0003      	movs	r3, r0
    return HAL_BUSY;
 8005822:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8005824:	2c20      	cmp	r4, #32
 8005826:	d124      	bne.n	8005872 <HAL_UART_Receive_IT+0x56>
      return HAL_ERROR;
 8005828:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800582a:	2900      	cmp	r1, #0
 800582c:	d021      	beq.n	8005872 <HAL_UART_Receive_IT+0x56>
 800582e:	2a00      	cmp	r2, #0
 8005830:	d01f      	beq.n	8005872 <HAL_UART_Receive_IT+0x56>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005832:	2480      	movs	r4, #128	; 0x80
 8005834:	689d      	ldr	r5, [r3, #8]
 8005836:	0164      	lsls	r4, r4, #5
 8005838:	42a5      	cmp	r5, r4
 800583a:	d104      	bne.n	8005846 <HAL_UART_Receive_IT+0x2a>
 800583c:	691c      	ldr	r4, [r3, #16]
 800583e:	2c00      	cmp	r4, #0
 8005840:	d101      	bne.n	8005846 <HAL_UART_Receive_IT+0x2a>
      if ((((uint32_t)pData) & 1U) != 0U)
 8005842:	4201      	tst	r1, r0
 8005844:	d115      	bne.n	8005872 <HAL_UART_Receive_IT+0x56>
    __HAL_LOCK(huart);
 8005846:	001c      	movs	r4, r3
 8005848:	3474      	adds	r4, #116	; 0x74
 800584a:	7825      	ldrb	r5, [r4, #0]
    return HAL_BUSY;
 800584c:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800584e:	2d01      	cmp	r5, #1
 8005850:	d00f      	beq.n	8005872 <HAL_UART_Receive_IT+0x56>
 8005852:	3801      	subs	r0, #1
 8005854:	7020      	strb	r0, [r4, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005856:	2000      	movs	r0, #0
 8005858:	6618      	str	r0, [r3, #96]	; 0x60
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800585a:	6818      	ldr	r0, [r3, #0]
 800585c:	6844      	ldr	r4, [r0, #4]
 800585e:	0224      	lsls	r4, r4, #8
 8005860:	d504      	bpl.n	800586c <HAL_UART_Receive_IT+0x50>
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005862:	2480      	movs	r4, #128	; 0x80
 8005864:	6805      	ldr	r5, [r0, #0]
 8005866:	04e4      	lsls	r4, r4, #19
 8005868:	432c      	orrs	r4, r5
 800586a:	6004      	str	r4, [r0, #0]
    return(UART_Start_Receive_IT(huart, pData, Size));
 800586c:	0018      	movs	r0, r3
 800586e:	f7ff ff93 	bl	8005798 <UART_Start_Receive_IT>
}
 8005872:	bd70      	pop	{r4, r5, r6, pc}

08005874 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005874:	4a19      	ldr	r2, [pc, #100]	; (80058dc <LL_TIM_Init+0x68>)
{
 8005876:	b510      	push	{r4, lr}
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8005878:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800587a:	4290      	cmp	r0, r2
 800587c:	d002      	beq.n	8005884 <LL_TIM_Init+0x10>
 800587e:	4c18      	ldr	r4, [pc, #96]	; (80058e0 <LL_TIM_Init+0x6c>)
 8005880:	42a0      	cmp	r0, r4
 8005882:	d108      	bne.n	8005896 <LL_TIM_Init+0x22>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8005884:	2470      	movs	r4, #112	; 0x70
 8005886:	43a3      	bics	r3, r4
 8005888:	684c      	ldr	r4, [r1, #4]
 800588a:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800588c:	4290      	cmp	r0, r2
 800588e:	d00b      	beq.n	80058a8 <LL_TIM_Init+0x34>
 8005890:	4c13      	ldr	r4, [pc, #76]	; (80058e0 <LL_TIM_Init+0x6c>)
 8005892:	42a0      	cmp	r0, r4
 8005894:	d008      	beq.n	80058a8 <LL_TIM_Init+0x34>
 8005896:	4c13      	ldr	r4, [pc, #76]	; (80058e4 <LL_TIM_Init+0x70>)
 8005898:	42a0      	cmp	r0, r4
 800589a:	d005      	beq.n	80058a8 <LL_TIM_Init+0x34>
 800589c:	4c12      	ldr	r4, [pc, #72]	; (80058e8 <LL_TIM_Init+0x74>)
 800589e:	42a0      	cmp	r0, r4
 80058a0:	d002      	beq.n	80058a8 <LL_TIM_Init+0x34>
 80058a2:	4c12      	ldr	r4, [pc, #72]	; (80058ec <LL_TIM_Init+0x78>)
 80058a4:	42a0      	cmp	r0, r4
 80058a6:	d103      	bne.n	80058b0 <LL_TIM_Init+0x3c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80058a8:	4c11      	ldr	r4, [pc, #68]	; (80058f0 <LL_TIM_Init+0x7c>)
 80058aa:	4023      	ands	r3, r4
 80058ac:	68cc      	ldr	r4, [r1, #12]
 80058ae:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80058b0:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80058b2:	688b      	ldr	r3, [r1, #8]
 80058b4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80058b6:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80058b8:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058ba:	4290      	cmp	r0, r2
 80058bc:	d005      	beq.n	80058ca <LL_TIM_Init+0x56>
 80058be:	4b0a      	ldr	r3, [pc, #40]	; (80058e8 <LL_TIM_Init+0x74>)
 80058c0:	4298      	cmp	r0, r3
 80058c2:	d002      	beq.n	80058ca <LL_TIM_Init+0x56>
 80058c4:	4b09      	ldr	r3, [pc, #36]	; (80058ec <LL_TIM_Init+0x78>)
 80058c6:	4298      	cmp	r0, r3
 80058c8:	d101      	bne.n	80058ce <LL_TIM_Init+0x5a>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80058ca:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80058cc:	6303      	str	r3, [r0, #48]	; 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80058ce:	2301      	movs	r3, #1
 80058d0:	6942      	ldr	r2, [r0, #20]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 80058d6:	2000      	movs	r0, #0
 80058d8:	bd10      	pop	{r4, pc}
 80058da:	46c0      	nop			; (mov r8, r8)
 80058dc:	40012c00 	.word	0x40012c00
 80058e0:	40000400 	.word	0x40000400
 80058e4:	40002000 	.word	0x40002000
 80058e8:	40014400 	.word	0x40014400
 80058ec:	40014800 	.word	0x40014800
 80058f0:	fffffcff 	.word	0xfffffcff

080058f4 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80058f4:	4b01      	ldr	r3, [pc, #4]	; (80058fc <LL_SetSystemCoreClock+0x8>)
 80058f6:	6018      	str	r0, [r3, #0]
}
 80058f8:	4770      	bx	lr
 80058fa:	46c0      	nop			; (mov r8, r8)
 80058fc:	20000004 	.word	0x20000004

08005900 <__libc_init_array>:
 8005900:	b570      	push	{r4, r5, r6, lr}
 8005902:	2600      	movs	r6, #0
 8005904:	4d0c      	ldr	r5, [pc, #48]	; (8005938 <__libc_init_array+0x38>)
 8005906:	4c0d      	ldr	r4, [pc, #52]	; (800593c <__libc_init_array+0x3c>)
 8005908:	1b64      	subs	r4, r4, r5
 800590a:	10a4      	asrs	r4, r4, #2
 800590c:	42a6      	cmp	r6, r4
 800590e:	d109      	bne.n	8005924 <__libc_init_array+0x24>
 8005910:	2600      	movs	r6, #0
 8005912:	f000 f82b 	bl	800596c <_init>
 8005916:	4d0a      	ldr	r5, [pc, #40]	; (8005940 <__libc_init_array+0x40>)
 8005918:	4c0a      	ldr	r4, [pc, #40]	; (8005944 <__libc_init_array+0x44>)
 800591a:	1b64      	subs	r4, r4, r5
 800591c:	10a4      	asrs	r4, r4, #2
 800591e:	42a6      	cmp	r6, r4
 8005920:	d105      	bne.n	800592e <__libc_init_array+0x2e>
 8005922:	bd70      	pop	{r4, r5, r6, pc}
 8005924:	00b3      	lsls	r3, r6, #2
 8005926:	58eb      	ldr	r3, [r5, r3]
 8005928:	4798      	blx	r3
 800592a:	3601      	adds	r6, #1
 800592c:	e7ee      	b.n	800590c <__libc_init_array+0xc>
 800592e:	00b3      	lsls	r3, r6, #2
 8005930:	58eb      	ldr	r3, [r5, r3]
 8005932:	4798      	blx	r3
 8005934:	3601      	adds	r6, #1
 8005936:	e7f2      	b.n	800591e <__libc_init_array+0x1e>
 8005938:	080061d8 	.word	0x080061d8
 800593c:	080061d8 	.word	0x080061d8
 8005940:	080061d8 	.word	0x080061d8
 8005944:	080061dc 	.word	0x080061dc

08005948 <memcpy>:
 8005948:	2300      	movs	r3, #0
 800594a:	b510      	push	{r4, lr}
 800594c:	429a      	cmp	r2, r3
 800594e:	d100      	bne.n	8005952 <memcpy+0xa>
 8005950:	bd10      	pop	{r4, pc}
 8005952:	5ccc      	ldrb	r4, [r1, r3]
 8005954:	54c4      	strb	r4, [r0, r3]
 8005956:	3301      	adds	r3, #1
 8005958:	e7f8      	b.n	800594c <memcpy+0x4>

0800595a <memset>:
 800595a:	0003      	movs	r3, r0
 800595c:	1812      	adds	r2, r2, r0
 800595e:	4293      	cmp	r3, r2
 8005960:	d100      	bne.n	8005964 <memset+0xa>
 8005962:	4770      	bx	lr
 8005964:	7019      	strb	r1, [r3, #0]
 8005966:	3301      	adds	r3, #1
 8005968:	e7f9      	b.n	800595e <memset+0x4>
	...

0800596c <_init>:
 800596c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596e:	46c0      	nop			; (mov r8, r8)
 8005970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005972:	bc08      	pop	{r3}
 8005974:	469e      	mov	lr, r3
 8005976:	4770      	bx	lr

08005978 <_fini>:
 8005978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597a:	46c0      	nop			; (mov r8, r8)
 800597c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800597e:	bc08      	pop	{r3}
 8005980:	469e      	mov	lr, r3
 8005982:	4770      	bx	lr
